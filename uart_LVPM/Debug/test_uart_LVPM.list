
test_uart_LVPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003118  08003118  00004118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800319c  0800319c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  0800319c  0800319c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800319c  0800319c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a0  080031a0  000041a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080031a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  08003200  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003200  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeb5  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bea  00000000  00000000  0000ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000035b1  00000000  00000000  00011b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  000150d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ef  00000000  00000000  00015780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010bac  00000000  00000000  00015e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ced6  00000000  00000000  00026a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006298e  00000000  00000000  000338f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009627f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001634  00000000  00000000  000962c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  000978f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003100 	.word	0x08003100

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003100 	.word	0x08003100

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_dadd>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	b083      	sub	sp, #12
 8000266:	9000      	str	r0, [sp, #0]
 8000268:	9101      	str	r1, [sp, #4]
 800026a:	030c      	lsls	r4, r1, #12
 800026c:	004f      	lsls	r7, r1, #1
 800026e:	0fce      	lsrs	r6, r1, #31
 8000270:	0a61      	lsrs	r1, r4, #9
 8000272:	9c00      	ldr	r4, [sp, #0]
 8000274:	031d      	lsls	r5, r3, #12
 8000276:	0f64      	lsrs	r4, r4, #29
 8000278:	430c      	orrs	r4, r1
 800027a:	9900      	ldr	r1, [sp, #0]
 800027c:	9200      	str	r2, [sp, #0]
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	00c8      	lsls	r0, r1, #3
 8000282:	0059      	lsls	r1, r3, #1
 8000284:	0d4b      	lsrs	r3, r1, #21
 8000286:	4699      	mov	r9, r3
 8000288:	9a00      	ldr	r2, [sp, #0]
 800028a:	9b01      	ldr	r3, [sp, #4]
 800028c:	0a6d      	lsrs	r5, r5, #9
 800028e:	0fd9      	lsrs	r1, r3, #31
 8000290:	0f53      	lsrs	r3, r2, #29
 8000292:	432b      	orrs	r3, r5
 8000294:	469a      	mov	sl, r3
 8000296:	9b00      	ldr	r3, [sp, #0]
 8000298:	0d7f      	lsrs	r7, r7, #21
 800029a:	00da      	lsls	r2, r3, #3
 800029c:	4694      	mov	ip, r2
 800029e:	464a      	mov	r2, r9
 80002a0:	46b0      	mov	r8, r6
 80002a2:	1aba      	subs	r2, r7, r2
 80002a4:	428e      	cmp	r6, r1
 80002a6:	d100      	bne.n	80002aa <__aeabi_dadd+0x52>
 80002a8:	e0b0      	b.n	800040c <__aeabi_dadd+0x1b4>
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	dc00      	bgt.n	80002b0 <__aeabi_dadd+0x58>
 80002ae:	e078      	b.n	80003a2 <__aeabi_dadd+0x14a>
 80002b0:	4649      	mov	r1, r9
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_dadd+0x60>
 80002b6:	e0e9      	b.n	800048c <__aeabi_dadd+0x234>
 80002b8:	49c9      	ldr	r1, [pc, #804]	@ (80005e0 <__aeabi_dadd+0x388>)
 80002ba:	428f      	cmp	r7, r1
 80002bc:	d100      	bne.n	80002c0 <__aeabi_dadd+0x68>
 80002be:	e195      	b.n	80005ec <__aeabi_dadd+0x394>
 80002c0:	2501      	movs	r5, #1
 80002c2:	2a38      	cmp	r2, #56	@ 0x38
 80002c4:	dc16      	bgt.n	80002f4 <__aeabi_dadd+0x9c>
 80002c6:	2180      	movs	r1, #128	@ 0x80
 80002c8:	4653      	mov	r3, sl
 80002ca:	0409      	lsls	r1, r1, #16
 80002cc:	430b      	orrs	r3, r1
 80002ce:	469a      	mov	sl, r3
 80002d0:	2a1f      	cmp	r2, #31
 80002d2:	dd00      	ble.n	80002d6 <__aeabi_dadd+0x7e>
 80002d4:	e1e7      	b.n	80006a6 <__aeabi_dadd+0x44e>
 80002d6:	2120      	movs	r1, #32
 80002d8:	4655      	mov	r5, sl
 80002da:	1a8b      	subs	r3, r1, r2
 80002dc:	4661      	mov	r1, ip
 80002de:	409d      	lsls	r5, r3
 80002e0:	40d1      	lsrs	r1, r2
 80002e2:	430d      	orrs	r5, r1
 80002e4:	4661      	mov	r1, ip
 80002e6:	4099      	lsls	r1, r3
 80002e8:	1e4b      	subs	r3, r1, #1
 80002ea:	4199      	sbcs	r1, r3
 80002ec:	4653      	mov	r3, sl
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	430d      	orrs	r5, r1
 80002f2:	1ae4      	subs	r4, r4, r3
 80002f4:	1b45      	subs	r5, r0, r5
 80002f6:	42a8      	cmp	r0, r5
 80002f8:	4180      	sbcs	r0, r0
 80002fa:	4240      	negs	r0, r0
 80002fc:	1a24      	subs	r4, r4, r0
 80002fe:	0223      	lsls	r3, r4, #8
 8000300:	d400      	bmi.n	8000304 <__aeabi_dadd+0xac>
 8000302:	e10f      	b.n	8000524 <__aeabi_dadd+0x2cc>
 8000304:	0264      	lsls	r4, r4, #9
 8000306:	0a64      	lsrs	r4, r4, #9
 8000308:	2c00      	cmp	r4, #0
 800030a:	d100      	bne.n	800030e <__aeabi_dadd+0xb6>
 800030c:	e139      	b.n	8000582 <__aeabi_dadd+0x32a>
 800030e:	0020      	movs	r0, r4
 8000310:	f000 fe38 	bl	8000f84 <__clzsi2>
 8000314:	0003      	movs	r3, r0
 8000316:	3b08      	subs	r3, #8
 8000318:	2120      	movs	r1, #32
 800031a:	0028      	movs	r0, r5
 800031c:	1aca      	subs	r2, r1, r3
 800031e:	40d0      	lsrs	r0, r2
 8000320:	409c      	lsls	r4, r3
 8000322:	0002      	movs	r2, r0
 8000324:	409d      	lsls	r5, r3
 8000326:	4322      	orrs	r2, r4
 8000328:	429f      	cmp	r7, r3
 800032a:	dd00      	ble.n	800032e <__aeabi_dadd+0xd6>
 800032c:	e173      	b.n	8000616 <__aeabi_dadd+0x3be>
 800032e:	1bd8      	subs	r0, r3, r7
 8000330:	3001      	adds	r0, #1
 8000332:	1a09      	subs	r1, r1, r0
 8000334:	002c      	movs	r4, r5
 8000336:	408d      	lsls	r5, r1
 8000338:	40c4      	lsrs	r4, r0
 800033a:	1e6b      	subs	r3, r5, #1
 800033c:	419d      	sbcs	r5, r3
 800033e:	0013      	movs	r3, r2
 8000340:	40c2      	lsrs	r2, r0
 8000342:	408b      	lsls	r3, r1
 8000344:	4325      	orrs	r5, r4
 8000346:	2700      	movs	r7, #0
 8000348:	0014      	movs	r4, r2
 800034a:	431d      	orrs	r5, r3
 800034c:	076b      	lsls	r3, r5, #29
 800034e:	d009      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000350:	230f      	movs	r3, #15
 8000352:	402b      	ands	r3, r5
 8000354:	2b04      	cmp	r3, #4
 8000356:	d005      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000358:	1d2b      	adds	r3, r5, #4
 800035a:	42ab      	cmp	r3, r5
 800035c:	41ad      	sbcs	r5, r5
 800035e:	426d      	negs	r5, r5
 8000360:	1964      	adds	r4, r4, r5
 8000362:	001d      	movs	r5, r3
 8000364:	0223      	lsls	r3, r4, #8
 8000366:	d400      	bmi.n	800036a <__aeabi_dadd+0x112>
 8000368:	e12d      	b.n	80005c6 <__aeabi_dadd+0x36e>
 800036a:	4a9d      	ldr	r2, [pc, #628]	@ (80005e0 <__aeabi_dadd+0x388>)
 800036c:	3701      	adds	r7, #1
 800036e:	4297      	cmp	r7, r2
 8000370:	d100      	bne.n	8000374 <__aeabi_dadd+0x11c>
 8000372:	e0d3      	b.n	800051c <__aeabi_dadd+0x2c4>
 8000374:	4646      	mov	r6, r8
 8000376:	499b      	ldr	r1, [pc, #620]	@ (80005e4 <__aeabi_dadd+0x38c>)
 8000378:	08ed      	lsrs	r5, r5, #3
 800037a:	4021      	ands	r1, r4
 800037c:	074a      	lsls	r2, r1, #29
 800037e:	432a      	orrs	r2, r5
 8000380:	057c      	lsls	r4, r7, #21
 8000382:	024d      	lsls	r5, r1, #9
 8000384:	0b2d      	lsrs	r5, r5, #12
 8000386:	0d64      	lsrs	r4, r4, #21
 8000388:	0524      	lsls	r4, r4, #20
 800038a:	432c      	orrs	r4, r5
 800038c:	07f6      	lsls	r6, r6, #31
 800038e:	4334      	orrs	r4, r6
 8000390:	0010      	movs	r0, r2
 8000392:	0021      	movs	r1, r4
 8000394:	b003      	add	sp, #12
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	46bb      	mov	fp, r7
 800039a:	46b2      	mov	sl, r6
 800039c:	46a9      	mov	r9, r5
 800039e:	46a0      	mov	r8, r4
 80003a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d100      	bne.n	80003a8 <__aeabi_dadd+0x150>
 80003a6:	e084      	b.n	80004b2 <__aeabi_dadd+0x25a>
 80003a8:	464a      	mov	r2, r9
 80003aa:	1bd2      	subs	r2, r2, r7
 80003ac:	2f00      	cmp	r7, #0
 80003ae:	d000      	beq.n	80003b2 <__aeabi_dadd+0x15a>
 80003b0:	e16d      	b.n	800068e <__aeabi_dadd+0x436>
 80003b2:	0025      	movs	r5, r4
 80003b4:	4305      	orrs	r5, r0
 80003b6:	d100      	bne.n	80003ba <__aeabi_dadd+0x162>
 80003b8:	e127      	b.n	800060a <__aeabi_dadd+0x3b2>
 80003ba:	1e56      	subs	r6, r2, #1
 80003bc:	2a01      	cmp	r2, #1
 80003be:	d100      	bne.n	80003c2 <__aeabi_dadd+0x16a>
 80003c0:	e23b      	b.n	800083a <__aeabi_dadd+0x5e2>
 80003c2:	4d87      	ldr	r5, [pc, #540]	@ (80005e0 <__aeabi_dadd+0x388>)
 80003c4:	42aa      	cmp	r2, r5
 80003c6:	d100      	bne.n	80003ca <__aeabi_dadd+0x172>
 80003c8:	e26a      	b.n	80008a0 <__aeabi_dadd+0x648>
 80003ca:	2501      	movs	r5, #1
 80003cc:	2e38      	cmp	r6, #56	@ 0x38
 80003ce:	dc12      	bgt.n	80003f6 <__aeabi_dadd+0x19e>
 80003d0:	0032      	movs	r2, r6
 80003d2:	2a1f      	cmp	r2, #31
 80003d4:	dd00      	ble.n	80003d8 <__aeabi_dadd+0x180>
 80003d6:	e1f8      	b.n	80007ca <__aeabi_dadd+0x572>
 80003d8:	2620      	movs	r6, #32
 80003da:	0025      	movs	r5, r4
 80003dc:	1ab6      	subs	r6, r6, r2
 80003de:	0007      	movs	r7, r0
 80003e0:	4653      	mov	r3, sl
 80003e2:	40b0      	lsls	r0, r6
 80003e4:	40d4      	lsrs	r4, r2
 80003e6:	40b5      	lsls	r5, r6
 80003e8:	40d7      	lsrs	r7, r2
 80003ea:	1e46      	subs	r6, r0, #1
 80003ec:	41b0      	sbcs	r0, r6
 80003ee:	1b1b      	subs	r3, r3, r4
 80003f0:	469a      	mov	sl, r3
 80003f2:	433d      	orrs	r5, r7
 80003f4:	4305      	orrs	r5, r0
 80003f6:	4662      	mov	r2, ip
 80003f8:	1b55      	subs	r5, r2, r5
 80003fa:	45ac      	cmp	ip, r5
 80003fc:	4192      	sbcs	r2, r2
 80003fe:	4653      	mov	r3, sl
 8000400:	4252      	negs	r2, r2
 8000402:	000e      	movs	r6, r1
 8000404:	464f      	mov	r7, r9
 8000406:	4688      	mov	r8, r1
 8000408:	1a9c      	subs	r4, r3, r2
 800040a:	e778      	b.n	80002fe <__aeabi_dadd+0xa6>
 800040c:	2a00      	cmp	r2, #0
 800040e:	dc00      	bgt.n	8000412 <__aeabi_dadd+0x1ba>
 8000410:	e08e      	b.n	8000530 <__aeabi_dadd+0x2d8>
 8000412:	4649      	mov	r1, r9
 8000414:	2900      	cmp	r1, #0
 8000416:	d175      	bne.n	8000504 <__aeabi_dadd+0x2ac>
 8000418:	4661      	mov	r1, ip
 800041a:	4653      	mov	r3, sl
 800041c:	4319      	orrs	r1, r3
 800041e:	d100      	bne.n	8000422 <__aeabi_dadd+0x1ca>
 8000420:	e0f6      	b.n	8000610 <__aeabi_dadd+0x3b8>
 8000422:	1e51      	subs	r1, r2, #1
 8000424:	2a01      	cmp	r2, #1
 8000426:	d100      	bne.n	800042a <__aeabi_dadd+0x1d2>
 8000428:	e191      	b.n	800074e <__aeabi_dadd+0x4f6>
 800042a:	4d6d      	ldr	r5, [pc, #436]	@ (80005e0 <__aeabi_dadd+0x388>)
 800042c:	42aa      	cmp	r2, r5
 800042e:	d100      	bne.n	8000432 <__aeabi_dadd+0x1da>
 8000430:	e0dc      	b.n	80005ec <__aeabi_dadd+0x394>
 8000432:	2501      	movs	r5, #1
 8000434:	2938      	cmp	r1, #56	@ 0x38
 8000436:	dc14      	bgt.n	8000462 <__aeabi_dadd+0x20a>
 8000438:	000a      	movs	r2, r1
 800043a:	2a1f      	cmp	r2, #31
 800043c:	dd00      	ble.n	8000440 <__aeabi_dadd+0x1e8>
 800043e:	e1a2      	b.n	8000786 <__aeabi_dadd+0x52e>
 8000440:	2120      	movs	r1, #32
 8000442:	4653      	mov	r3, sl
 8000444:	1a89      	subs	r1, r1, r2
 8000446:	408b      	lsls	r3, r1
 8000448:	001d      	movs	r5, r3
 800044a:	4663      	mov	r3, ip
 800044c:	40d3      	lsrs	r3, r2
 800044e:	431d      	orrs	r5, r3
 8000450:	4663      	mov	r3, ip
 8000452:	408b      	lsls	r3, r1
 8000454:	0019      	movs	r1, r3
 8000456:	1e4b      	subs	r3, r1, #1
 8000458:	4199      	sbcs	r1, r3
 800045a:	4653      	mov	r3, sl
 800045c:	40d3      	lsrs	r3, r2
 800045e:	430d      	orrs	r5, r1
 8000460:	18e4      	adds	r4, r4, r3
 8000462:	182d      	adds	r5, r5, r0
 8000464:	4285      	cmp	r5, r0
 8000466:	4180      	sbcs	r0, r0
 8000468:	4240      	negs	r0, r0
 800046a:	1824      	adds	r4, r4, r0
 800046c:	0223      	lsls	r3, r4, #8
 800046e:	d559      	bpl.n	8000524 <__aeabi_dadd+0x2cc>
 8000470:	4b5b      	ldr	r3, [pc, #364]	@ (80005e0 <__aeabi_dadd+0x388>)
 8000472:	3701      	adds	r7, #1
 8000474:	429f      	cmp	r7, r3
 8000476:	d051      	beq.n	800051c <__aeabi_dadd+0x2c4>
 8000478:	2101      	movs	r1, #1
 800047a:	4b5a      	ldr	r3, [pc, #360]	@ (80005e4 <__aeabi_dadd+0x38c>)
 800047c:	086a      	lsrs	r2, r5, #1
 800047e:	401c      	ands	r4, r3
 8000480:	4029      	ands	r1, r5
 8000482:	430a      	orrs	r2, r1
 8000484:	07e5      	lsls	r5, r4, #31
 8000486:	4315      	orrs	r5, r2
 8000488:	0864      	lsrs	r4, r4, #1
 800048a:	e75f      	b.n	800034c <__aeabi_dadd+0xf4>
 800048c:	4661      	mov	r1, ip
 800048e:	4653      	mov	r3, sl
 8000490:	4319      	orrs	r1, r3
 8000492:	d100      	bne.n	8000496 <__aeabi_dadd+0x23e>
 8000494:	e0bc      	b.n	8000610 <__aeabi_dadd+0x3b8>
 8000496:	1e51      	subs	r1, r2, #1
 8000498:	2a01      	cmp	r2, #1
 800049a:	d100      	bne.n	800049e <__aeabi_dadd+0x246>
 800049c:	e164      	b.n	8000768 <__aeabi_dadd+0x510>
 800049e:	4d50      	ldr	r5, [pc, #320]	@ (80005e0 <__aeabi_dadd+0x388>)
 80004a0:	42aa      	cmp	r2, r5
 80004a2:	d100      	bne.n	80004a6 <__aeabi_dadd+0x24e>
 80004a4:	e16a      	b.n	800077c <__aeabi_dadd+0x524>
 80004a6:	2501      	movs	r5, #1
 80004a8:	2938      	cmp	r1, #56	@ 0x38
 80004aa:	dd00      	ble.n	80004ae <__aeabi_dadd+0x256>
 80004ac:	e722      	b.n	80002f4 <__aeabi_dadd+0x9c>
 80004ae:	000a      	movs	r2, r1
 80004b0:	e70e      	b.n	80002d0 <__aeabi_dadd+0x78>
 80004b2:	4a4d      	ldr	r2, [pc, #308]	@ (80005e8 <__aeabi_dadd+0x390>)
 80004b4:	1c7d      	adds	r5, r7, #1
 80004b6:	4215      	tst	r5, r2
 80004b8:	d000      	beq.n	80004bc <__aeabi_dadd+0x264>
 80004ba:	e0d0      	b.n	800065e <__aeabi_dadd+0x406>
 80004bc:	0025      	movs	r5, r4
 80004be:	4662      	mov	r2, ip
 80004c0:	4653      	mov	r3, sl
 80004c2:	4305      	orrs	r5, r0
 80004c4:	431a      	orrs	r2, r3
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_dadd+0x274>
 80004ca:	e137      	b.n	800073c <__aeabi_dadd+0x4e4>
 80004cc:	2d00      	cmp	r5, #0
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dadd+0x27a>
 80004d0:	e1a8      	b.n	8000824 <__aeabi_dadd+0x5cc>
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_dadd+0x280>
 80004d6:	e16a      	b.n	80007ae <__aeabi_dadd+0x556>
 80004d8:	4663      	mov	r3, ip
 80004da:	1ac5      	subs	r5, r0, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	1ae2      	subs	r2, r4, r3
 80004e0:	42a8      	cmp	r0, r5
 80004e2:	419b      	sbcs	r3, r3
 80004e4:	425b      	negs	r3, r3
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	021a      	lsls	r2, r3, #8
 80004ea:	d400      	bmi.n	80004ee <__aeabi_dadd+0x296>
 80004ec:	e203      	b.n	80008f6 <__aeabi_dadd+0x69e>
 80004ee:	4663      	mov	r3, ip
 80004f0:	1a1d      	subs	r5, r3, r0
 80004f2:	45ac      	cmp	ip, r5
 80004f4:	4192      	sbcs	r2, r2
 80004f6:	4653      	mov	r3, sl
 80004f8:	4252      	negs	r2, r2
 80004fa:	1b1c      	subs	r4, r3, r4
 80004fc:	000e      	movs	r6, r1
 80004fe:	4688      	mov	r8, r1
 8000500:	1aa4      	subs	r4, r4, r2
 8000502:	e723      	b.n	800034c <__aeabi_dadd+0xf4>
 8000504:	4936      	ldr	r1, [pc, #216]	@ (80005e0 <__aeabi_dadd+0x388>)
 8000506:	428f      	cmp	r7, r1
 8000508:	d070      	beq.n	80005ec <__aeabi_dadd+0x394>
 800050a:	2501      	movs	r5, #1
 800050c:	2a38      	cmp	r2, #56	@ 0x38
 800050e:	dca8      	bgt.n	8000462 <__aeabi_dadd+0x20a>
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	4653      	mov	r3, sl
 8000514:	0409      	lsls	r1, r1, #16
 8000516:	430b      	orrs	r3, r1
 8000518:	469a      	mov	sl, r3
 800051a:	e78e      	b.n	800043a <__aeabi_dadd+0x1e2>
 800051c:	003c      	movs	r4, r7
 800051e:	2500      	movs	r5, #0
 8000520:	2200      	movs	r2, #0
 8000522:	e731      	b.n	8000388 <__aeabi_dadd+0x130>
 8000524:	2307      	movs	r3, #7
 8000526:	402b      	ands	r3, r5
 8000528:	2b00      	cmp	r3, #0
 800052a:	d000      	beq.n	800052e <__aeabi_dadd+0x2d6>
 800052c:	e710      	b.n	8000350 <__aeabi_dadd+0xf8>
 800052e:	e093      	b.n	8000658 <__aeabi_dadd+0x400>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d074      	beq.n	800061e <__aeabi_dadd+0x3c6>
 8000534:	464a      	mov	r2, r9
 8000536:	1bd2      	subs	r2, r2, r7
 8000538:	2f00      	cmp	r7, #0
 800053a:	d100      	bne.n	800053e <__aeabi_dadd+0x2e6>
 800053c:	e0c7      	b.n	80006ce <__aeabi_dadd+0x476>
 800053e:	4928      	ldr	r1, [pc, #160]	@ (80005e0 <__aeabi_dadd+0x388>)
 8000540:	4589      	cmp	r9, r1
 8000542:	d100      	bne.n	8000546 <__aeabi_dadd+0x2ee>
 8000544:	e185      	b.n	8000852 <__aeabi_dadd+0x5fa>
 8000546:	2501      	movs	r5, #1
 8000548:	2a38      	cmp	r2, #56	@ 0x38
 800054a:	dc12      	bgt.n	8000572 <__aeabi_dadd+0x31a>
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	0409      	lsls	r1, r1, #16
 8000550:	430c      	orrs	r4, r1
 8000552:	2a1f      	cmp	r2, #31
 8000554:	dd00      	ble.n	8000558 <__aeabi_dadd+0x300>
 8000556:	e1ab      	b.n	80008b0 <__aeabi_dadd+0x658>
 8000558:	2120      	movs	r1, #32
 800055a:	0025      	movs	r5, r4
 800055c:	1a89      	subs	r1, r1, r2
 800055e:	0007      	movs	r7, r0
 8000560:	4088      	lsls	r0, r1
 8000562:	408d      	lsls	r5, r1
 8000564:	40d7      	lsrs	r7, r2
 8000566:	1e41      	subs	r1, r0, #1
 8000568:	4188      	sbcs	r0, r1
 800056a:	40d4      	lsrs	r4, r2
 800056c:	433d      	orrs	r5, r7
 800056e:	4305      	orrs	r5, r0
 8000570:	44a2      	add	sl, r4
 8000572:	4465      	add	r5, ip
 8000574:	4565      	cmp	r5, ip
 8000576:	4192      	sbcs	r2, r2
 8000578:	4252      	negs	r2, r2
 800057a:	4452      	add	r2, sl
 800057c:	0014      	movs	r4, r2
 800057e:	464f      	mov	r7, r9
 8000580:	e774      	b.n	800046c <__aeabi_dadd+0x214>
 8000582:	0028      	movs	r0, r5
 8000584:	f000 fcfe 	bl	8000f84 <__clzsi2>
 8000588:	0003      	movs	r3, r0
 800058a:	3318      	adds	r3, #24
 800058c:	2b1f      	cmp	r3, #31
 800058e:	dc00      	bgt.n	8000592 <__aeabi_dadd+0x33a>
 8000590:	e6c2      	b.n	8000318 <__aeabi_dadd+0xc0>
 8000592:	002a      	movs	r2, r5
 8000594:	3808      	subs	r0, #8
 8000596:	4082      	lsls	r2, r0
 8000598:	429f      	cmp	r7, r3
 800059a:	dd00      	ble.n	800059e <__aeabi_dadd+0x346>
 800059c:	e0a9      	b.n	80006f2 <__aeabi_dadd+0x49a>
 800059e:	1bdb      	subs	r3, r3, r7
 80005a0:	1c58      	adds	r0, r3, #1
 80005a2:	281f      	cmp	r0, #31
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_dadd+0x350>
 80005a6:	e1ac      	b.n	8000902 <__aeabi_dadd+0x6aa>
 80005a8:	0015      	movs	r5, r2
 80005aa:	3b1f      	subs	r3, #31
 80005ac:	40dd      	lsrs	r5, r3
 80005ae:	2820      	cmp	r0, #32
 80005b0:	d005      	beq.n	80005be <__aeabi_dadd+0x366>
 80005b2:	2340      	movs	r3, #64	@ 0x40
 80005b4:	1a1b      	subs	r3, r3, r0
 80005b6:	409a      	lsls	r2, r3
 80005b8:	1e53      	subs	r3, r2, #1
 80005ba:	419a      	sbcs	r2, r3
 80005bc:	4315      	orrs	r5, r2
 80005be:	2307      	movs	r3, #7
 80005c0:	2700      	movs	r7, #0
 80005c2:	402b      	ands	r3, r5
 80005c4:	e7b0      	b.n	8000528 <__aeabi_dadd+0x2d0>
 80005c6:	08ed      	lsrs	r5, r5, #3
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <__aeabi_dadd+0x388>)
 80005ca:	0762      	lsls	r2, r4, #29
 80005cc:	432a      	orrs	r2, r5
 80005ce:	08e4      	lsrs	r4, r4, #3
 80005d0:	429f      	cmp	r7, r3
 80005d2:	d00f      	beq.n	80005f4 <__aeabi_dadd+0x39c>
 80005d4:	0324      	lsls	r4, r4, #12
 80005d6:	0b25      	lsrs	r5, r4, #12
 80005d8:	057c      	lsls	r4, r7, #21
 80005da:	0d64      	lsrs	r4, r4, #21
 80005dc:	e6d4      	b.n	8000388 <__aeabi_dadd+0x130>
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	000007ff 	.word	0x000007ff
 80005e4:	ff7fffff 	.word	0xff7fffff
 80005e8:	000007fe 	.word	0x000007fe
 80005ec:	08c0      	lsrs	r0, r0, #3
 80005ee:	0762      	lsls	r2, r4, #29
 80005f0:	4302      	orrs	r2, r0
 80005f2:	08e4      	lsrs	r4, r4, #3
 80005f4:	0013      	movs	r3, r2
 80005f6:	4323      	orrs	r3, r4
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x3a4>
 80005fa:	e186      	b.n	800090a <__aeabi_dadd+0x6b2>
 80005fc:	2580      	movs	r5, #128	@ 0x80
 80005fe:	032d      	lsls	r5, r5, #12
 8000600:	4325      	orrs	r5, r4
 8000602:	032d      	lsls	r5, r5, #12
 8000604:	4cc3      	ldr	r4, [pc, #780]	@ (8000914 <__aeabi_dadd+0x6bc>)
 8000606:	0b2d      	lsrs	r5, r5, #12
 8000608:	e6be      	b.n	8000388 <__aeabi_dadd+0x130>
 800060a:	4660      	mov	r0, ip
 800060c:	4654      	mov	r4, sl
 800060e:	000e      	movs	r6, r1
 8000610:	0017      	movs	r7, r2
 8000612:	08c5      	lsrs	r5, r0, #3
 8000614:	e7d8      	b.n	80005c8 <__aeabi_dadd+0x370>
 8000616:	4cc0      	ldr	r4, [pc, #768]	@ (8000918 <__aeabi_dadd+0x6c0>)
 8000618:	1aff      	subs	r7, r7, r3
 800061a:	4014      	ands	r4, r2
 800061c:	e696      	b.n	800034c <__aeabi_dadd+0xf4>
 800061e:	4abf      	ldr	r2, [pc, #764]	@ (800091c <__aeabi_dadd+0x6c4>)
 8000620:	1c79      	adds	r1, r7, #1
 8000622:	4211      	tst	r1, r2
 8000624:	d16b      	bne.n	80006fe <__aeabi_dadd+0x4a6>
 8000626:	0022      	movs	r2, r4
 8000628:	4302      	orrs	r2, r0
 800062a:	2f00      	cmp	r7, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_dadd+0x3d8>
 800062e:	e0db      	b.n	80007e8 <__aeabi_dadd+0x590>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x3de>
 8000634:	e12d      	b.n	8000892 <__aeabi_dadd+0x63a>
 8000636:	4662      	mov	r2, ip
 8000638:	4653      	mov	r3, sl
 800063a:	431a      	orrs	r2, r3
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x3e8>
 800063e:	e0b6      	b.n	80007ae <__aeabi_dadd+0x556>
 8000640:	4663      	mov	r3, ip
 8000642:	18c5      	adds	r5, r0, r3
 8000644:	4285      	cmp	r5, r0
 8000646:	4180      	sbcs	r0, r0
 8000648:	4454      	add	r4, sl
 800064a:	4240      	negs	r0, r0
 800064c:	1824      	adds	r4, r4, r0
 800064e:	0223      	lsls	r3, r4, #8
 8000650:	d502      	bpl.n	8000658 <__aeabi_dadd+0x400>
 8000652:	000f      	movs	r7, r1
 8000654:	4bb0      	ldr	r3, [pc, #704]	@ (8000918 <__aeabi_dadd+0x6c0>)
 8000656:	401c      	ands	r4, r3
 8000658:	003a      	movs	r2, r7
 800065a:	0028      	movs	r0, r5
 800065c:	e7d8      	b.n	8000610 <__aeabi_dadd+0x3b8>
 800065e:	4662      	mov	r2, ip
 8000660:	1a85      	subs	r5, r0, r2
 8000662:	42a8      	cmp	r0, r5
 8000664:	4192      	sbcs	r2, r2
 8000666:	4653      	mov	r3, sl
 8000668:	4252      	negs	r2, r2
 800066a:	4691      	mov	r9, r2
 800066c:	1ae3      	subs	r3, r4, r3
 800066e:	001a      	movs	r2, r3
 8000670:	464b      	mov	r3, r9
 8000672:	1ad2      	subs	r2, r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	4691      	mov	r9, r2
 8000678:	021a      	lsls	r2, r3, #8
 800067a:	d454      	bmi.n	8000726 <__aeabi_dadd+0x4ce>
 800067c:	464a      	mov	r2, r9
 800067e:	464c      	mov	r4, r9
 8000680:	432a      	orrs	r2, r5
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x42e>
 8000684:	e640      	b.n	8000308 <__aeabi_dadd+0xb0>
 8000686:	2600      	movs	r6, #0
 8000688:	2400      	movs	r4, #0
 800068a:	2500      	movs	r5, #0
 800068c:	e67c      	b.n	8000388 <__aeabi_dadd+0x130>
 800068e:	4da1      	ldr	r5, [pc, #644]	@ (8000914 <__aeabi_dadd+0x6bc>)
 8000690:	45a9      	cmp	r9, r5
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x43e>
 8000694:	e090      	b.n	80007b8 <__aeabi_dadd+0x560>
 8000696:	2501      	movs	r5, #1
 8000698:	2a38      	cmp	r2, #56	@ 0x38
 800069a:	dd00      	ble.n	800069e <__aeabi_dadd+0x446>
 800069c:	e6ab      	b.n	80003f6 <__aeabi_dadd+0x19e>
 800069e:	2580      	movs	r5, #128	@ 0x80
 80006a0:	042d      	lsls	r5, r5, #16
 80006a2:	432c      	orrs	r4, r5
 80006a4:	e695      	b.n	80003d2 <__aeabi_dadd+0x17a>
 80006a6:	0011      	movs	r1, r2
 80006a8:	4655      	mov	r5, sl
 80006aa:	3920      	subs	r1, #32
 80006ac:	40cd      	lsrs	r5, r1
 80006ae:	46a9      	mov	r9, r5
 80006b0:	2a20      	cmp	r2, #32
 80006b2:	d006      	beq.n	80006c2 <__aeabi_dadd+0x46a>
 80006b4:	2140      	movs	r1, #64	@ 0x40
 80006b6:	4653      	mov	r3, sl
 80006b8:	1a8a      	subs	r2, r1, r2
 80006ba:	4093      	lsls	r3, r2
 80006bc:	4662      	mov	r2, ip
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	4665      	mov	r5, ip
 80006c4:	1e6b      	subs	r3, r5, #1
 80006c6:	419d      	sbcs	r5, r3
 80006c8:	464b      	mov	r3, r9
 80006ca:	431d      	orrs	r5, r3
 80006cc:	e612      	b.n	80002f4 <__aeabi_dadd+0x9c>
 80006ce:	0021      	movs	r1, r4
 80006d0:	4301      	orrs	r1, r0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x47e>
 80006d4:	e0c4      	b.n	8000860 <__aeabi_dadd+0x608>
 80006d6:	1e51      	subs	r1, r2, #1
 80006d8:	2a01      	cmp	r2, #1
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x486>
 80006dc:	e0fb      	b.n	80008d6 <__aeabi_dadd+0x67e>
 80006de:	4d8d      	ldr	r5, [pc, #564]	@ (8000914 <__aeabi_dadd+0x6bc>)
 80006e0:	42aa      	cmp	r2, r5
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x48e>
 80006e4:	e0b5      	b.n	8000852 <__aeabi_dadd+0x5fa>
 80006e6:	2501      	movs	r5, #1
 80006e8:	2938      	cmp	r1, #56	@ 0x38
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x496>
 80006ec:	e741      	b.n	8000572 <__aeabi_dadd+0x31a>
 80006ee:	000a      	movs	r2, r1
 80006f0:	e72f      	b.n	8000552 <__aeabi_dadd+0x2fa>
 80006f2:	4c89      	ldr	r4, [pc, #548]	@ (8000918 <__aeabi_dadd+0x6c0>)
 80006f4:	1aff      	subs	r7, r7, r3
 80006f6:	4014      	ands	r4, r2
 80006f8:	0762      	lsls	r2, r4, #29
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	e76a      	b.n	80005d4 <__aeabi_dadd+0x37c>
 80006fe:	4a85      	ldr	r2, [pc, #532]	@ (8000914 <__aeabi_dadd+0x6bc>)
 8000700:	4291      	cmp	r1, r2
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x4ae>
 8000704:	e0e3      	b.n	80008ce <__aeabi_dadd+0x676>
 8000706:	4663      	mov	r3, ip
 8000708:	18c2      	adds	r2, r0, r3
 800070a:	4282      	cmp	r2, r0
 800070c:	4180      	sbcs	r0, r0
 800070e:	0023      	movs	r3, r4
 8000710:	4240      	negs	r0, r0
 8000712:	4453      	add	r3, sl
 8000714:	181b      	adds	r3, r3, r0
 8000716:	07dd      	lsls	r5, r3, #31
 8000718:	085c      	lsrs	r4, r3, #1
 800071a:	2307      	movs	r3, #7
 800071c:	0852      	lsrs	r2, r2, #1
 800071e:	4315      	orrs	r5, r2
 8000720:	000f      	movs	r7, r1
 8000722:	402b      	ands	r3, r5
 8000724:	e700      	b.n	8000528 <__aeabi_dadd+0x2d0>
 8000726:	4663      	mov	r3, ip
 8000728:	1a1d      	subs	r5, r3, r0
 800072a:	45ac      	cmp	ip, r5
 800072c:	4192      	sbcs	r2, r2
 800072e:	4653      	mov	r3, sl
 8000730:	4252      	negs	r2, r2
 8000732:	1b1c      	subs	r4, r3, r4
 8000734:	000e      	movs	r6, r1
 8000736:	4688      	mov	r8, r1
 8000738:	1aa4      	subs	r4, r4, r2
 800073a:	e5e5      	b.n	8000308 <__aeabi_dadd+0xb0>
 800073c:	2d00      	cmp	r5, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_dadd+0x4ea>
 8000740:	e091      	b.n	8000866 <__aeabi_dadd+0x60e>
 8000742:	2a00      	cmp	r2, #0
 8000744:	d138      	bne.n	80007b8 <__aeabi_dadd+0x560>
 8000746:	2480      	movs	r4, #128	@ 0x80
 8000748:	2600      	movs	r6, #0
 800074a:	0324      	lsls	r4, r4, #12
 800074c:	e756      	b.n	80005fc <__aeabi_dadd+0x3a4>
 800074e:	4663      	mov	r3, ip
 8000750:	18c5      	adds	r5, r0, r3
 8000752:	4285      	cmp	r5, r0
 8000754:	4180      	sbcs	r0, r0
 8000756:	4454      	add	r4, sl
 8000758:	4240      	negs	r0, r0
 800075a:	1824      	adds	r4, r4, r0
 800075c:	2701      	movs	r7, #1
 800075e:	0223      	lsls	r3, r4, #8
 8000760:	d400      	bmi.n	8000764 <__aeabi_dadd+0x50c>
 8000762:	e6df      	b.n	8000524 <__aeabi_dadd+0x2cc>
 8000764:	2702      	movs	r7, #2
 8000766:	e687      	b.n	8000478 <__aeabi_dadd+0x220>
 8000768:	4663      	mov	r3, ip
 800076a:	1ac5      	subs	r5, r0, r3
 800076c:	42a8      	cmp	r0, r5
 800076e:	4180      	sbcs	r0, r0
 8000770:	4653      	mov	r3, sl
 8000772:	4240      	negs	r0, r0
 8000774:	1ae4      	subs	r4, r4, r3
 8000776:	2701      	movs	r7, #1
 8000778:	1a24      	subs	r4, r4, r0
 800077a:	e5c0      	b.n	80002fe <__aeabi_dadd+0xa6>
 800077c:	0762      	lsls	r2, r4, #29
 800077e:	08c0      	lsrs	r0, r0, #3
 8000780:	4302      	orrs	r2, r0
 8000782:	08e4      	lsrs	r4, r4, #3
 8000784:	e736      	b.n	80005f4 <__aeabi_dadd+0x39c>
 8000786:	0011      	movs	r1, r2
 8000788:	4653      	mov	r3, sl
 800078a:	3920      	subs	r1, #32
 800078c:	40cb      	lsrs	r3, r1
 800078e:	4699      	mov	r9, r3
 8000790:	2a20      	cmp	r2, #32
 8000792:	d006      	beq.n	80007a2 <__aeabi_dadd+0x54a>
 8000794:	2140      	movs	r1, #64	@ 0x40
 8000796:	4653      	mov	r3, sl
 8000798:	1a8a      	subs	r2, r1, r2
 800079a:	4093      	lsls	r3, r2
 800079c:	4662      	mov	r2, ip
 800079e:	431a      	orrs	r2, r3
 80007a0:	4694      	mov	ip, r2
 80007a2:	4665      	mov	r5, ip
 80007a4:	1e6b      	subs	r3, r5, #1
 80007a6:	419d      	sbcs	r5, r3
 80007a8:	464b      	mov	r3, r9
 80007aa:	431d      	orrs	r5, r3
 80007ac:	e659      	b.n	8000462 <__aeabi_dadd+0x20a>
 80007ae:	0762      	lsls	r2, r4, #29
 80007b0:	08c0      	lsrs	r0, r0, #3
 80007b2:	4302      	orrs	r2, r0
 80007b4:	08e4      	lsrs	r4, r4, #3
 80007b6:	e70d      	b.n	80005d4 <__aeabi_dadd+0x37c>
 80007b8:	4653      	mov	r3, sl
 80007ba:	075a      	lsls	r2, r3, #29
 80007bc:	4663      	mov	r3, ip
 80007be:	08d8      	lsrs	r0, r3, #3
 80007c0:	4653      	mov	r3, sl
 80007c2:	000e      	movs	r6, r1
 80007c4:	4302      	orrs	r2, r0
 80007c6:	08dc      	lsrs	r4, r3, #3
 80007c8:	e714      	b.n	80005f4 <__aeabi_dadd+0x39c>
 80007ca:	0015      	movs	r5, r2
 80007cc:	0026      	movs	r6, r4
 80007ce:	3d20      	subs	r5, #32
 80007d0:	40ee      	lsrs	r6, r5
 80007d2:	2a20      	cmp	r2, #32
 80007d4:	d003      	beq.n	80007de <__aeabi_dadd+0x586>
 80007d6:	2540      	movs	r5, #64	@ 0x40
 80007d8:	1aaa      	subs	r2, r5, r2
 80007da:	4094      	lsls	r4, r2
 80007dc:	4320      	orrs	r0, r4
 80007de:	1e42      	subs	r2, r0, #1
 80007e0:	4190      	sbcs	r0, r2
 80007e2:	0005      	movs	r5, r0
 80007e4:	4335      	orrs	r5, r6
 80007e6:	e606      	b.n	80003f6 <__aeabi_dadd+0x19e>
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	d07c      	beq.n	80008e6 <__aeabi_dadd+0x68e>
 80007ec:	4662      	mov	r2, ip
 80007ee:	4653      	mov	r3, sl
 80007f0:	08c0      	lsrs	r0, r0, #3
 80007f2:	431a      	orrs	r2, r3
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x5a0>
 80007f6:	e6fa      	b.n	80005ee <__aeabi_dadd+0x396>
 80007f8:	0762      	lsls	r2, r4, #29
 80007fa:	4310      	orrs	r0, r2
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	08e4      	lsrs	r4, r4, #3
 8000800:	0312      	lsls	r2, r2, #12
 8000802:	4214      	tst	r4, r2
 8000804:	d008      	beq.n	8000818 <__aeabi_dadd+0x5c0>
 8000806:	08d9      	lsrs	r1, r3, #3
 8000808:	4211      	tst	r1, r2
 800080a:	d105      	bne.n	8000818 <__aeabi_dadd+0x5c0>
 800080c:	4663      	mov	r3, ip
 800080e:	08d8      	lsrs	r0, r3, #3
 8000810:	4653      	mov	r3, sl
 8000812:	000c      	movs	r4, r1
 8000814:	075b      	lsls	r3, r3, #29
 8000816:	4318      	orrs	r0, r3
 8000818:	0f42      	lsrs	r2, r0, #29
 800081a:	00c0      	lsls	r0, r0, #3
 800081c:	08c0      	lsrs	r0, r0, #3
 800081e:	0752      	lsls	r2, r2, #29
 8000820:	4302      	orrs	r2, r0
 8000822:	e6e7      	b.n	80005f4 <__aeabi_dadd+0x39c>
 8000824:	2a00      	cmp	r2, #0
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x5d2>
 8000828:	e72d      	b.n	8000686 <__aeabi_dadd+0x42e>
 800082a:	4663      	mov	r3, ip
 800082c:	08d8      	lsrs	r0, r3, #3
 800082e:	4653      	mov	r3, sl
 8000830:	075a      	lsls	r2, r3, #29
 8000832:	000e      	movs	r6, r1
 8000834:	4302      	orrs	r2, r0
 8000836:	08dc      	lsrs	r4, r3, #3
 8000838:	e6cc      	b.n	80005d4 <__aeabi_dadd+0x37c>
 800083a:	4663      	mov	r3, ip
 800083c:	1a1d      	subs	r5, r3, r0
 800083e:	45ac      	cmp	ip, r5
 8000840:	4192      	sbcs	r2, r2
 8000842:	4653      	mov	r3, sl
 8000844:	4252      	negs	r2, r2
 8000846:	1b1c      	subs	r4, r3, r4
 8000848:	000e      	movs	r6, r1
 800084a:	4688      	mov	r8, r1
 800084c:	1aa4      	subs	r4, r4, r2
 800084e:	3701      	adds	r7, #1
 8000850:	e555      	b.n	80002fe <__aeabi_dadd+0xa6>
 8000852:	4663      	mov	r3, ip
 8000854:	08d9      	lsrs	r1, r3, #3
 8000856:	4653      	mov	r3, sl
 8000858:	075a      	lsls	r2, r3, #29
 800085a:	430a      	orrs	r2, r1
 800085c:	08dc      	lsrs	r4, r3, #3
 800085e:	e6c9      	b.n	80005f4 <__aeabi_dadd+0x39c>
 8000860:	4660      	mov	r0, ip
 8000862:	4654      	mov	r4, sl
 8000864:	e6d4      	b.n	8000610 <__aeabi_dadd+0x3b8>
 8000866:	08c0      	lsrs	r0, r0, #3
 8000868:	2a00      	cmp	r2, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x616>
 800086c:	e6bf      	b.n	80005ee <__aeabi_dadd+0x396>
 800086e:	0762      	lsls	r2, r4, #29
 8000870:	4310      	orrs	r0, r2
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	08e4      	lsrs	r4, r4, #3
 8000876:	0312      	lsls	r2, r2, #12
 8000878:	4214      	tst	r4, r2
 800087a:	d0cd      	beq.n	8000818 <__aeabi_dadd+0x5c0>
 800087c:	08dd      	lsrs	r5, r3, #3
 800087e:	4215      	tst	r5, r2
 8000880:	d1ca      	bne.n	8000818 <__aeabi_dadd+0x5c0>
 8000882:	4663      	mov	r3, ip
 8000884:	08d8      	lsrs	r0, r3, #3
 8000886:	4653      	mov	r3, sl
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	000e      	movs	r6, r1
 800088c:	002c      	movs	r4, r5
 800088e:	4318      	orrs	r0, r3
 8000890:	e7c2      	b.n	8000818 <__aeabi_dadd+0x5c0>
 8000892:	4663      	mov	r3, ip
 8000894:	08d9      	lsrs	r1, r3, #3
 8000896:	4653      	mov	r3, sl
 8000898:	075a      	lsls	r2, r3, #29
 800089a:	430a      	orrs	r2, r1
 800089c:	08dc      	lsrs	r4, r3, #3
 800089e:	e699      	b.n	80005d4 <__aeabi_dadd+0x37c>
 80008a0:	4663      	mov	r3, ip
 80008a2:	08d8      	lsrs	r0, r3, #3
 80008a4:	4653      	mov	r3, sl
 80008a6:	075a      	lsls	r2, r3, #29
 80008a8:	000e      	movs	r6, r1
 80008aa:	4302      	orrs	r2, r0
 80008ac:	08dc      	lsrs	r4, r3, #3
 80008ae:	e6a1      	b.n	80005f4 <__aeabi_dadd+0x39c>
 80008b0:	0011      	movs	r1, r2
 80008b2:	0027      	movs	r7, r4
 80008b4:	3920      	subs	r1, #32
 80008b6:	40cf      	lsrs	r7, r1
 80008b8:	2a20      	cmp	r2, #32
 80008ba:	d003      	beq.n	80008c4 <__aeabi_dadd+0x66c>
 80008bc:	2140      	movs	r1, #64	@ 0x40
 80008be:	1a8a      	subs	r2, r1, r2
 80008c0:	4094      	lsls	r4, r2
 80008c2:	4320      	orrs	r0, r4
 80008c4:	1e42      	subs	r2, r0, #1
 80008c6:	4190      	sbcs	r0, r2
 80008c8:	0005      	movs	r5, r0
 80008ca:	433d      	orrs	r5, r7
 80008cc:	e651      	b.n	8000572 <__aeabi_dadd+0x31a>
 80008ce:	000c      	movs	r4, r1
 80008d0:	2500      	movs	r5, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	e558      	b.n	8000388 <__aeabi_dadd+0x130>
 80008d6:	4460      	add	r0, ip
 80008d8:	4560      	cmp	r0, ip
 80008da:	4192      	sbcs	r2, r2
 80008dc:	4454      	add	r4, sl
 80008de:	4252      	negs	r2, r2
 80008e0:	0005      	movs	r5, r0
 80008e2:	18a4      	adds	r4, r4, r2
 80008e4:	e73a      	b.n	800075c <__aeabi_dadd+0x504>
 80008e6:	4653      	mov	r3, sl
 80008e8:	075a      	lsls	r2, r3, #29
 80008ea:	4663      	mov	r3, ip
 80008ec:	08d9      	lsrs	r1, r3, #3
 80008ee:	4653      	mov	r3, sl
 80008f0:	430a      	orrs	r2, r1
 80008f2:	08dc      	lsrs	r4, r3, #3
 80008f4:	e67e      	b.n	80005f4 <__aeabi_dadd+0x39c>
 80008f6:	001a      	movs	r2, r3
 80008f8:	001c      	movs	r4, r3
 80008fa:	432a      	orrs	r2, r5
 80008fc:	d000      	beq.n	8000900 <__aeabi_dadd+0x6a8>
 80008fe:	e6ab      	b.n	8000658 <__aeabi_dadd+0x400>
 8000900:	e6c1      	b.n	8000686 <__aeabi_dadd+0x42e>
 8000902:	2120      	movs	r1, #32
 8000904:	2500      	movs	r5, #0
 8000906:	1a09      	subs	r1, r1, r0
 8000908:	e519      	b.n	800033e <__aeabi_dadd+0xe6>
 800090a:	2200      	movs	r2, #0
 800090c:	2500      	movs	r5, #0
 800090e:	4c01      	ldr	r4, [pc, #4]	@ (8000914 <__aeabi_dadd+0x6bc>)
 8000910:	e53a      	b.n	8000388 <__aeabi_dadd+0x130>
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	000007ff 	.word	0x000007ff
 8000918:	ff7fffff 	.word	0xff7fffff
 800091c:	000007fe 	.word	0x000007fe

08000920 <__aeabi_dmul>:
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	4657      	mov	r7, sl
 8000924:	46de      	mov	lr, fp
 8000926:	464e      	mov	r6, r9
 8000928:	4645      	mov	r5, r8
 800092a:	b5e0      	push	{r5, r6, r7, lr}
 800092c:	001f      	movs	r7, r3
 800092e:	030b      	lsls	r3, r1, #12
 8000930:	0b1b      	lsrs	r3, r3, #12
 8000932:	0016      	movs	r6, r2
 8000934:	469a      	mov	sl, r3
 8000936:	0fca      	lsrs	r2, r1, #31
 8000938:	004b      	lsls	r3, r1, #1
 800093a:	0004      	movs	r4, r0
 800093c:	4693      	mov	fp, r2
 800093e:	b087      	sub	sp, #28
 8000940:	0d5b      	lsrs	r3, r3, #21
 8000942:	d100      	bne.n	8000946 <__aeabi_dmul+0x26>
 8000944:	e0d5      	b.n	8000af2 <__aeabi_dmul+0x1d2>
 8000946:	4abb      	ldr	r2, [pc, #748]	@ (8000c34 <__aeabi_dmul+0x314>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d100      	bne.n	800094e <__aeabi_dmul+0x2e>
 800094c:	e0f8      	b.n	8000b40 <__aeabi_dmul+0x220>
 800094e:	4651      	mov	r1, sl
 8000950:	0f42      	lsrs	r2, r0, #29
 8000952:	00c9      	lsls	r1, r1, #3
 8000954:	430a      	orrs	r2, r1
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	0409      	lsls	r1, r1, #16
 800095a:	4311      	orrs	r1, r2
 800095c:	00c2      	lsls	r2, r0, #3
 800095e:	4691      	mov	r9, r2
 8000960:	4ab5      	ldr	r2, [pc, #724]	@ (8000c38 <__aeabi_dmul+0x318>)
 8000962:	468a      	mov	sl, r1
 8000964:	189d      	adds	r5, r3, r2
 8000966:	2300      	movs	r3, #0
 8000968:	4698      	mov	r8, r3
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	033c      	lsls	r4, r7, #12
 800096e:	007b      	lsls	r3, r7, #1
 8000970:	0ffa      	lsrs	r2, r7, #31
 8000972:	0030      	movs	r0, r6
 8000974:	0b24      	lsrs	r4, r4, #12
 8000976:	0d5b      	lsrs	r3, r3, #21
 8000978:	9200      	str	r2, [sp, #0]
 800097a:	d100      	bne.n	800097e <__aeabi_dmul+0x5e>
 800097c:	e096      	b.n	8000aac <__aeabi_dmul+0x18c>
 800097e:	4aad      	ldr	r2, [pc, #692]	@ (8000c34 <__aeabi_dmul+0x314>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d031      	beq.n	80009e8 <__aeabi_dmul+0xc8>
 8000984:	0f72      	lsrs	r2, r6, #29
 8000986:	00e4      	lsls	r4, r4, #3
 8000988:	4322      	orrs	r2, r4
 800098a:	2480      	movs	r4, #128	@ 0x80
 800098c:	0424      	lsls	r4, r4, #16
 800098e:	4314      	orrs	r4, r2
 8000990:	4aa9      	ldr	r2, [pc, #676]	@ (8000c38 <__aeabi_dmul+0x318>)
 8000992:	00f0      	lsls	r0, r6, #3
 8000994:	4694      	mov	ip, r2
 8000996:	4463      	add	r3, ip
 8000998:	195b      	adds	r3, r3, r5
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	4642      	mov	r2, r8
 80009a0:	2600      	movs	r6, #0
 80009a2:	2a0a      	cmp	r2, #10
 80009a4:	dc42      	bgt.n	8000a2c <__aeabi_dmul+0x10c>
 80009a6:	465a      	mov	r2, fp
 80009a8:	9900      	ldr	r1, [sp, #0]
 80009aa:	404a      	eors	r2, r1
 80009ac:	4693      	mov	fp, r2
 80009ae:	4642      	mov	r2, r8
 80009b0:	2a02      	cmp	r2, #2
 80009b2:	dc32      	bgt.n	8000a1a <__aeabi_dmul+0xfa>
 80009b4:	3a01      	subs	r2, #1
 80009b6:	2a01      	cmp	r2, #1
 80009b8:	d900      	bls.n	80009bc <__aeabi_dmul+0x9c>
 80009ba:	e149      	b.n	8000c50 <__aeabi_dmul+0x330>
 80009bc:	2e02      	cmp	r6, #2
 80009be:	d100      	bne.n	80009c2 <__aeabi_dmul+0xa2>
 80009c0:	e0ca      	b.n	8000b58 <__aeabi_dmul+0x238>
 80009c2:	2e01      	cmp	r6, #1
 80009c4:	d13d      	bne.n	8000a42 <__aeabi_dmul+0x122>
 80009c6:	2300      	movs	r3, #0
 80009c8:	2400      	movs	r4, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	0010      	movs	r0, r2
 80009ce:	465a      	mov	r2, fp
 80009d0:	051b      	lsls	r3, r3, #20
 80009d2:	4323      	orrs	r3, r4
 80009d4:	07d2      	lsls	r2, r2, #31
 80009d6:	4313      	orrs	r3, r2
 80009d8:	0019      	movs	r1, r3
 80009da:	b007      	add	sp, #28
 80009dc:	bcf0      	pop	{r4, r5, r6, r7}
 80009de:	46bb      	mov	fp, r7
 80009e0:	46b2      	mov	sl, r6
 80009e2:	46a9      	mov	r9, r5
 80009e4:	46a0      	mov	r8, r4
 80009e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e8:	4b92      	ldr	r3, [pc, #584]	@ (8000c34 <__aeabi_dmul+0x314>)
 80009ea:	4326      	orrs	r6, r4
 80009ec:	18eb      	adds	r3, r5, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dmul+0xd4>
 80009f2:	e0bb      	b.n	8000b6c <__aeabi_dmul+0x24c>
 80009f4:	2203      	movs	r2, #3
 80009f6:	4641      	mov	r1, r8
 80009f8:	4311      	orrs	r1, r2
 80009fa:	465a      	mov	r2, fp
 80009fc:	4688      	mov	r8, r1
 80009fe:	9900      	ldr	r1, [sp, #0]
 8000a00:	404a      	eors	r2, r1
 8000a02:	2180      	movs	r1, #128	@ 0x80
 8000a04:	0109      	lsls	r1, r1, #4
 8000a06:	468c      	mov	ip, r1
 8000a08:	0029      	movs	r1, r5
 8000a0a:	4461      	add	r1, ip
 8000a0c:	9101      	str	r1, [sp, #4]
 8000a0e:	4641      	mov	r1, r8
 8000a10:	290a      	cmp	r1, #10
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_dmul+0xf6>
 8000a14:	e233      	b.n	8000e7e <__aeabi_dmul+0x55e>
 8000a16:	4693      	mov	fp, r2
 8000a18:	2603      	movs	r6, #3
 8000a1a:	4642      	mov	r2, r8
 8000a1c:	2701      	movs	r7, #1
 8000a1e:	4097      	lsls	r7, r2
 8000a20:	21a6      	movs	r1, #166	@ 0xa6
 8000a22:	003a      	movs	r2, r7
 8000a24:	00c9      	lsls	r1, r1, #3
 8000a26:	400a      	ands	r2, r1
 8000a28:	420f      	tst	r7, r1
 8000a2a:	d031      	beq.n	8000a90 <__aeabi_dmul+0x170>
 8000a2c:	9e02      	ldr	r6, [sp, #8]
 8000a2e:	2e02      	cmp	r6, #2
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dmul+0x114>
 8000a32:	e235      	b.n	8000ea0 <__aeabi_dmul+0x580>
 8000a34:	2e03      	cmp	r6, #3
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dmul+0x11a>
 8000a38:	e1d2      	b.n	8000de0 <__aeabi_dmul+0x4c0>
 8000a3a:	4654      	mov	r4, sl
 8000a3c:	4648      	mov	r0, r9
 8000a3e:	2e01      	cmp	r6, #1
 8000a40:	d0c1      	beq.n	80009c6 <__aeabi_dmul+0xa6>
 8000a42:	9a01      	ldr	r2, [sp, #4]
 8000a44:	4b7d      	ldr	r3, [pc, #500]	@ (8000c3c <__aeabi_dmul+0x31c>)
 8000a46:	4694      	mov	ip, r2
 8000a48:	4463      	add	r3, ip
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dc00      	bgt.n	8000a50 <__aeabi_dmul+0x130>
 8000a4e:	e0c0      	b.n	8000bd2 <__aeabi_dmul+0x2b2>
 8000a50:	0742      	lsls	r2, r0, #29
 8000a52:	d009      	beq.n	8000a68 <__aeabi_dmul+0x148>
 8000a54:	220f      	movs	r2, #15
 8000a56:	4002      	ands	r2, r0
 8000a58:	2a04      	cmp	r2, #4
 8000a5a:	d005      	beq.n	8000a68 <__aeabi_dmul+0x148>
 8000a5c:	1d02      	adds	r2, r0, #4
 8000a5e:	4282      	cmp	r2, r0
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	4240      	negs	r0, r0
 8000a64:	1824      	adds	r4, r4, r0
 8000a66:	0010      	movs	r0, r2
 8000a68:	01e2      	lsls	r2, r4, #7
 8000a6a:	d506      	bpl.n	8000a7a <__aeabi_dmul+0x15a>
 8000a6c:	4b74      	ldr	r3, [pc, #464]	@ (8000c40 <__aeabi_dmul+0x320>)
 8000a6e:	9a01      	ldr	r2, [sp, #4]
 8000a70:	401c      	ands	r4, r3
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	4694      	mov	ip, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4463      	add	r3, ip
 8000a7a:	4a72      	ldr	r2, [pc, #456]	@ (8000c44 <__aeabi_dmul+0x324>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	dc6b      	bgt.n	8000b58 <__aeabi_dmul+0x238>
 8000a80:	0762      	lsls	r2, r4, #29
 8000a82:	08c0      	lsrs	r0, r0, #3
 8000a84:	0264      	lsls	r4, r4, #9
 8000a86:	055b      	lsls	r3, r3, #21
 8000a88:	4302      	orrs	r2, r0
 8000a8a:	0b24      	lsrs	r4, r4, #12
 8000a8c:	0d5b      	lsrs	r3, r3, #21
 8000a8e:	e79d      	b.n	80009cc <__aeabi_dmul+0xac>
 8000a90:	2190      	movs	r1, #144	@ 0x90
 8000a92:	0089      	lsls	r1, r1, #2
 8000a94:	420f      	tst	r7, r1
 8000a96:	d163      	bne.n	8000b60 <__aeabi_dmul+0x240>
 8000a98:	2288      	movs	r2, #136	@ 0x88
 8000a9a:	423a      	tst	r2, r7
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dmul+0x180>
 8000a9e:	e0d7      	b.n	8000c50 <__aeabi_dmul+0x330>
 8000aa0:	9b00      	ldr	r3, [sp, #0]
 8000aa2:	46a2      	mov	sl, r4
 8000aa4:	469b      	mov	fp, r3
 8000aa6:	4681      	mov	r9, r0
 8000aa8:	9602      	str	r6, [sp, #8]
 8000aaa:	e7bf      	b.n	8000a2c <__aeabi_dmul+0x10c>
 8000aac:	0023      	movs	r3, r4
 8000aae:	4333      	orrs	r3, r6
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dmul+0x194>
 8000ab2:	e07f      	b.n	8000bb4 <__aeabi_dmul+0x294>
 8000ab4:	2c00      	cmp	r4, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dmul+0x19a>
 8000ab8:	e1ad      	b.n	8000e16 <__aeabi_dmul+0x4f6>
 8000aba:	0020      	movs	r0, r4
 8000abc:	f000 fa62 	bl	8000f84 <__clzsi2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	3a0b      	subs	r2, #11
 8000ac6:	201d      	movs	r0, #29
 8000ac8:	0019      	movs	r1, r3
 8000aca:	1a82      	subs	r2, r0, r2
 8000acc:	0030      	movs	r0, r6
 8000ace:	3908      	subs	r1, #8
 8000ad0:	40d0      	lsrs	r0, r2
 8000ad2:	408c      	lsls	r4, r1
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	0030      	movs	r0, r6
 8000ad8:	4088      	lsls	r0, r1
 8000ada:	4a5b      	ldr	r2, [pc, #364]	@ (8000c48 <__aeabi_dmul+0x328>)
 8000adc:	1aeb      	subs	r3, r5, r3
 8000ade:	4694      	mov	ip, r2
 8000ae0:	4463      	add	r3, ip
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	9201      	str	r2, [sp, #4]
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	2600      	movs	r6, #0
 8000aea:	2a0a      	cmp	r2, #10
 8000aec:	dc00      	bgt.n	8000af0 <__aeabi_dmul+0x1d0>
 8000aee:	e75a      	b.n	80009a6 <__aeabi_dmul+0x86>
 8000af0:	e79c      	b.n	8000a2c <__aeabi_dmul+0x10c>
 8000af2:	4653      	mov	r3, sl
 8000af4:	4303      	orrs	r3, r0
 8000af6:	4699      	mov	r9, r3
 8000af8:	d054      	beq.n	8000ba4 <__aeabi_dmul+0x284>
 8000afa:	4653      	mov	r3, sl
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dmul+0x1e2>
 8000b00:	e177      	b.n	8000df2 <__aeabi_dmul+0x4d2>
 8000b02:	4650      	mov	r0, sl
 8000b04:	f000 fa3e 	bl	8000f84 <__clzsi2>
 8000b08:	230b      	movs	r3, #11
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	469c      	mov	ip, r3
 8000b0e:	0002      	movs	r2, r0
 8000b10:	4484      	add	ip, r0
 8000b12:	0011      	movs	r1, r2
 8000b14:	4650      	mov	r0, sl
 8000b16:	3908      	subs	r1, #8
 8000b18:	4088      	lsls	r0, r1
 8000b1a:	231d      	movs	r3, #29
 8000b1c:	4680      	mov	r8, r0
 8000b1e:	4660      	mov	r0, ip
 8000b20:	1a1b      	subs	r3, r3, r0
 8000b22:	0020      	movs	r0, r4
 8000b24:	40d8      	lsrs	r0, r3
 8000b26:	0003      	movs	r3, r0
 8000b28:	4640      	mov	r0, r8
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	0023      	movs	r3, r4
 8000b30:	408b      	lsls	r3, r1
 8000b32:	4699      	mov	r9, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	4d44      	ldr	r5, [pc, #272]	@ (8000c48 <__aeabi_dmul+0x328>)
 8000b38:	4698      	mov	r8, r3
 8000b3a:	1aad      	subs	r5, r5, r2
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	e715      	b.n	800096c <__aeabi_dmul+0x4c>
 8000b40:	4652      	mov	r2, sl
 8000b42:	4302      	orrs	r2, r0
 8000b44:	4691      	mov	r9, r2
 8000b46:	d126      	bne.n	8000b96 <__aeabi_dmul+0x276>
 8000b48:	2200      	movs	r2, #0
 8000b4a:	001d      	movs	r5, r3
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	4692      	mov	sl, r2
 8000b50:	3208      	adds	r2, #8
 8000b52:	4690      	mov	r8, r2
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	e709      	b.n	800096c <__aeabi_dmul+0x4c>
 8000b58:	2400      	movs	r4, #0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <__aeabi_dmul+0x314>)
 8000b5e:	e735      	b.n	80009cc <__aeabi_dmul+0xac>
 8000b60:	2300      	movs	r3, #0
 8000b62:	2480      	movs	r4, #128	@ 0x80
 8000b64:	469b      	mov	fp, r3
 8000b66:	0324      	lsls	r4, r4, #12
 8000b68:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <__aeabi_dmul+0x314>)
 8000b6a:	e72f      	b.n	80009cc <__aeabi_dmul+0xac>
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	4641      	mov	r1, r8
 8000b70:	4311      	orrs	r1, r2
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	4694      	mov	ip, r2
 8000b78:	002a      	movs	r2, r5
 8000b7a:	4462      	add	r2, ip
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	9201      	str	r2, [sp, #4]
 8000b80:	290a      	cmp	r1, #10
 8000b82:	dd00      	ble.n	8000b86 <__aeabi_dmul+0x266>
 8000b84:	e752      	b.n	8000a2c <__aeabi_dmul+0x10c>
 8000b86:	465a      	mov	r2, fp
 8000b88:	2000      	movs	r0, #0
 8000b8a:	9900      	ldr	r1, [sp, #0]
 8000b8c:	0004      	movs	r4, r0
 8000b8e:	404a      	eors	r2, r1
 8000b90:	4693      	mov	fp, r2
 8000b92:	2602      	movs	r6, #2
 8000b94:	e70b      	b.n	80009ae <__aeabi_dmul+0x8e>
 8000b96:	220c      	movs	r2, #12
 8000b98:	001d      	movs	r5, r3
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	4681      	mov	r9, r0
 8000b9e:	4690      	mov	r8, r2
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	e6e3      	b.n	800096c <__aeabi_dmul+0x4c>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	3304      	adds	r3, #4
 8000baa:	4698      	mov	r8, r3
 8000bac:	3b03      	subs	r3, #3
 8000bae:	2500      	movs	r5, #0
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	e6db      	b.n	800096c <__aeabi_dmul+0x4c>
 8000bb4:	4642      	mov	r2, r8
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	002b      	movs	r3, r5
 8000bbc:	4690      	mov	r8, r2
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	9201      	str	r2, [sp, #4]
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	2400      	movs	r4, #0
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	2601      	movs	r6, #1
 8000bca:	2a0a      	cmp	r2, #10
 8000bcc:	dc00      	bgt.n	8000bd0 <__aeabi_dmul+0x2b0>
 8000bce:	e6ea      	b.n	80009a6 <__aeabi_dmul+0x86>
 8000bd0:	e72c      	b.n	8000a2c <__aeabi_dmul+0x10c>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	1ad2      	subs	r2, r2, r3
 8000bd6:	2a38      	cmp	r2, #56	@ 0x38
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dmul+0x2bc>
 8000bda:	e6f4      	b.n	80009c6 <__aeabi_dmul+0xa6>
 8000bdc:	2a1f      	cmp	r2, #31
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_dmul+0x2c2>
 8000be0:	e12a      	b.n	8000e38 <__aeabi_dmul+0x518>
 8000be2:	211f      	movs	r1, #31
 8000be4:	4249      	negs	r1, r1
 8000be6:	1acb      	subs	r3, r1, r3
 8000be8:	0021      	movs	r1, r4
 8000bea:	40d9      	lsrs	r1, r3
 8000bec:	000b      	movs	r3, r1
 8000bee:	2a20      	cmp	r2, #32
 8000bf0:	d005      	beq.n	8000bfe <__aeabi_dmul+0x2de>
 8000bf2:	4a16      	ldr	r2, [pc, #88]	@ (8000c4c <__aeabi_dmul+0x32c>)
 8000bf4:	9d01      	ldr	r5, [sp, #4]
 8000bf6:	4694      	mov	ip, r2
 8000bf8:	4465      	add	r5, ip
 8000bfa:	40ac      	lsls	r4, r5
 8000bfc:	4320      	orrs	r0, r4
 8000bfe:	1e42      	subs	r2, r0, #1
 8000c00:	4190      	sbcs	r0, r2
 8000c02:	4318      	orrs	r0, r3
 8000c04:	2307      	movs	r3, #7
 8000c06:	0019      	movs	r1, r3
 8000c08:	2400      	movs	r4, #0
 8000c0a:	4001      	ands	r1, r0
 8000c0c:	4203      	tst	r3, r0
 8000c0e:	d00c      	beq.n	8000c2a <__aeabi_dmul+0x30a>
 8000c10:	230f      	movs	r3, #15
 8000c12:	4003      	ands	r3, r0
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dmul+0x2fa>
 8000c18:	e140      	b.n	8000e9c <__aeabi_dmul+0x57c>
 8000c1a:	1d03      	adds	r3, r0, #4
 8000c1c:	4283      	cmp	r3, r0
 8000c1e:	41a4      	sbcs	r4, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	4264      	negs	r4, r4
 8000c24:	0761      	lsls	r1, r4, #29
 8000c26:	0264      	lsls	r4, r4, #9
 8000c28:	0b24      	lsrs	r4, r4, #12
 8000c2a:	08c2      	lsrs	r2, r0, #3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	e6cc      	b.n	80009cc <__aeabi_dmul+0xac>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	000007ff 	.word	0x000007ff
 8000c38:	fffffc01 	.word	0xfffffc01
 8000c3c:	000003ff 	.word	0x000003ff
 8000c40:	feffffff 	.word	0xfeffffff
 8000c44:	000007fe 	.word	0x000007fe
 8000c48:	fffffc0d 	.word	0xfffffc0d
 8000c4c:	0000043e 	.word	0x0000043e
 8000c50:	4649      	mov	r1, r9
 8000c52:	464a      	mov	r2, r9
 8000c54:	0409      	lsls	r1, r1, #16
 8000c56:	0c09      	lsrs	r1, r1, #16
 8000c58:	000d      	movs	r5, r1
 8000c5a:	0c16      	lsrs	r6, r2, #16
 8000c5c:	0c02      	lsrs	r2, r0, #16
 8000c5e:	0400      	lsls	r0, r0, #16
 8000c60:	0c00      	lsrs	r0, r0, #16
 8000c62:	4345      	muls	r5, r0
 8000c64:	46ac      	mov	ip, r5
 8000c66:	0005      	movs	r5, r0
 8000c68:	4375      	muls	r5, r6
 8000c6a:	46a8      	mov	r8, r5
 8000c6c:	0015      	movs	r5, r2
 8000c6e:	000f      	movs	r7, r1
 8000c70:	4375      	muls	r5, r6
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	9502      	str	r5, [sp, #8]
 8000c76:	002a      	movs	r2, r5
 8000c78:	9d00      	ldr	r5, [sp, #0]
 8000c7a:	436f      	muls	r7, r5
 8000c7c:	4665      	mov	r5, ip
 8000c7e:	0c2d      	lsrs	r5, r5, #16
 8000c80:	46a9      	mov	r9, r5
 8000c82:	4447      	add	r7, r8
 8000c84:	444f      	add	r7, r9
 8000c86:	45b8      	cmp	r8, r7
 8000c88:	d905      	bls.n	8000c96 <__aeabi_dmul+0x376>
 8000c8a:	0015      	movs	r5, r2
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	0252      	lsls	r2, r2, #9
 8000c90:	4690      	mov	r8, r2
 8000c92:	4445      	add	r5, r8
 8000c94:	9502      	str	r5, [sp, #8]
 8000c96:	0c3d      	lsrs	r5, r7, #16
 8000c98:	9503      	str	r5, [sp, #12]
 8000c9a:	4665      	mov	r5, ip
 8000c9c:	042d      	lsls	r5, r5, #16
 8000c9e:	043f      	lsls	r7, r7, #16
 8000ca0:	0c2d      	lsrs	r5, r5, #16
 8000ca2:	46ac      	mov	ip, r5
 8000ca4:	003d      	movs	r5, r7
 8000ca6:	4465      	add	r5, ip
 8000ca8:	9504      	str	r5, [sp, #16]
 8000caa:	0c25      	lsrs	r5, r4, #16
 8000cac:	0424      	lsls	r4, r4, #16
 8000cae:	0c24      	lsrs	r4, r4, #16
 8000cb0:	46ac      	mov	ip, r5
 8000cb2:	0025      	movs	r5, r4
 8000cb4:	4375      	muls	r5, r6
 8000cb6:	46a8      	mov	r8, r5
 8000cb8:	4665      	mov	r5, ip
 8000cba:	000f      	movs	r7, r1
 8000cbc:	4369      	muls	r1, r5
 8000cbe:	4441      	add	r1, r8
 8000cc0:	4689      	mov	r9, r1
 8000cc2:	4367      	muls	r7, r4
 8000cc4:	0c39      	lsrs	r1, r7, #16
 8000cc6:	4449      	add	r1, r9
 8000cc8:	436e      	muls	r6, r5
 8000cca:	4588      	cmp	r8, r1
 8000ccc:	d903      	bls.n	8000cd6 <__aeabi_dmul+0x3b6>
 8000cce:	2280      	movs	r2, #128	@ 0x80
 8000cd0:	0252      	lsls	r2, r2, #9
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	4446      	add	r6, r8
 8000cd6:	0c0d      	lsrs	r5, r1, #16
 8000cd8:	46a8      	mov	r8, r5
 8000cda:	0035      	movs	r5, r6
 8000cdc:	4445      	add	r5, r8
 8000cde:	9505      	str	r5, [sp, #20]
 8000ce0:	9d03      	ldr	r5, [sp, #12]
 8000ce2:	043f      	lsls	r7, r7, #16
 8000ce4:	46a8      	mov	r8, r5
 8000ce6:	0c3f      	lsrs	r7, r7, #16
 8000ce8:	0409      	lsls	r1, r1, #16
 8000cea:	19c9      	adds	r1, r1, r7
 8000cec:	4488      	add	r8, r1
 8000cee:	4645      	mov	r5, r8
 8000cf0:	9503      	str	r5, [sp, #12]
 8000cf2:	4655      	mov	r5, sl
 8000cf4:	042e      	lsls	r6, r5, #16
 8000cf6:	0c36      	lsrs	r6, r6, #16
 8000cf8:	0c2f      	lsrs	r7, r5, #16
 8000cfa:	0035      	movs	r5, r6
 8000cfc:	4345      	muls	r5, r0
 8000cfe:	4378      	muls	r0, r7
 8000d00:	4681      	mov	r9, r0
 8000d02:	0038      	movs	r0, r7
 8000d04:	46a8      	mov	r8, r5
 8000d06:	0c2d      	lsrs	r5, r5, #16
 8000d08:	46aa      	mov	sl, r5
 8000d0a:	9a00      	ldr	r2, [sp, #0]
 8000d0c:	4350      	muls	r0, r2
 8000d0e:	4372      	muls	r2, r6
 8000d10:	444a      	add	r2, r9
 8000d12:	4452      	add	r2, sl
 8000d14:	4591      	cmp	r9, r2
 8000d16:	d903      	bls.n	8000d20 <__aeabi_dmul+0x400>
 8000d18:	2580      	movs	r5, #128	@ 0x80
 8000d1a:	026d      	lsls	r5, r5, #9
 8000d1c:	46a9      	mov	r9, r5
 8000d1e:	4448      	add	r0, r9
 8000d20:	0c15      	lsrs	r5, r2, #16
 8000d22:	46a9      	mov	r9, r5
 8000d24:	4645      	mov	r5, r8
 8000d26:	042d      	lsls	r5, r5, #16
 8000d28:	0c2d      	lsrs	r5, r5, #16
 8000d2a:	46a8      	mov	r8, r5
 8000d2c:	4665      	mov	r5, ip
 8000d2e:	437d      	muls	r5, r7
 8000d30:	0412      	lsls	r2, r2, #16
 8000d32:	4448      	add	r0, r9
 8000d34:	4490      	add	r8, r2
 8000d36:	46a9      	mov	r9, r5
 8000d38:	0032      	movs	r2, r6
 8000d3a:	4665      	mov	r5, ip
 8000d3c:	4362      	muls	r2, r4
 8000d3e:	436e      	muls	r6, r5
 8000d40:	437c      	muls	r4, r7
 8000d42:	0c17      	lsrs	r7, r2, #16
 8000d44:	1936      	adds	r6, r6, r4
 8000d46:	19bf      	adds	r7, r7, r6
 8000d48:	42bc      	cmp	r4, r7
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_dmul+0x434>
 8000d4c:	2480      	movs	r4, #128	@ 0x80
 8000d4e:	0264      	lsls	r4, r4, #9
 8000d50:	46a4      	mov	ip, r4
 8000d52:	44e1      	add	r9, ip
 8000d54:	9c02      	ldr	r4, [sp, #8]
 8000d56:	9e03      	ldr	r6, [sp, #12]
 8000d58:	46a4      	mov	ip, r4
 8000d5a:	9d05      	ldr	r5, [sp, #20]
 8000d5c:	4466      	add	r6, ip
 8000d5e:	428e      	cmp	r6, r1
 8000d60:	4189      	sbcs	r1, r1
 8000d62:	46ac      	mov	ip, r5
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	043c      	lsls	r4, r7, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	18a2      	adds	r2, r4, r2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	4249      	negs	r1, r1
 8000d70:	1854      	adds	r4, r2, r1
 8000d72:	4446      	add	r6, r8
 8000d74:	46a4      	mov	ip, r4
 8000d76:	4546      	cmp	r6, r8
 8000d78:	41a4      	sbcs	r4, r4
 8000d7a:	4682      	mov	sl, r0
 8000d7c:	4264      	negs	r4, r4
 8000d7e:	46a0      	mov	r8, r4
 8000d80:	42aa      	cmp	r2, r5
 8000d82:	4192      	sbcs	r2, r2
 8000d84:	458c      	cmp	ip, r1
 8000d86:	4189      	sbcs	r1, r1
 8000d88:	44e2      	add	sl, ip
 8000d8a:	44d0      	add	r8, sl
 8000d8c:	4249      	negs	r1, r1
 8000d8e:	4252      	negs	r2, r2
 8000d90:	430a      	orrs	r2, r1
 8000d92:	45a0      	cmp	r8, r4
 8000d94:	41a4      	sbcs	r4, r4
 8000d96:	4582      	cmp	sl, r0
 8000d98:	4189      	sbcs	r1, r1
 8000d9a:	4264      	negs	r4, r4
 8000d9c:	4249      	negs	r1, r1
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	4641      	mov	r1, r8
 8000da2:	0c3f      	lsrs	r7, r7, #16
 8000da4:	19d2      	adds	r2, r2, r7
 8000da6:	1912      	adds	r2, r2, r4
 8000da8:	0dcc      	lsrs	r4, r1, #23
 8000daa:	9904      	ldr	r1, [sp, #16]
 8000dac:	0270      	lsls	r0, r6, #9
 8000dae:	4308      	orrs	r0, r1
 8000db0:	1e41      	subs	r1, r0, #1
 8000db2:	4188      	sbcs	r0, r1
 8000db4:	4641      	mov	r1, r8
 8000db6:	444a      	add	r2, r9
 8000db8:	0df6      	lsrs	r6, r6, #23
 8000dba:	0252      	lsls	r2, r2, #9
 8000dbc:	4330      	orrs	r0, r6
 8000dbe:	0249      	lsls	r1, r1, #9
 8000dc0:	4314      	orrs	r4, r2
 8000dc2:	4308      	orrs	r0, r1
 8000dc4:	01d2      	lsls	r2, r2, #7
 8000dc6:	d535      	bpl.n	8000e34 <__aeabi_dmul+0x514>
 8000dc8:	2201      	movs	r2, #1
 8000dca:	0843      	lsrs	r3, r0, #1
 8000dcc:	4002      	ands	r2, r0
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	07e0      	lsls	r0, r4, #31
 8000dd2:	4318      	orrs	r0, r3
 8000dd4:	0864      	lsrs	r4, r4, #1
 8000dd6:	e634      	b.n	8000a42 <__aeabi_dmul+0x122>
 8000dd8:	9b00      	ldr	r3, [sp, #0]
 8000dda:	46a2      	mov	sl, r4
 8000ddc:	469b      	mov	fp, r3
 8000dde:	4681      	mov	r9, r0
 8000de0:	2480      	movs	r4, #128	@ 0x80
 8000de2:	4653      	mov	r3, sl
 8000de4:	0324      	lsls	r4, r4, #12
 8000de6:	431c      	orrs	r4, r3
 8000de8:	0324      	lsls	r4, r4, #12
 8000dea:	464a      	mov	r2, r9
 8000dec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <__aeabi_dmul+0x588>)
 8000dee:	0b24      	lsrs	r4, r4, #12
 8000df0:	e5ec      	b.n	80009cc <__aeabi_dmul+0xac>
 8000df2:	f000 f8c7 	bl	8000f84 <__clzsi2>
 8000df6:	2315      	movs	r3, #21
 8000df8:	469c      	mov	ip, r3
 8000dfa:	4484      	add	ip, r0
 8000dfc:	0002      	movs	r2, r0
 8000dfe:	4663      	mov	r3, ip
 8000e00:	3220      	adds	r2, #32
 8000e02:	2b1c      	cmp	r3, #28
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_dmul+0x4e8>
 8000e06:	e684      	b.n	8000b12 <__aeabi_dmul+0x1f2>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	0023      	movs	r3, r4
 8000e0e:	3808      	subs	r0, #8
 8000e10:	4083      	lsls	r3, r0
 8000e12:	469a      	mov	sl, r3
 8000e14:	e68e      	b.n	8000b34 <__aeabi_dmul+0x214>
 8000e16:	f000 f8b5 	bl	8000f84 <__clzsi2>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	3215      	adds	r2, #21
 8000e20:	3320      	adds	r3, #32
 8000e22:	2a1c      	cmp	r2, #28
 8000e24:	dc00      	bgt.n	8000e28 <__aeabi_dmul+0x508>
 8000e26:	e64e      	b.n	8000ac6 <__aeabi_dmul+0x1a6>
 8000e28:	0002      	movs	r2, r0
 8000e2a:	0034      	movs	r4, r6
 8000e2c:	3a08      	subs	r2, #8
 8000e2e:	2000      	movs	r0, #0
 8000e30:	4094      	lsls	r4, r2
 8000e32:	e652      	b.n	8000ada <__aeabi_dmul+0x1ba>
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	e604      	b.n	8000a42 <__aeabi_dmul+0x122>
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <__aeabi_dmul+0x58c>)
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	469c      	mov	ip, r3
 8000e3e:	0003      	movs	r3, r0
 8000e40:	9d01      	ldr	r5, [sp, #4]
 8000e42:	40d3      	lsrs	r3, r2
 8000e44:	4465      	add	r5, ip
 8000e46:	40a9      	lsls	r1, r5
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	40ab      	lsls	r3, r5
 8000e4e:	1e58      	subs	r0, r3, #1
 8000e50:	4183      	sbcs	r3, r0
 8000e52:	4319      	orrs	r1, r3
 8000e54:	0008      	movs	r0, r1
 8000e56:	40d4      	lsrs	r4, r2
 8000e58:	074b      	lsls	r3, r1, #29
 8000e5a:	d009      	beq.n	8000e70 <__aeabi_dmul+0x550>
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	400b      	ands	r3, r1
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d005      	beq.n	8000e70 <__aeabi_dmul+0x550>
 8000e64:	1d0b      	adds	r3, r1, #4
 8000e66:	428b      	cmp	r3, r1
 8000e68:	4180      	sbcs	r0, r0
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	1824      	adds	r4, r4, r0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	0223      	lsls	r3, r4, #8
 8000e72:	d400      	bmi.n	8000e76 <__aeabi_dmul+0x556>
 8000e74:	e6d6      	b.n	8000c24 <__aeabi_dmul+0x304>
 8000e76:	2301      	movs	r3, #1
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	e5a6      	b.n	80009cc <__aeabi_dmul+0xac>
 8000e7e:	290f      	cmp	r1, #15
 8000e80:	d1aa      	bne.n	8000dd8 <__aeabi_dmul+0x4b8>
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	4652      	mov	r2, sl
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	421a      	tst	r2, r3
 8000e8a:	d0a9      	beq.n	8000de0 <__aeabi_dmul+0x4c0>
 8000e8c:	421c      	tst	r4, r3
 8000e8e:	d1a7      	bne.n	8000de0 <__aeabi_dmul+0x4c0>
 8000e90:	431c      	orrs	r4, r3
 8000e92:	9b00      	ldr	r3, [sp, #0]
 8000e94:	0002      	movs	r2, r0
 8000e96:	469b      	mov	fp, r3
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <__aeabi_dmul+0x588>)
 8000e9a:	e597      	b.n	80009cc <__aeabi_dmul+0xac>
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	e6c1      	b.n	8000c24 <__aeabi_dmul+0x304>
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	4b01      	ldr	r3, [pc, #4]	@ (8000ea8 <__aeabi_dmul+0x588>)
 8000ea4:	0022      	movs	r2, r4
 8000ea6:	e591      	b.n	80009cc <__aeabi_dmul+0xac>
 8000ea8:	000007ff 	.word	0x000007ff
 8000eac:	0000041e 	.word	0x0000041e

08000eb0 <__aeabi_d2iz>:
 8000eb0:	000b      	movs	r3, r1
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	4d16      	ldr	r5, [pc, #88]	@ (8000f10 <__aeabi_d2iz+0x60>)
 8000eb8:	030c      	lsls	r4, r1, #12
 8000eba:	b082      	sub	sp, #8
 8000ebc:	0049      	lsls	r1, r1, #1
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	0b24      	lsrs	r4, r4, #12
 8000ec6:	0d49      	lsrs	r1, r1, #21
 8000ec8:	0fde      	lsrs	r6, r3, #31
 8000eca:	42a9      	cmp	r1, r5
 8000ecc:	dd04      	ble.n	8000ed8 <__aeabi_d2iz+0x28>
 8000ece:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <__aeabi_d2iz+0x64>)
 8000ed0:	4281      	cmp	r1, r0
 8000ed2:	dd03      	ble.n	8000edc <__aeabi_d2iz+0x2c>
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <__aeabi_d2iz+0x68>)
 8000ed6:	18f0      	adds	r0, r6, r3
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
 8000edc:	2080      	movs	r0, #128	@ 0x80
 8000ede:	0340      	lsls	r0, r0, #13
 8000ee0:	4320      	orrs	r0, r4
 8000ee2:	4c0e      	ldr	r4, [pc, #56]	@ (8000f1c <__aeabi_d2iz+0x6c>)
 8000ee4:	1a64      	subs	r4, r4, r1
 8000ee6:	2c1f      	cmp	r4, #31
 8000ee8:	dd08      	ble.n	8000efc <__aeabi_d2iz+0x4c>
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <__aeabi_d2iz+0x70>)
 8000eec:	1a5b      	subs	r3, r3, r1
 8000eee:	40d8      	lsrs	r0, r3
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	4258      	negs	r0, r3
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d1ef      	bne.n	8000ed8 <__aeabi_d2iz+0x28>
 8000ef8:	0018      	movs	r0, r3
 8000efa:	e7ed      	b.n	8000ed8 <__aeabi_d2iz+0x28>
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <__aeabi_d2iz+0x74>)
 8000efe:	9a00      	ldr	r2, [sp, #0]
 8000f00:	469c      	mov	ip, r3
 8000f02:	0003      	movs	r3, r0
 8000f04:	4461      	add	r1, ip
 8000f06:	408b      	lsls	r3, r1
 8000f08:	40e2      	lsrs	r2, r4
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	e7f1      	b.n	8000ef2 <__aeabi_d2iz+0x42>
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	000003fe 	.word	0x000003fe
 8000f14:	0000041d 	.word	0x0000041d
 8000f18:	7fffffff 	.word	0x7fffffff
 8000f1c:	00000433 	.word	0x00000433
 8000f20:	00000413 	.word	0x00000413
 8000f24:	fffffbed 	.word	0xfffffbed

08000f28 <__aeabi_i2d>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d016      	beq.n	8000f5c <__aeabi_i2d+0x34>
 8000f2e:	17c3      	asrs	r3, r0, #31
 8000f30:	18c5      	adds	r5, r0, r3
 8000f32:	405d      	eors	r5, r3
 8000f34:	0fc4      	lsrs	r4, r0, #31
 8000f36:	0028      	movs	r0, r5
 8000f38:	f000 f824 	bl	8000f84 <__clzsi2>
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <__aeabi_i2d+0x58>)
 8000f3e:	1a1b      	subs	r3, r3, r0
 8000f40:	055b      	lsls	r3, r3, #21
 8000f42:	0d5b      	lsrs	r3, r3, #21
 8000f44:	280a      	cmp	r0, #10
 8000f46:	dc14      	bgt.n	8000f72 <__aeabi_i2d+0x4a>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	002e      	movs	r6, r5
 8000f4c:	3215      	adds	r2, #21
 8000f4e:	4096      	lsls	r6, r2
 8000f50:	220b      	movs	r2, #11
 8000f52:	1a12      	subs	r2, r2, r0
 8000f54:	40d5      	lsrs	r5, r2
 8000f56:	032d      	lsls	r5, r5, #12
 8000f58:	0b2d      	lsrs	r5, r5, #12
 8000f5a:	e003      	b.n	8000f64 <__aeabi_i2d+0x3c>
 8000f5c:	2400      	movs	r4, #0
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2500      	movs	r5, #0
 8000f62:	2600      	movs	r6, #0
 8000f64:	051b      	lsls	r3, r3, #20
 8000f66:	432b      	orrs	r3, r5
 8000f68:	07e4      	lsls	r4, r4, #31
 8000f6a:	4323      	orrs	r3, r4
 8000f6c:	0030      	movs	r0, r6
 8000f6e:	0019      	movs	r1, r3
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	380b      	subs	r0, #11
 8000f74:	4085      	lsls	r5, r0
 8000f76:	032d      	lsls	r5, r5, #12
 8000f78:	2600      	movs	r6, #0
 8000f7a:	0b2d      	lsrs	r5, r5, #12
 8000f7c:	e7f2      	b.n	8000f64 <__aeabi_i2d+0x3c>
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	0000041e 	.word	0x0000041e

08000f84 <__clzsi2>:
 8000f84:	211c      	movs	r1, #28
 8000f86:	2301      	movs	r3, #1
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	4298      	cmp	r0, r3
 8000f8c:	d301      	bcc.n	8000f92 <__clzsi2+0xe>
 8000f8e:	0c00      	lsrs	r0, r0, #16
 8000f90:	3910      	subs	r1, #16
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	4298      	cmp	r0, r3
 8000f96:	d301      	bcc.n	8000f9c <__clzsi2+0x18>
 8000f98:	0a00      	lsrs	r0, r0, #8
 8000f9a:	3908      	subs	r1, #8
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d301      	bcc.n	8000fa6 <__clzsi2+0x22>
 8000fa2:	0900      	lsrs	r0, r0, #4
 8000fa4:	3904      	subs	r1, #4
 8000fa6:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb0 <__clzsi2+0x2c>)
 8000fa8:	5c10      	ldrb	r0, [r2, r0]
 8000faa:	1840      	adds	r0, r0, r1
 8000fac:	4770      	bx	lr
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	02020304 	.word	0x02020304
 8000fb4:	01010101 	.word	0x01010101
	...

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc2:	2510      	movs	r5, #16
{
 8000fc4:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	222c      	movs	r2, #44	@ 0x2c
 8000fc8:	2100      	movs	r1, #0
 8000fca:	a809      	add	r0, sp, #36	@ 0x24
 8000fcc:	f001 fc1a 	bl	8002804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	002a      	movs	r2, r5
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4668      	mov	r0, sp
 8000fd6:	f001 fc15 	bl	8002804 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fda:	2100      	movs	r1, #0
 8000fdc:	002a      	movs	r2, r5
 8000fde:	a804      	add	r0, sp, #16
 8000fe0:	f001 fc10 	bl	8002804 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000fe6:	2312      	movs	r3, #18
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000fea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000fee:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff0:	950c      	str	r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000ff2:	950e      	str	r5, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f000 fe48 	bl	8001c88 <HAL_RCC_OscConfig>
 8000ff8:	1e01      	subs	r1, r0, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001002:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001006:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001008:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100c:	f001 f860 	bl	80020d0 <HAL_RCC_ClockConfig>
 8001010:	2800      	cmp	r0, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x58>
 8001014:	b672      	cpsid	i
  while (1)
 8001016:	e7fe      	b.n	8001016 <SystemClock_Config+0x56>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001018:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800101c:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101e:	f001 f8eb 	bl	80021f8 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	2800      	cmp	r0, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x6a>
 8001026:	b672      	cpsid	i
  while (1)
 8001028:	e7fe      	b.n	8001028 <SystemClock_Config+0x68>
}
 800102a:	b015      	add	sp, #84	@ 0x54
 800102c:	bd30      	pop	{r4, r5, pc}
	...

08001030 <main>:
{
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	b09f      	sub	sp, #124	@ 0x7c
  HAL_Init();
 8001034:	f000 fa20 	bl	8001478 <HAL_Init>
  SystemClock_Config();
 8001038:	f7ff ffc2 	bl	8000fc0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	2210      	movs	r2, #16
 800103e:	2100      	movs	r1, #0
 8001040:	a80f      	add	r0, sp, #60	@ 0x3c
 8001042:	f001 fbdf 	bl	8002804 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001046:	2180      	movs	r1, #128	@ 0x80
 8001048:	4b7c      	ldr	r3, [pc, #496]	@ (800123c <main+0x20c>)
 800104a:	03c9      	lsls	r1, r1, #15
 800104c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	487c      	ldr	r0, [pc, #496]	@ (8001240 <main+0x210>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001050:	430a      	orrs	r2, r1
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	695a      	ldr	r2, [r3, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001056:	240c      	movs	r4, #12
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001058:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800105e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	0289      	lsls	r1, r1, #10
 8001064:	430a      	orrs	r2, r1
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	920c      	str	r2, [sp, #48]	@ 0x30
 8001070:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	02c9      	lsls	r1, r1, #11
 8001076:	430a      	orrs	r2, r1
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	400b      	ands	r3, r1
 800107e:	930d      	str	r3, [sp, #52]	@ 0x34
 8001080:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001082:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001086:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f000 fd46 	bl	8001b18 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800108c:	486d      	ldr	r0, [pc, #436]	@ (8001244 <main+0x214>)
 800108e:	4b6e      	ldr	r3, [pc, #440]	@ (8001248 <main+0x218>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001090:	6144      	str	r4, [r0, #20]
  huart1.Instance = USART1;
 8001092:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001094:	23e1      	movs	r3, #225	@ 0xe1
 8001096:	025b      	lsls	r3, r3, #9
 8001098:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	2300      	movs	r3, #0
 800109c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800109e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a0:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010aa:	f001 fb59 	bl	8002760 <HAL_UART_Init>
 80010ae:	1e05      	subs	r5, r0, #0
 80010b0:	d001      	beq.n	80010b6 <main+0x86>
 80010b2:	b672      	cpsid	i
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x84>
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	0022      	movs	r2, r4
 80010b8:	0001      	movs	r1, r0
 80010ba:	a80e      	add	r0, sp, #56	@ 0x38
 80010bc:	f001 fba2 	bl	8002804 <memset>
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c0:	2204      	movs	r2, #4
  hadc.Instance = ADC1;
 80010c2:	4c62      	ldr	r4, [pc, #392]	@ (800124c <main+0x21c>)
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010c4:	2301      	movs	r3, #1
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c6:	6162      	str	r2, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c8:	22c2      	movs	r2, #194	@ 0xc2
  hadc.Instance = ADC1;
 80010ca:	4e61      	ldr	r6, [pc, #388]	@ (8001250 <main+0x220>)
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010cc:	32ff      	adds	r2, #255	@ 0xff
 80010ce:	61e2      	str	r2, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010d0:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010d2:	1d62      	adds	r2, r4, #5
  hadc.Instance = ADC1;
 80010d4:	6026      	str	r6, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010d6:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010d8:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010da:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010dc:	6123      	str	r3, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010de:	61a5      	str	r5, [r4, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e0:	6225      	str	r5, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010e2:	77d5      	strb	r5, [r2, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e4:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010e6:	f000 faa3 	bl	8001630 <HAL_ADC_Init>
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d001      	beq.n	80010f2 <main+0xc2>
 80010ee:	b672      	cpsid	i
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <main+0xc0>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010f8:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010fc:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010fe:	0020      	movs	r0, r4
 8001100:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001102:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001104:	f000 fbe8 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8001108:	2800      	cmp	r0, #0
 800110a:	d001      	beq.n	8001110 <main+0xe0>
 800110c:	b672      	cpsid	i
  while (1)
 800110e:	e7fe      	b.n	800110e <main+0xde>
  sConfig.Channel = ADC_CHANNEL_7;
 8001110:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001112:	0020      	movs	r0, r4
 8001114:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_7;
 8001116:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001118:	f000 fbde 	bl	80018d8 <HAL_ADC_ConfigChannel>
 800111c:	2800      	cmp	r0, #0
 800111e:	d001      	beq.n	8001124 <main+0xf4>
 8001120:	b672      	cpsid	i
  while (1)
 8001122:	e7fe      	b.n	8001122 <main+0xf2>
  sConfig.Channel = ADC_CHANNEL_9;
 8001124:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001126:	0020      	movs	r0, r4
 8001128:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 800112a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800112c:	f000 fbd4 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8001130:	1e05      	subs	r5, r0, #0
 8001132:	d001      	beq.n	8001138 <main+0x108>
 8001134:	b672      	cpsid	i
  while (1)
 8001136:	e7fe      	b.n	8001136 <main+0x106>
  HAL_ADCEx_Calibration_Start(&hadc);
 8001138:	0020      	movs	r0, r4
 800113a:	f000 fc51 	bl	80019e0 <HAL_ADCEx_Calibration_Start>
  double avg_c = 0.0;
 800113e:	2400      	movs	r4, #0
 8001140:	2300      	movs	r3, #0
 8001142:	9304      	str	r3, [sp, #16]
 8001144:	9405      	str	r4, [sp, #20]
	  ADC1->CHSELR = ADC_CHSELR_CHSEL7;
 8001146:	2780      	movs	r7, #128	@ 0x80
	  HAL_ADC_Start(&hadc);
 8001148:	4c40      	ldr	r4, [pc, #256]	@ (800124c <main+0x21c>)
	  ADC1->CHSELR = ADC_CHSELR_CHSEL7;
 800114a:	62b7      	str	r7, [r6, #40]	@ 0x28
	  HAL_ADC_Start(&hadc);
 800114c:	0020      	movs	r0, r4
 800114e:	f000 fb11 	bl	8001774 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 8001152:	21fa      	movs	r1, #250	@ 0xfa
 8001154:	0020      	movs	r0, r4
 8001156:	0089      	lsls	r1, r1, #2
 8001158:	f000 fb56 	bl	8001808 <HAL_ADC_PollForConversion>
	  raw_c = HAL_ADC_GetValue(&hadc);
 800115c:	0020      	movs	r0, r4
 800115e:	f000 fbb7 	bl	80018d0 <HAL_ADC_GetValue>
 8001162:	9007      	str	r0, [sp, #28]
	  HAL_ADC_Stop(&hadc);
 8001164:	0020      	movs	r0, r4
 8001166:	f000 fb31 	bl	80017cc <HAL_ADC_Stop>
	  ADC1->CHSELR = ADC_CHSELR_CHSEL9;
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	62b3      	str	r3, [r6, #40]	@ 0x28
	  HAL_ADC_Start(&hadc);
 8001170:	0020      	movs	r0, r4
 8001172:	f000 faff 	bl	8001774 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 8001176:	21fa      	movs	r1, #250	@ 0xfa
 8001178:	0020      	movs	r0, r4
 800117a:	0089      	lsls	r1, r1, #2
 800117c:	f000 fb44 	bl	8001808 <HAL_ADC_PollForConversion>
	  raw_v = HAL_ADC_GetValue(&hadc);
 8001180:	0020      	movs	r0, r4
 8001182:	f000 fba5 	bl	80018d0 <HAL_ADC_GetValue>
	  HAL_ADC_Stop(&hadc);
 8001186:	0020      	movs	r0, r4
 8001188:	f000 fb20 	bl	80017cc <HAL_ADC_Stop>
	  ADC1->CHSELR = ADC_CHSELR_CHSEL0;
 800118c:	2301      	movs	r3, #1
	  HAL_ADC_Start(&hadc);
 800118e:	0020      	movs	r0, r4
	  ADC1->CHSELR = ADC_CHSELR_CHSEL0;
 8001190:	62b3      	str	r3, [r6, #40]	@ 0x28
	  HAL_ADC_Start(&hadc);
 8001192:	f000 faef 	bl	8001774 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 10);
 8001196:	210a      	movs	r1, #10
 8001198:	0020      	movs	r0, r4
 800119a:	f000 fb35 	bl	8001808 <HAL_ADC_PollForConversion>
	  DutyCycle = HAL_ADC_GetValue(&hadc);
 800119e:	0020      	movs	r0, r4
 80011a0:	f000 fb96 	bl	80018d0 <HAL_ADC_GetValue>
 80011a4:	9008      	str	r0, [sp, #32]
	  HAL_ADC_Stop(&hadc);
 80011a6:	0020      	movs	r0, r4
 80011a8:	f000 fb10 	bl	80017cc <HAL_ADC_Stop>
	  AMC_Diag = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80011ac:	2140      	movs	r1, #64	@ 0x40
 80011ae:	4824      	ldr	r0, [pc, #144]	@ (8001240 <main+0x210>)
 80011b0:	f000 fd64 	bl	8001c7c <HAL_GPIO_ReadPin>
	  OC = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80011b4:	0039      	movs	r1, r7
	  AMC_Diag = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80011b6:	9009      	str	r0, [sp, #36]	@ 0x24
	  OC = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80011b8:	4821      	ldr	r0, [pc, #132]	@ (8001240 <main+0x210>)
 80011ba:	f000 fd5f 	bl	8001c7c <HAL_GPIO_ReadPin>
	  avg_c = (avg_c * 0.6) + (raw_c * 0.4);
 80011be:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <main+0x224>)
 80011c0:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <main+0x228>)
	  OC = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 80011c2:	0004      	movs	r4, r0
	  avg_c = (avg_c * 0.6) + (raw_c * 0.4);
 80011c4:	9804      	ldr	r0, [sp, #16]
 80011c6:	9905      	ldr	r1, [sp, #20]
 80011c8:	f7ff fbaa 	bl	8000920 <__aeabi_dmul>
 80011cc:	9004      	str	r0, [sp, #16]
 80011ce:	9105      	str	r1, [sp, #20]
 80011d0:	9807      	ldr	r0, [sp, #28]
 80011d2:	f7ff fea9 	bl	8000f28 <__aeabi_i2d>
 80011d6:	4a21      	ldr	r2, [pc, #132]	@ (800125c <main+0x22c>)
 80011d8:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <main+0x230>)
 80011da:	f7ff fba1 	bl	8000920 <__aeabi_dmul>
 80011de:	9a04      	ldr	r2, [sp, #16]
 80011e0:	9b05      	ldr	r3, [sp, #20]
 80011e2:	f7ff f839 	bl	8000258 <__aeabi_dadd>
	  iterator++;
 80011e6:	3501      	adds	r5, #1
 80011e8:	b2ed      	uxtb	r5, r5
	  avg_c = (avg_c * 0.6) + (raw_c * 0.4);
 80011ea:	9004      	str	r0, [sp, #16]
 80011ec:	9105      	str	r1, [sp, #20]
	  if(iterator==255)
 80011ee:	2dff      	cmp	r5, #255	@ 0xff
 80011f0:	d1a9      	bne.n	8001146 <main+0x116>
	  CurrentX100 = (((int32_t)avg_c*3300*100/4096)-165000)*20;
 80011f2:	f7ff fe5d 	bl	8000eb0 <__aeabi_d2iz>
 80011f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <main+0x234>)
		  sprintf(msg, "%" PRIi32 ";%" PRIi32 ";%u;%u;%" PRIi16 "\r\n", VoltageX10,CurrentX100,(unsigned)OC,(unsigned)AMC_Diag,DutyCycle);
 80011f8:	466a      	mov	r2, sp
	  CurrentX100 = (((int32_t)avg_c*3300*100/4096)-165000)*20;
 80011fa:	4343      	muls	r3, r0
 80011fc:	17d8      	asrs	r0, r3, #31
 80011fe:	0500      	lsls	r0, r0, #20
 8001200:	0d00      	lsrs	r0, r0, #20
 8001202:	18c0      	adds	r0, r0, r3
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <main+0x238>)
 8001206:	1300      	asrs	r0, r0, #12
 8001208:	18c0      	adds	r0, r0, r3
 800120a:	2314      	movs	r3, #20
 800120c:	4343      	muls	r3, r0
		  sprintf(msg, "%" PRIi32 ";%" PRIi32 ";%u;%u;%" PRIi16 "\r\n", VoltageX10,CurrentX100,(unsigned)OC,(unsigned)AMC_Diag,DutyCycle);
 800120e:	2020      	movs	r0, #32
 8001210:	5e12      	ldrsh	r2, [r2, r0]
 8001212:	4916      	ldr	r1, [pc, #88]	@ (800126c <main+0x23c>)
 8001214:	9202      	str	r2, [sp, #8]
 8001216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001218:	9400      	str	r4, [sp, #0]
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	a80e      	add	r0, sp, #56	@ 0x38
 800121e:	2200      	movs	r2, #0
 8001220:	f001 fad0 	bl	80027c4 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001224:	a80e      	add	r0, sp, #56	@ 0x38
 8001226:	f7fe ff6f 	bl	8000108 <strlen>
 800122a:	2301      	movs	r3, #1
 800122c:	b282      	uxth	r2, r0
 800122e:	425b      	negs	r3, r3
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <main+0x214>)
 8001232:	a90e      	add	r1, sp, #56	@ 0x38
 8001234:	f001 f9ce 	bl	80025d4 <HAL_UART_Transmit>
		  iterator = 0;
 8001238:	2500      	movs	r5, #0
 800123a:	e784      	b.n	8001146 <main+0x116>
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400
 8001244:	20000078 	.word	0x20000078
 8001248:	40013800 	.word	0x40013800
 800124c:	20000100 	.word	0x20000100
 8001250:	40012400 	.word	0x40012400
 8001254:	33333333 	.word	0x33333333
 8001258:	3fe33333 	.word	0x3fe33333
 800125c:	9999999a 	.word	0x9999999a
 8001260:	3fd99999 	.word	0x3fd99999
 8001264:	00050910 	.word	0x00050910
 8001268:	fffd7b78 	.word	0xfffd7b78
 800126c:	08003118 	.word	0x08003118

08001270 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	2101      	movs	r1, #1
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_MspInit+0x2c>)
{
 8001274:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	430a      	orrs	r2, r1
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	9200      	str	r2, [sp, #0]
 8001284:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	69da      	ldr	r2, [r3, #28]
 8001288:	0549      	lsls	r1, r1, #21
 800128a:	430a      	orrs	r2, r1
 800128c:	61da      	str	r2, [r3, #28]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	400b      	ands	r3, r1
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	b002      	add	sp, #8
 8001298:	4770      	bx	lr
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	0004      	movs	r4, r0
 80012a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	2214      	movs	r2, #20
 80012a8:	2100      	movs	r1, #0
 80012aa:	a803      	add	r0, sp, #12
 80012ac:	f001 faaa 	bl	8002804 <memset>
  if(hadc->Instance==ADC1)
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_ADC_MspInit+0x78>)
 80012b2:	6822      	ldr	r2, [r4, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d12d      	bne.n	8001314 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b8:	2180      	movs	r1, #128	@ 0x80
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_ADC_MspInit+0x7c>)
 80012bc:	0089      	lsls	r1, r1, #2
 80012be:	699a      	ldr	r2, [r3, #24]
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c2:	430a      	orrs	r2, r1
 80012c4:	619a      	str	r2, [r3, #24]
 80012c6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ce:	9200      	str	r2, [sp, #0]
 80012d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	0289      	lsls	r1, r1, #10
 80012d6:	430a      	orrs	r2, r1
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	02c9      	lsls	r1, r1, #11
 80012ea:	430a      	orrs	r2, r1
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f0:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	400b      	ands	r3, r1
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80012f8:	2381      	movs	r3, #129	@ 0x81
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80012fc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f000 fc0b 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001302:	2302      	movs	r3, #2
 8001304:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_ADC_MspInit+0x80>)
 800130a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f000 fc02 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001314:	b008      	add	sp, #32
 8001316:	bd10      	pop	{r4, pc}
 8001318:	40012400 	.word	0x40012400
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b510      	push	{r4, lr}
 8001326:	0004      	movs	r4, r0
 8001328:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	2214      	movs	r2, #20
 800132c:	2100      	movs	r1, #0
 800132e:	a803      	add	r0, sp, #12
 8001330:	f001 fa68 	bl	8002804 <memset>
  if(huart->Instance==USART1)
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_UART_MspInit+0x5c>)
 8001336:	6822      	ldr	r2, [r4, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d11f      	bne.n	800137c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_UART_MspInit+0x60>)
 8001340:	01c9      	lsls	r1, r1, #7
 8001342:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8001346:	430a      	orrs	r2, r1
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800134e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001352:	9201      	str	r2, [sp, #4]
 8001354:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	0289      	lsls	r1, r1, #10
 800135a:	430a      	orrs	r2, r1
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	400b      	ands	r3, r1
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001366:	230c      	movs	r3, #12
 8001368:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	3b0a      	subs	r3, #10
 800136c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	3301      	adds	r3, #1
 8001370:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001374:	3b02      	subs	r3, #2
 8001376:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f000 fbce 	bl	8001b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800137c:	b008      	add	sp, #32
 800137e:	bd10      	pop	{r4, pc}
 8001380:	40013800 	.word	0x40013800
 8001384:	40021000 	.word	0x40021000

08001388 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler>

0800138a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler>

0800138c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 f881 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bd10      	pop	{r4, pc}

08001398 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	490b      	ldr	r1, [pc, #44]	@ (80013c8 <_sbrk+0x30>)
 800139a:	4a0c      	ldr	r2, [pc, #48]	@ (80013cc <_sbrk+0x34>)
{
 800139c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a0:	490b      	ldr	r1, [pc, #44]	@ (80013d0 <_sbrk+0x38>)
{
 80013a2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80013a4:	6808      	ldr	r0, [r1, #0]
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d101      	bne.n	80013ae <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80013aa:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <_sbrk+0x3c>)
 80013ac:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ae:	6808      	ldr	r0, [r1, #0]
 80013b0:	18c3      	adds	r3, r0, r3
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d906      	bls.n	80013c4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80013b6:	f001 fa2d 	bl	8002814 <__errno>
 80013ba:	230c      	movs	r3, #12
 80013bc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013be:	2001      	movs	r0, #1
 80013c0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80013c2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80013c4:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80013c6:	e7fc      	b.n	80013c2 <_sbrk+0x2a>
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20001000 	.word	0x20001000
 80013d0:	20000140 	.word	0x20000140
 80013d4:	20000290 	.word	0x20000290

080013d8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013d8:	4770      	bx	lr
	...

080013dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013de:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e0:	f7ff fffa 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800140a:	f001 fa09 	bl	8002820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140e:	f7ff fe0f 	bl	8001030 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   r0, =_estack
 8001414:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001420:	080031a4 	.word	0x080031a4
  ldr r2, =_sbss
 8001424:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001428:	20000290 	.word	0x20000290

0800142c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_IRQHandler>
	...

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	20fa      	movs	r0, #250	@ 0xfa
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_InitTick+0x3c>)
 8001438:	0080      	lsls	r0, r0, #2
 800143a:	7819      	ldrb	r1, [r3, #0]
 800143c:	f7fe fe80 	bl	8000140 <__udivsi3>
 8001440:	4c0b      	ldr	r4, [pc, #44]	@ (8001470 <HAL_InitTick+0x40>)
 8001442:	0001      	movs	r1, r0
 8001444:	6820      	ldr	r0, [r4, #0]
 8001446:	f7fe fe7b 	bl	8000140 <__udivsi3>
 800144a:	f000 fb4b 	bl	8001ae4 <HAL_SYSTICK_Config>
 800144e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001452:	2c00      	cmp	r4, #0
 8001454:	d109      	bne.n	800146a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	2d03      	cmp	r5, #3
 8001458:	d807      	bhi.n	800146a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145a:	3802      	subs	r0, #2
 800145c:	0022      	movs	r2, r4
 800145e:	0029      	movs	r1, r5
 8001460:	f000 fb16 	bl	8001a90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	0020      	movs	r0, r4
 8001466:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_InitTick+0x44>)
 8001468:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800146a:	bd70      	pop	{r4, r5, r6, pc}
 800146c:	20000004 	.word	0x20000004
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008

08001478 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	2310      	movs	r3, #16
 800147a:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <HAL_Init+0x1c>)
{
 800147c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001480:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001482:	430b      	orrs	r3, r1
 8001484:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	f7ff ffd3 	bl	8001430 <HAL_InitTick>
  HAL_MspInit();
 800148a:	f7ff fef1 	bl	8001270 <HAL_MspInit>
}
 800148e:	2000      	movs	r0, #0
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001498:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <HAL_IncTick+0x10>)
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <HAL_IncTick+0x14>)
 800149c:	6811      	ldr	r1, [r2, #0]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	185b      	adds	r3, r3, r1
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	4770      	bx	lr
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	20000144 	.word	0x20000144
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014b0:	4b01      	ldr	r3, [pc, #4]	@ (80014b8 <HAL_GetTick+0x8>)
 80014b2:	6818      	ldr	r0, [r3, #0]
}
 80014b4:	4770      	bx	lr
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	20000144 	.word	0x20000144

080014bc <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014bc:	2204      	movs	r2, #4
 80014be:	6803      	ldr	r3, [r0, #0]
{
 80014c0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014c2:	6899      	ldr	r1, [r3, #8]
{
 80014c4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80014c6:	4211      	tst	r1, r2
 80014c8:	d101      	bne.n	80014ce <ADC_ConversionStop+0x12>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014ca:	2000      	movs	r0, #0
}
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	4211      	tst	r1, r2
 80014d2:	d006      	beq.n	80014e2 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80014d4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80014d6:	0792      	lsls	r2, r2, #30
 80014d8:	d403      	bmi.n	80014e2 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80014da:	2210      	movs	r2, #16
 80014dc:	6899      	ldr	r1, [r3, #8]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80014e2:	f7ff ffe5 	bl	80014b0 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e6:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80014e8:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4233      	tst	r3, r6
 80014f0:	d0eb      	beq.n	80014ca <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014f2:	f7ff ffdd 	bl	80014b0 <HAL_GetTick>
 80014f6:	1b40      	subs	r0, r0, r5
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f6      	bls.n	80014ea <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4233      	tst	r3, r6
 8001502:	d0f2      	beq.n	80014ea <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001504:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001506:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001508:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800150a:	4313      	orrs	r3, r2
 800150c:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001510:	4303      	orrs	r3, r0
 8001512:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001514:	e7da      	b.n	80014cc <ADC_ConversionStop+0x10>

08001516 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001516:	2103      	movs	r1, #3
 8001518:	6803      	ldr	r3, [r0, #0]
{
 800151a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800151c:	689a      	ldr	r2, [r3, #8]
{
 800151e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001520:	400a      	ands	r2, r1
 8001522:	2a01      	cmp	r2, #1
 8001524:	d001      	beq.n	800152a <ADC_Disable+0x14>
  return HAL_OK;
 8001526:	2000      	movs	r0, #0
}
 8001528:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	4211      	tst	r1, r2
 800152e:	d102      	bne.n	8001536 <ADC_Disable+0x20>
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	0412      	lsls	r2, r2, #16
 8001534:	d5f7      	bpl.n	8001526 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001536:	2205      	movs	r2, #5
 8001538:	689d      	ldr	r5, [r3, #8]
 800153a:	4015      	ands	r5, r2
 800153c:	2d01      	cmp	r5, #1
 800153e:	d11c      	bne.n	800157a <ADC_Disable+0x64>
      __HAL_ADC_DISABLE(hadc);
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	3a03      	subs	r2, #3
 8001544:	430a      	orrs	r2, r1
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	2203      	movs	r2, #3
 800154a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800154c:	f7ff ffb0 	bl	80014b0 <HAL_GetTick>
 8001550:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	422b      	tst	r3, r5
 8001558:	d0e5      	beq.n	8001526 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800155a:	f7ff ffa9 	bl	80014b0 <HAL_GetTick>
 800155e:	1b80      	subs	r0, r0, r6
 8001560:	2802      	cmp	r0, #2
 8001562:	d9f6      	bls.n	8001552 <ADC_Disable+0x3c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	422b      	tst	r3, r5
 800156a:	d0f2      	beq.n	8001552 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156c:	2310      	movs	r3, #16
 800156e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001570:	4313      	orrs	r3, r2
 8001572:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001576:	432b      	orrs	r3, r5
 8001578:	e006      	b.n	8001588 <ADC_Disable+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	2310      	movs	r3, #16
 800157c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800157e:	4313      	orrs	r3, r2
 8001580:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	2301      	movs	r3, #1
 8001584:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001586:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8001588:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800158c:	e7cc      	b.n	8001528 <ADC_Disable+0x12>
	...

08001590 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8001590:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8001592:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001594:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001596:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001598:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800159a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	400a      	ands	r2, r1
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d107      	bne.n	80015b4 <ADC_Enable.constprop.0+0x24>
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	4211      	tst	r1, r2
 80015a8:	d001      	beq.n	80015ae <ADC_Enable.constprop.0+0x1e>
  return HAL_OK;
 80015aa:	2000      	movs	r0, #0
}
 80015ac:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	0412      	lsls	r2, r2, #16
 80015b2:	d4fa      	bmi.n	80015aa <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <ADC_Enable.constprop.0+0x94>)
 80015b8:	4211      	tst	r1, r2
 80015ba:	d009      	beq.n	80015d0 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015bc:	2310      	movs	r3, #16
 80015be:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80015c0:	4313      	orrs	r3, r2
 80015c2:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c4:	2301      	movs	r3, #1
 80015c6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80015c8:	4313      	orrs	r3, r2
      return HAL_ERROR;
 80015ca:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80015ce:	e7ed      	b.n	80015ac <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80015d0:	2201      	movs	r2, #1
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <ADC_Enable.constprop.0+0x98>)
 80015da:	4914      	ldr	r1, [pc, #80]	@ (800162c <ADC_Enable.constprop.0+0x9c>)
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	f7fe fdaf 	bl	8000140 <__udivsi3>
 80015e2:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80015e4:	9b01      	ldr	r3, [sp, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d117      	bne.n	800161a <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 80015ea:	f7ff ff61 	bl	80014b0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015ee:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80015f0:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	422b      	tst	r3, r5
 80015f8:	d1d7      	bne.n	80015aa <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015fa:	f7ff ff59 	bl	80014b0 <HAL_GetTick>
 80015fe:	1b80      	subs	r0, r0, r6
 8001600:	2802      	cmp	r0, #2
 8001602:	d9f6      	bls.n	80015f2 <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	422b      	tst	r3, r5
 800160a:	d1f2      	bne.n	80015f2 <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160c:	2310      	movs	r3, #16
 800160e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001610:	4313      	orrs	r3, r2
 8001612:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001616:	432b      	orrs	r3, r5
 8001618:	e7d7      	b.n	80015ca <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	3b01      	subs	r3, #1
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	e7e0      	b.n	80015e4 <ADC_Enable.constprop.0+0x54>
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	80000017 	.word	0x80000017
 8001628:	20000000 	.word	0x20000000
 800162c:	000f4240 	.word	0x000f4240

08001630 <HAL_ADC_Init>:
{
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001634:	d100      	bne.n	8001638 <HAL_ADC_Init+0x8>
 8001636:	e090      	b.n	800175a <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001638:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 800163e:	0002      	movs	r2, r0
 8001640:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001642:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8001644:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001646:	f7ff fe2b 	bl	80012a0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800164a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800164c:	06db      	lsls	r3, r3, #27
 800164e:	d500      	bpl.n	8001652 <HAL_ADC_Init+0x22>
 8001650:	e085      	b.n	800175e <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001656:	075b      	lsls	r3, r3, #29
 8001658:	d500      	bpl.n	800165c <HAL_ADC_Init+0x2c>
 800165a:	e080      	b.n	800175e <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 800165c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <HAL_ADC_Init+0x138>)
 8001660:	4019      	ands	r1, r3
 8001662:	3306      	adds	r3, #6
 8001664:	33ff      	adds	r3, #255	@ 0xff
 8001666:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001668:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800166c:	6893      	ldr	r3, [r2, #8]
 800166e:	400b      	ands	r3, r1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_ADC_Init+0x50>
 8001674:	6811      	ldr	r1, [r2, #0]
 8001676:	4219      	tst	r1, r3
 8001678:	d10e      	bne.n	8001698 <HAL_ADC_Init+0x68>
 800167a:	68d3      	ldr	r3, [r2, #12]
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	d40b      	bmi.n	8001698 <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001680:	2118      	movs	r1, #24
 8001682:	68d3      	ldr	r3, [r2, #12]
 8001684:	438b      	bics	r3, r1
 8001686:	68a1      	ldr	r1, [r4, #8]
 8001688:	430b      	orrs	r3, r1
 800168a:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800168c:	6913      	ldr	r3, [r2, #16]
 800168e:	6861      	ldr	r1, [r4, #4]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	430b      	orrs	r3, r1
 8001696:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001698:	68d3      	ldr	r3, [r2, #12]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_ADC_Init+0x13c>)
 800169c:	400b      	ands	r3, r1
 800169e:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016a0:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016a2:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016a4:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016a6:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016a8:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016aa:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016ac:	68e0      	ldr	r0, [r4, #12]
 80016ae:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016b0:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016b2:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016b4:	1d60      	adds	r0, r4, #5
 80016b6:	7fc0      	ldrb	r0, [r0, #31]
 80016b8:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016ba:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80016bc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80016be:	3801      	subs	r0, #1
 80016c0:	1e45      	subs	r5, r0, #1
 80016c2:	41a8      	sbcs	r0, r5
 80016c4:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016c6:	4303      	orrs	r3, r0
 80016c8:	6920      	ldr	r0, [r4, #16]
 80016ca:	3802      	subs	r0, #2
 80016cc:	4245      	negs	r5, r0
 80016ce:	4168      	adcs	r0, r5
 80016d0:	0080      	lsls	r0, r0, #2
 80016d2:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d4:	7ee0      	ldrb	r0, [r4, #27]
 80016d6:	2801      	cmp	r0, #1
 80016d8:	d104      	bne.n	80016e4 <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016da:	2900      	cmp	r1, #0
 80016dc:	d12b      	bne.n	8001736 <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016de:	2180      	movs	r1, #128	@ 0x80
 80016e0:	0249      	lsls	r1, r1, #9
 80016e2:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e4:	20c2      	movs	r0, #194	@ 0xc2
 80016e6:	69e1      	ldr	r1, [r4, #28]
 80016e8:	30ff      	adds	r0, #255	@ 0xff
 80016ea:	4281      	cmp	r1, r0
 80016ec:	d002      	beq.n	80016f4 <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016ee:	6a20      	ldr	r0, [r4, #32]
 80016f0:	4301      	orrs	r1, r0
 80016f2:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016f4:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80016f6:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016f8:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80016fa:	4319      	orrs	r1, r3
 80016fc:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001700:	4281      	cmp	r1, r0
 8001702:	d002      	beq.n	800170a <HAL_ADC_Init+0xda>
 8001704:	1e48      	subs	r0, r1, #1
 8001706:	2806      	cmp	r0, #6
 8001708:	d807      	bhi.n	800171a <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800170a:	2507      	movs	r5, #7
 800170c:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800170e:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001710:	43a8      	bics	r0, r5
 8001712:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001714:	6950      	ldr	r0, [r2, #20]
 8001716:	4301      	orrs	r1, r0
 8001718:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800171a:	68d2      	ldr	r2, [r2, #12]
 800171c:	4914      	ldr	r1, [pc, #80]	@ (8001770 <HAL_ADC_Init+0x140>)
 800171e:	400a      	ands	r2, r1
 8001720:	429a      	cmp	r2, r3
 8001722:	d110      	bne.n	8001746 <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 8001724:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001726:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001728:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800172a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800172c:	439a      	bics	r2, r3
 800172e:	3b02      	subs	r3, #2
 8001730:	4313      	orrs	r3, r2
 8001732:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8001734:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001736:	2120      	movs	r1, #32
 8001738:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800173a:	4329      	orrs	r1, r5
 800173c:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8001740:	4308      	orrs	r0, r1
 8001742:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8001744:	e7ce      	b.n	80016e4 <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 8001746:	2312      	movs	r3, #18
 8001748:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800174a:	439a      	bics	r2, r3
 800174c:	3b02      	subs	r3, #2
 800174e:	4313      	orrs	r3, r2
 8001750:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	2301      	movs	r3, #1
 8001754:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001756:	4313      	orrs	r3, r2
 8001758:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	e7ea      	b.n	8001734 <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175e:	2310      	movs	r3, #16
 8001760:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001762:	4313      	orrs	r3, r2
 8001764:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8001766:	e7f8      	b.n	800175a <HAL_ADC_Init+0x12a>
 8001768:	fffffefd 	.word	0xfffffefd
 800176c:	fffe0219 	.word	0xfffe0219
 8001770:	833fffe7 	.word	0x833fffe7

08001774 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001774:	6803      	ldr	r3, [r0, #0]
{
 8001776:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001778:	689b      	ldr	r3, [r3, #8]
{
 800177a:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 800177c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800177e:	075b      	lsls	r3, r3, #29
 8001780:	d41a      	bmi.n	80017b8 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001782:	0025      	movs	r5, r4
 8001784:	3534      	adds	r5, #52	@ 0x34
 8001786:	782b      	ldrb	r3, [r5, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d015      	beq.n	80017b8 <HAL_ADC_Start+0x44>
 800178c:	2301      	movs	r3, #1
 800178e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001790:	7e63      	ldrb	r3, [r4, #25]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d111      	bne.n	80017ba <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800179a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800179c:	401a      	ands	r2, r3
 800179e:	2380      	movs	r3, #128	@ 0x80
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a4:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80017a6:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	63e0      	str	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 80017aa:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	3a18      	subs	r2, #24
 80017b4:	430a      	orrs	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]
}
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80017ba:	0020      	movs	r0, r4
 80017bc:	f7ff fee8 	bl	8001590 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d0e8      	beq.n	8001796 <HAL_ADC_Start+0x22>
 80017c4:	e7f8      	b.n	80017b8 <HAL_ADC_Start+0x44>
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	fffff0fe 	.word	0xfffff0fe

080017cc <HAL_ADC_Stop>:
{ 
 80017cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80017ce:	0006      	movs	r6, r0
 80017d0:	3634      	adds	r6, #52	@ 0x34
 80017d2:	7833      	ldrb	r3, [r6, #0]
{ 
 80017d4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80017d6:	2002      	movs	r0, #2
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d012      	beq.n	8001802 <HAL_ADC_Stop+0x36>
 80017dc:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80017de:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80017e0:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80017e2:	f7ff fe6b 	bl	80014bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d109      	bne.n	80017fe <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80017ea:	0020      	movs	r0, r4
 80017ec:	f7ff fe93 	bl	8001516 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d104      	bne.n	80017fe <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80017f6:	4a03      	ldr	r2, [pc, #12]	@ (8001804 <HAL_ADC_Stop+0x38>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	431d      	orrs	r5, r3
 80017fc:	63a5      	str	r5, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 80017fe:	2300      	movs	r3, #0
 8001800:	7033      	strb	r3, [r6, #0]
}
 8001802:	bd70      	pop	{r4, r5, r6, pc}
 8001804:	fffffefe 	.word	0xfffffefe

08001808 <HAL_ADC_PollForConversion>:
{
 8001808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800180a:	6945      	ldr	r5, [r0, #20]
{
 800180c:	0004      	movs	r4, r0
 800180e:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001810:	2d08      	cmp	r5, #8
 8001812:	d00d      	beq.n	8001830 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001814:	6803      	ldr	r3, [r0, #0]
 8001816:	2001      	movs	r0, #1
 8001818:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800181a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800181c:	4203      	tst	r3, r0
 800181e:	d007      	beq.n	8001830 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001820:	2320      	movs	r3, #32
 8001822:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hadc);
 8001824:	3434      	adds	r4, #52	@ 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001826:	4313      	orrs	r3, r2
 8001828:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800182a:	2300      	movs	r3, #0
 800182c:	7023      	strb	r3, [r4, #0]
}
 800182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001830:	f7ff fe3e 	bl	80014b0 <HAL_GetTick>
 8001834:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4215      	tst	r5, r2
 800183c:	d022      	beq.n	8001884 <HAL_ADC_PollForConversion+0x7c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800183e:	2280      	movs	r2, #128	@ 0x80
 8001840:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	430a      	orrs	r2, r1
 8001846:	63a2      	str	r2, [r4, #56]	@ 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001848:	22c0      	movs	r2, #192	@ 0xc0
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	4211      	tst	r1, r2
 8001850:	d113      	bne.n	800187a <HAL_ADC_PollForConversion+0x72>
 8001852:	7ea2      	ldrb	r2, [r4, #26]
 8001854:	2a00      	cmp	r2, #0
 8001856:	d110      	bne.n	800187a <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	0712      	lsls	r2, r2, #28
 800185c:	d50d      	bpl.n	800187a <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	0752      	lsls	r2, r2, #29
 8001862:	d427      	bmi.n	80018b4 <HAL_ADC_PollForConversion+0xac>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001864:	210c      	movs	r1, #12
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	438a      	bics	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800186c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800186e:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <HAL_ADC_PollForConversion+0xc4>)
 8001870:	4011      	ands	r1, r2
 8001872:	3204      	adds	r2, #4
 8001874:	32ff      	adds	r2, #255	@ 0xff
 8001876:	430a      	orrs	r2, r1
 8001878:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800187a:	7e22      	ldrb	r2, [r4, #24]
 800187c:	2a00      	cmp	r2, #0
 800187e:	d022      	beq.n	80018c6 <HAL_ADC_PollForConversion+0xbe>
  return HAL_OK;
 8001880:	2000      	movs	r0, #0
 8001882:	e7d4      	b.n	800182e <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001884:	1c72      	adds	r2, r6, #1
 8001886:	d0d7      	beq.n	8001838 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001888:	2e00      	cmp	r6, #0
 800188a:	d10d      	bne.n	80018a8 <HAL_ADC_PollForConversion+0xa0>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800188c:	002a      	movs	r2, r5
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	401a      	ands	r2, r3
 8001894:	421d      	tst	r5, r3
 8001896:	d1ce      	bne.n	8001836 <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001898:	2304      	movs	r3, #4
 800189a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hadc);
 800189c:	3434      	adds	r4, #52	@ 0x34
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800189e:	430b      	orrs	r3, r1
 80018a0:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 80018a2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80018a4:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 80018a6:	e7c2      	b.n	800182e <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80018a8:	f7ff fe02 	bl	80014b0 <HAL_GetTick>
 80018ac:	1bc0      	subs	r0, r0, r7
 80018ae:	42b0      	cmp	r0, r6
 80018b0:	d8ec      	bhi.n	800188c <HAL_ADC_PollForConversion+0x84>
 80018b2:	e7c0      	b.n	8001836 <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b4:	2220      	movs	r2, #32
 80018b6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80018b8:	430a      	orrs	r2, r1
 80018ba:	63a2      	str	r2, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018bc:	2201      	movs	r2, #1
 80018be:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80018c0:	430a      	orrs	r2, r1
 80018c2:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80018c4:	e7d9      	b.n	800187a <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e7d9      	b.n	8001880 <HAL_ADC_PollForConversion+0x78>
 80018cc:	fffffefe 	.word	0xfffffefe

080018d0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80018d0:	6803      	ldr	r3, [r0, #0]
 80018d2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_ADC_ConfigChannel>:
{
 80018d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80018da:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80018dc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80018de:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018e0:	3434      	adds	r4, #52	@ 0x34
 80018e2:	7822      	ldrb	r2, [r4, #0]
{
 80018e4:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018e6:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 80018e8:	2002      	movs	r0, #2
 80018ea:	2a01      	cmp	r2, #1
 80018ec:	d02a      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x6c>
 80018ee:	3801      	subs	r0, #1
 80018f0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	6896      	ldr	r6, [r2, #8]
 80018f6:	0776      	lsls	r6, r6, #29
 80018f8:	d45e      	bmi.n	80019b8 <HAL_ADC_ConfigChannel+0xe0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018fa:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80018fc:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018fe:	001e      	movs	r6, r3
    if (sConfig->Rank != ADC_RANK_NONE)
 8001900:	46bc      	mov	ip, r7
 8001902:	4f30      	ldr	r7, [pc, #192]	@ (80019c4 <HAL_ADC_ConfigChannel+0xec>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001904:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001906:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8001908:	45bc      	cmp	ip, r7
 800190a:	d03f      	beq.n	800198c <HAL_ADC_ConfigChannel+0xb4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800190c:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 800190e:	4338      	orrs	r0, r7
 8001910:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001912:	2080      	movs	r0, #128	@ 0x80
 8001914:	0540      	lsls	r0, r0, #21
 8001916:	4285      	cmp	r5, r0
 8001918:	d00f      	beq.n	800193a <HAL_ADC_ConfigChannel+0x62>
 800191a:	3d01      	subs	r5, #1
 800191c:	2d06      	cmp	r5, #6
 800191e:	d90c      	bls.n	800193a <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001920:	2007      	movs	r0, #7
 8001922:	6955      	ldr	r5, [r2, #20]
 8001924:	6889      	ldr	r1, [r1, #8]
 8001926:	4005      	ands	r5, r0
 8001928:	42a9      	cmp	r1, r5
 800192a:	d006      	beq.n	800193a <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800192c:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800192e:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001930:	4385      	bics	r5, r0
 8001932:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001934:	6955      	ldr	r5, [r2, #20]
 8001936:	4329      	orrs	r1, r5
 8001938:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800193a:	2e02      	cmp	r6, #2
 800193c:	d903      	bls.n	8001946 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001940:	2300      	movs	r3, #0
 8001942:	7023      	strb	r3, [r4, #0]
}
 8001944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001946:	4820      	ldr	r0, [pc, #128]	@ (80019c8 <HAL_ADC_ConfigChannel+0xf0>)
 8001948:	6801      	ldr	r1, [r0, #0]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d01b      	beq.n	8001986 <HAL_ADC_ConfigChannel+0xae>
 800194e:	001a      	movs	r2, r3
 8001950:	3a11      	subs	r2, #17
 8001952:	4255      	negs	r5, r2
 8001954:	416a      	adcs	r2, r5
 8001956:	4d1d      	ldr	r5, [pc, #116]	@ (80019cc <HAL_ADC_ConfigChannel+0xf4>)
 8001958:	4252      	negs	r2, r2
 800195a:	402a      	ands	r2, r5
 800195c:	2580      	movs	r5, #128	@ 0x80
 800195e:	046d      	lsls	r5, r5, #17
 8001960:	1952      	adds	r2, r2, r5
 8001962:	430a      	orrs	r2, r1
 8001964:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001966:	2b10      	cmp	r3, #16
 8001968:	d1e9      	bne.n	800193e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_ADC_ConfigChannel+0xf8>)
 800196c:	4919      	ldr	r1, [pc, #100]	@ (80019d4 <HAL_ADC_ConfigChannel+0xfc>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f7fe fbe6 	bl	8000140 <__udivsi3>
 8001974:	230a      	movs	r3, #10
 8001976:	4343      	muls	r3, r0
            wait_loop_index--;
 8001978:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800197a:	9b01      	ldr	r3, [sp, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0de      	beq.n	800193e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001980:	9b01      	ldr	r3, [sp, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	e7f8      	b.n	8001978 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	0412      	lsls	r2, r2, #16
 800198a:	e7ea      	b.n	8001962 <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800198c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800198e:	4381      	bics	r1, r0
 8001990:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001992:	2e02      	cmp	r6, #2
 8001994:	d8d3      	bhi.n	800193e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001996:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <HAL_ADC_ConfigChannel+0xf0>)
 8001998:	6811      	ldr	r1, [r2, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d00a      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0xdc>
 800199e:	3b11      	subs	r3, #17
 80019a0:	1e58      	subs	r0, r3, #1
 80019a2:	4183      	sbcs	r3, r0
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <HAL_ADC_ConfigChannel+0xf4>)
 80019a6:	425b      	negs	r3, r3
 80019a8:	4003      	ands	r3, r0
 80019aa:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <HAL_ADC_ConfigChannel+0x100>)
 80019ac:	181b      	adds	r3, r3, r0
 80019ae:	400b      	ands	r3, r1
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e7c4      	b.n	800193e <HAL_ADC_ConfigChannel+0x66>
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_ADC_ConfigChannel+0x104>)
 80019b6:	e7fa      	b.n	80019ae <HAL_ADC_ConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b8:	2220      	movs	r2, #32
 80019ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80019bc:	430a      	orrs	r2, r1
 80019be:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80019c0:	e7be      	b.n	8001940 <HAL_ADC_ConfigChannel+0x68>
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	00001001 	.word	0x00001001
 80019c8:	40012708 	.word	0x40012708
 80019cc:	ff400000 	.word	0xff400000
 80019d0:	20000000 	.word	0x20000000
 80019d4:	000f4240 	.word	0x000f4240
 80019d8:	ffbfffff 	.word	0xffbfffff
 80019dc:	ff7fffff 	.word	0xff7fffff

080019e0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e2:	0006      	movs	r6, r0
 80019e4:	3634      	adds	r6, #52	@ 0x34
 80019e6:	7833      	ldrb	r3, [r6, #0]
{
 80019e8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80019ea:	2002      	movs	r0, #2
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d045      	beq.n	8001a7c <HAL_ADCEx_Calibration_Start+0x9c>
 80019f0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019f2:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80019f4:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	400a      	ands	r2, r1
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_ADCEx_Calibration_Start+0x2c>
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	4211      	tst	r1, r2
 8001a04:	d13b      	bne.n	8001a7e <HAL_ADCEx_Calibration_Start+0x9e>
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	0412      	lsls	r2, r2, #16
 8001a0a:	d438      	bmi.n	8001a7e <HAL_ADCEx_Calibration_Start+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001a0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a8c <HAL_ADCEx_Calibration_Start+0xac>)
 8001a10:	4011      	ands	r1, r2
 8001a12:	3206      	adds	r2, #6
 8001a14:	32ff      	adds	r2, #255	@ 0xff
 8001a16:	430a      	orrs	r2, r1
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a18:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8001a1a:	63a2      	str	r2, [r4, #56]	@ 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a1c:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	438a      	bics	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	0612      	lsls	r2, r2, #24
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001a2e:	f7ff fd3f 	bl	80014b0 <HAL_GetTick>
 8001a32:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	db0d      	blt.n	8001a58 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a3c:	2103      	movs	r1, #3
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a3e:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001a40:	400d      	ands	r5, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a42:	4315      	orrs	r5, r2
 8001a44:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	2301      	movs	r3, #1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	63a3      	str	r3, [r4, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a52:	2300      	movs	r3, #0
 8001a54:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001a56:	e011      	b.n	8001a7c <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a58:	f7ff fd2a 	bl	80014b0 <HAL_GetTick>
 8001a5c:	1bc0      	subs	r0, r0, r7
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9e8      	bls.n	8001a34 <HAL_ADCEx_Calibration_Start+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	dae4      	bge.n	8001a34 <HAL_ADCEx_Calibration_Start+0x54>
          ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	2312      	movs	r3, #18
 8001a6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001a70:	439a      	bics	r2, r3
 8001a72:	3b02      	subs	r3, #2
 8001a74:	4313      	orrs	r3, r2
 8001a76:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hadc);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	7033      	strb	r3, [r6, #0]
}
 8001a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7e:	2320      	movs	r3, #32
 8001a80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a84:	4313      	orrs	r3, r2
 8001a86:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8001a88:	e7e3      	b.n	8001a52 <HAL_ADCEx_Calibration_Start+0x72>
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	fffffefd 	.word	0xfffffefd

08001a90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a92:	24ff      	movs	r4, #255	@ 0xff
 8001a94:	2203      	movs	r2, #3
 8001a96:	000b      	movs	r3, r1
 8001a98:	0021      	movs	r1, r4
 8001a9a:	4002      	ands	r2, r0
 8001a9c:	00d2      	lsls	r2, r2, #3
 8001a9e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aa6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	db0a      	blt.n	8001ac2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aac:	24c0      	movs	r4, #192	@ 0xc0
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_NVIC_SetPriority+0x4c>)
 8001ab0:	0880      	lsrs	r0, r0, #2
 8001ab2:	0080      	lsls	r0, r0, #2
 8001ab4:	1880      	adds	r0, r0, r2
 8001ab6:	00a4      	lsls	r4, r4, #2
 8001ab8:	5902      	ldr	r2, [r0, r4]
 8001aba:	400a      	ands	r2, r1
 8001abc:	4313      	orrs	r3, r2
 8001abe:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001ac0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	4010      	ands	r0, r2
 8001ac6:	3808      	subs	r0, #8
 8001ac8:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <HAL_NVIC_SetPriority+0x50>)
 8001aca:	0880      	lsrs	r0, r0, #2
 8001acc:	0080      	lsls	r0, r0, #2
 8001ace:	1880      	adds	r0, r0, r2
 8001ad0:	69c2      	ldr	r2, [r0, #28]
 8001ad2:	4011      	ands	r1, r2
 8001ad4:	4319      	orrs	r1, r3
 8001ad6:	61c1      	str	r1, [r0, #28]
 8001ad8:	e7f2      	b.n	8001ac0 <HAL_NVIC_SetPriority+0x30>
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	2280      	movs	r2, #128	@ 0x80
 8001ae6:	1e43      	subs	r3, r0, #1
 8001ae8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d20d      	bcs.n	8001b0c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	6a03      	ldr	r3, [r0, #32]
 8001afa:	0609      	lsls	r1, r1, #24
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	430b      	orrs	r3, r1
 8001b02:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b0c:	4770      	bx	lr
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	e000e010 	.word	0xe000e010
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001b18:	2300      	movs	r3, #0
{
 8001b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	680a      	ldr	r2, [r1, #0]
 8001b20:	0014      	movs	r4, r2
 8001b22:	40dc      	lsrs	r4, r3
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8001b26:	b007      	add	sp, #28
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	0014      	movs	r4, r2
 8001b2e:	409d      	lsls	r5, r3
 8001b30:	402c      	ands	r4, r5
 8001b32:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8001b34:	422a      	tst	r2, r5
 8001b36:	d100      	bne.n	8001b3a <HAL_GPIO_Init+0x22>
 8001b38:	e094      	b.n	8001c64 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b3a:	684a      	ldr	r2, [r1, #4]
 8001b3c:	005f      	lsls	r7, r3, #1
 8001b3e:	4694      	mov	ip, r2
 8001b40:	2203      	movs	r2, #3
 8001b42:	4664      	mov	r4, ip
 8001b44:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b46:	2403      	movs	r4, #3
 8001b48:	40bc      	lsls	r4, r7
 8001b4a:	43e4      	mvns	r4, r4
 8001b4c:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b4e:	1e54      	subs	r4, r2, #1
 8001b50:	2c01      	cmp	r4, #1
 8001b52:	d82e      	bhi.n	8001bb2 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8001b54:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b56:	9c01      	ldr	r4, [sp, #4]
 8001b58:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b5a:	68cc      	ldr	r4, [r1, #12]
 8001b5c:	40bc      	lsls	r4, r7
 8001b5e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001b60:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b62:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b64:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b66:	43ac      	bics	r4, r5
 8001b68:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	4664      	mov	r4, ip
 8001b6c:	0924      	lsrs	r4, r4, #4
 8001b6e:	4034      	ands	r4, r6
 8001b70:	409c      	lsls	r4, r3
 8001b72:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001b74:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b76:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b78:	9c01      	ldr	r4, [sp, #4]
 8001b7a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b7c:	688c      	ldr	r4, [r1, #8]
 8001b7e:	40bc      	lsls	r4, r7
 8001b80:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001b82:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	2a02      	cmp	r2, #2
 8001b86:	d116      	bne.n	8001bb6 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b88:	2507      	movs	r5, #7
 8001b8a:	260f      	movs	r6, #15
 8001b8c:	401d      	ands	r5, r3
 8001b8e:	00ad      	lsls	r5, r5, #2
 8001b90:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8001b92:	08dc      	lsrs	r4, r3, #3
 8001b94:	00a4      	lsls	r4, r4, #2
 8001b96:	1904      	adds	r4, r0, r4
 8001b98:	9402      	str	r4, [sp, #8]
 8001b9a:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9c:	9603      	str	r6, [sp, #12]
 8001b9e:	0026      	movs	r6, r4
 8001ba0:	9c03      	ldr	r4, [sp, #12]
 8001ba2:	43a6      	bics	r6, r4
 8001ba4:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba6:	690e      	ldr	r6, [r1, #16]
 8001ba8:	40ae      	lsls	r6, r5
 8001baa:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001bac:	9c02      	ldr	r4, [sp, #8]
 8001bae:	6226      	str	r6, [r4, #32]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb2:	2a03      	cmp	r2, #3
 8001bb4:	d1df      	bne.n	8001b76 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001bb8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bba:	9d01      	ldr	r5, [sp, #4]
 8001bbc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bbe:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc0:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8001bc2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc4:	4662      	mov	r2, ip
 8001bc6:	02a4      	lsls	r4, r4, #10
 8001bc8:	4222      	tst	r2, r4
 8001bca:	d04b      	beq.n	8001c64 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	2501      	movs	r5, #1
 8001bce:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd0:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd4:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	432c      	orrs	r4, r5
 8001bd8:	6194      	str	r4, [r2, #24]
 8001bda:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bdc:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	402a      	ands	r2, r5
 8001be0:	9205      	str	r2, [sp, #20]
 8001be2:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001be4:	4a21      	ldr	r2, [pc, #132]	@ (8001c6c <HAL_GPIO_Init+0x154>)
 8001be6:	00a4      	lsls	r4, r4, #2
 8001be8:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bea:	220f      	movs	r2, #15
 8001bec:	3502      	adds	r5, #2
 8001bee:	401d      	ands	r5, r3
 8001bf0:	00ad      	lsls	r5, r5, #2
 8001bf2:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf4:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf6:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	42b8      	cmp	r0, r7
 8001bfc:	d008      	beq.n	8001c10 <HAL_GPIO_Init+0xf8>
 8001bfe:	4f1c      	ldr	r7, [pc, #112]	@ (8001c70 <HAL_GPIO_Init+0x158>)
 8001c00:	3201      	adds	r2, #1
 8001c02:	42b8      	cmp	r0, r7
 8001c04:	d004      	beq.n	8001c10 <HAL_GPIO_Init+0xf8>
 8001c06:	4f1b      	ldr	r7, [pc, #108]	@ (8001c74 <HAL_GPIO_Init+0x15c>)
 8001c08:	3204      	adds	r2, #4
 8001c0a:	42b8      	cmp	r0, r7
 8001c0c:	d100      	bne.n	8001c10 <HAL_GPIO_Init+0xf8>
 8001c0e:	3a03      	subs	r2, #3
 8001c10:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c12:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c14:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c16:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001c18:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8001c1a:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001c1c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001c1e:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8001c20:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001c22:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c24:	02ff      	lsls	r7, r7, #11
 8001c26:	d401      	bmi.n	8001c2c <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8001c28:	0035      	movs	r5, r6
 8001c2a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001c2e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001c30:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001c32:	9d00      	ldr	r5, [sp, #0]
 8001c34:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c36:	02bf      	lsls	r7, r7, #10
 8001c38:	d401      	bmi.n	8001c3e <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8001c3a:	0035      	movs	r5, r6
 8001c3c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3e:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8001c40:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8001c42:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001c44:	9d00      	ldr	r5, [sp, #0]
 8001c46:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c48:	03bf      	lsls	r7, r7, #14
 8001c4a:	d401      	bmi.n	8001c50 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8001c4c:	0035      	movs	r5, r6
 8001c4e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c50:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001c52:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001c54:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001c56:	9e00      	ldr	r6, [sp, #0]
 8001c58:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c5a:	03ff      	lsls	r7, r7, #15
 8001c5c:	d401      	bmi.n	8001c62 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8001c5e:	4025      	ands	r5, r4
 8001c60:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001c62:	6016      	str	r6, [r2, #0]
    position++;
 8001c64:	3301      	adds	r3, #1
 8001c66:	e75a      	b.n	8001b1e <HAL_GPIO_Init+0x6>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000800 	.word	0x48000800
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	6900      	ldr	r0, [r0, #16]
 8001c7e:	4008      	ands	r0, r1
 8001c80:	1e43      	subs	r3, r0, #1
 8001c82:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001c84:	b2c0      	uxtb	r0, r0
  }
 8001c86:	4770      	bx	lr

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	0004      	movs	r4, r0
 8001c8c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d045      	beq.n	8001d1e <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	6803      	ldr	r3, [r0, #0]
 8001c94:	07db      	lsls	r3, r3, #31
 8001c96:	d42f      	bmi.n	8001cf8 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	079b      	lsls	r3, r3, #30
 8001c9c:	d500      	bpl.n	8001ca0 <HAL_RCC_OscConfig+0x18>
 8001c9e:	e081      	b.n	8001da4 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	071b      	lsls	r3, r3, #28
 8001ca4:	d500      	bpl.n	8001ca8 <HAL_RCC_OscConfig+0x20>
 8001ca6:	e0bc      	b.n	8001e22 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	075b      	lsls	r3, r3, #29
 8001cac:	d500      	bpl.n	8001cb0 <HAL_RCC_OscConfig+0x28>
 8001cae:	e0df      	b.n	8001e70 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	06db      	lsls	r3, r3, #27
 8001cb4:	d51a      	bpl.n	8001cec <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cb6:	6962      	ldr	r2, [r4, #20]
 8001cb8:	2304      	movs	r3, #4
 8001cba:	4db4      	ldr	r5, [pc, #720]	@ (8001f8c <HAL_RCC_OscConfig+0x304>)
 8001cbc:	2a01      	cmp	r2, #1
 8001cbe:	d000      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x3a>
 8001cc0:	e148      	b.n	8001f54 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cc2:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cc4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001cca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fbee 	bl	80014b0 <HAL_GetTick>
 8001cd4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cd6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001cd8:	423b      	tst	r3, r7
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x56>
 8001cdc:	e133      	b.n	8001f46 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cde:	21f8      	movs	r1, #248	@ 0xf8
 8001ce0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001ce2:	69a3      	ldr	r3, [r4, #24]
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cec:	6a23      	ldr	r3, [r4, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d000      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x6c>
 8001cf2:	e157      	b.n	8001fa4 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e02a      	b.n	8001d4e <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cf8:	220c      	movs	r2, #12
 8001cfa:	4da4      	ldr	r5, [pc, #656]	@ (8001f8c <HAL_RCC_OscConfig+0x304>)
 8001cfc:	686b      	ldr	r3, [r5, #4]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d006      	beq.n	8001d12 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d04:	686b      	ldr	r3, [r5, #4]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d10a      	bne.n	8001d22 <HAL_RCC_OscConfig+0x9a>
 8001d0c:	686b      	ldr	r3, [r5, #4]
 8001d0e:	03db      	lsls	r3, r3, #15
 8001d10:	d507      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	039b      	lsls	r3, r3, #14
 8001d16:	d5bf      	bpl.n	8001c98 <HAL_RCC_OscConfig+0x10>
 8001d18:	6863      	ldr	r3, [r4, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1bc      	bne.n	8001c98 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001d1e:	2001      	movs	r0, #1
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d22:	6863      	ldr	r3, [r4, #4]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d114      	bne.n	8001d52 <HAL_RCC_OscConfig+0xca>
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	682a      	ldr	r2, [r5, #0]
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d32:	f7ff fbbd 	bl	80014b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001d38:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	02bf      	lsls	r7, r7, #10
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	423b      	tst	r3, r7
 8001d40:	d1aa      	bne.n	8001c98 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d42:	f7ff fbb5 	bl	80014b0 <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	2864      	cmp	r0, #100	@ 0x64
 8001d4a:	d9f7      	bls.n	8001d3c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8001d4c:	2003      	movs	r0, #3
}
 8001d4e:	b005      	add	sp, #20
 8001d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0xfc>
 8001d56:	682b      	ldr	r3, [r5, #0]
 8001d58:	4a8d      	ldr	r2, [pc, #564]	@ (8001f90 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	602b      	str	r3, [r5, #0]
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	4a8c      	ldr	r2, [pc, #560]	@ (8001f94 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d64:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d66:	4013      	ands	r3, r2
 8001d68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fba1 	bl	80014b0 <HAL_GetTick>
 8001d6e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	423b      	tst	r3, r7
 8001d74:	d100      	bne.n	8001d78 <HAL_RCC_OscConfig+0xf0>
 8001d76:	e78f      	b.n	8001c98 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fb9a 	bl	80014b0 <HAL_GetTick>
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	2864      	cmp	r0, #100	@ 0x64
 8001d80:	d9f6      	bls.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d82:	e7e3      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x10c>
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	682a      	ldr	r2, [r5, #0]
 8001d8c:	02db      	lsls	r3, r3, #11
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	e7c9      	b.n	8001d28 <HAL_RCC_OscConfig+0xa0>
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	4a7e      	ldr	r2, [pc, #504]	@ (8001f90 <HAL_RCC_OscConfig+0x308>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	602b      	str	r3, [r5, #0]
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f94 <HAL_RCC_OscConfig+0x30c>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	e7c5      	b.n	8001d30 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001da4:	220c      	movs	r2, #12
 8001da6:	4d79      	ldr	r5, [pc, #484]	@ (8001f8c <HAL_RCC_OscConfig+0x304>)
 8001da8:	686b      	ldr	r3, [r5, #4]
 8001daa:	4213      	tst	r3, r2
 8001dac:	d006      	beq.n	8001dbc <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dae:	686b      	ldr	r3, [r5, #4]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d110      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x150>
 8001db6:	686b      	ldr	r3, [r5, #4]
 8001db8:	03db      	lsls	r3, r3, #15
 8001dba:	d40d      	bmi.n	8001dd8 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	079b      	lsls	r3, r3, #30
 8001dc0:	d502      	bpl.n	8001dc8 <HAL_RCC_OscConfig+0x140>
 8001dc2:	68e3      	ldr	r3, [r4, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d1aa      	bne.n	8001d1e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	21f8      	movs	r1, #248	@ 0xf8
 8001dca:	682a      	ldr	r2, [r5, #0]
 8001dcc:	6923      	ldr	r3, [r4, #16]
 8001dce:	438a      	bics	r2, r1
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	602b      	str	r3, [r5, #0]
 8001dd6:	e763      	b.n	8001ca0 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd8:	68e2      	ldr	r2, [r4, #12]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d00f      	beq.n	8001e00 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001de0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4313      	orrs	r3, r2
 8001de6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001de8:	f7ff fb62 	bl	80014b0 <HAL_GetTick>
 8001dec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	682b      	ldr	r3, [r5, #0]
 8001df0:	423b      	tst	r3, r7
 8001df2:	d1e9      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff fb5c 	bl	80014b0 <HAL_GetTick>
 8001df8:	1b80      	subs	r0, r0, r6
 8001dfa:	2802      	cmp	r0, #2
 8001dfc:	d9f7      	bls.n	8001dee <HAL_RCC_OscConfig+0x166>
 8001dfe:	e7a5      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8001e00:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001e04:	439a      	bics	r2, r3
 8001e06:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb52 	bl	80014b0 <HAL_GetTick>
 8001e0c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	423b      	tst	r3, r7
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_OscConfig+0x18e>
 8001e14:	e744      	b.n	8001ca0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fb4b 	bl	80014b0 <HAL_GetTick>
 8001e1a:	1b80      	subs	r0, r0, r6
 8001e1c:	2802      	cmp	r0, #2
 8001e1e:	d9f6      	bls.n	8001e0e <HAL_RCC_OscConfig+0x186>
 8001e20:	e794      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e22:	69e2      	ldr	r2, [r4, #28]
 8001e24:	2301      	movs	r3, #1
 8001e26:	4d59      	ldr	r5, [pc, #356]	@ (8001f8c <HAL_RCC_OscConfig+0x304>)
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001e2c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001e30:	4313      	orrs	r3, r2
 8001e32:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001e34:	f7ff fb3c 	bl	80014b0 <HAL_GetTick>
 8001e38:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001e3c:	423b      	tst	r3, r7
 8001e3e:	d000      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1ba>
 8001e40:	e732      	b.n	8001ca8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e42:	f7ff fb35 	bl	80014b0 <HAL_GetTick>
 8001e46:	1b80      	subs	r0, r0, r6
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	d9f6      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1b2>
 8001e4c:	e77e      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001e52:	439a      	bics	r2, r3
 8001e54:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb2b 	bl	80014b0 <HAL_GetTick>
 8001e5a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001e5e:	423b      	tst	r3, r7
 8001e60:	d100      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1dc>
 8001e62:	e721      	b.n	8001ca8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fb24 	bl	80014b0 <HAL_GetTick>
 8001e68:	1b80      	subs	r0, r0, r6
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d9f6      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1d4>
 8001e6e:	e76d      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e70:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e74:	4d45      	ldr	r5, [pc, #276]	@ (8001f8c <HAL_RCC_OscConfig+0x304>)
 8001e76:	0552      	lsls	r2, r2, #21
 8001e78:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7c:	4213      	tst	r3, r2
 8001e7e:	d108      	bne.n	8001e92 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	69eb      	ldr	r3, [r5, #28]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61eb      	str	r3, [r5, #28]
 8001e86:	69eb      	ldr	r3, [r5, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	9303      	str	r3, [sp, #12]
 8001e8c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	2780      	movs	r7, #128	@ 0x80
 8001e94:	4e40      	ldr	r6, [pc, #256]	@ (8001f98 <HAL_RCC_OscConfig+0x310>)
 8001e96:	007f      	lsls	r7, r7, #1
 8001e98:	6833      	ldr	r3, [r6, #0]
 8001e9a:	423b      	tst	r3, r7
 8001e9c:	d015      	beq.n	8001eca <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9e:	68a3      	ldr	r3, [r4, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d122      	bne.n	8001eea <HAL_RCC_OscConfig+0x262>
 8001ea4:	6a2a      	ldr	r2, [r5, #32]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fb01 	bl	80014b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001eb0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	6a2b      	ldr	r3, [r5, #32]
 8001eb4:	423b      	tst	r3, r7
 8001eb6:	d03f      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8001eb8:	9b00      	ldr	r3, [sp, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d000      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x238>
 8001ebe:	e6f7      	b.n	8001cb0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	69eb      	ldr	r3, [r5, #28]
 8001ec2:	4a36      	ldr	r2, [pc, #216]	@ (8001f9c <HAL_RCC_OscConfig+0x314>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61eb      	str	r3, [r5, #28]
 8001ec8:	e6f2      	b.n	8001cb0 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eca:	6833      	ldr	r3, [r6, #0]
 8001ecc:	433b      	orrs	r3, r7
 8001ece:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ed0:	f7ff faee 	bl	80014b0 <HAL_GetTick>
 8001ed4:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	6833      	ldr	r3, [r6, #0]
 8001ed8:	423b      	tst	r3, r7
 8001eda:	d1e0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7ff fae8 	bl	80014b0 <HAL_GetTick>
 8001ee0:	9b01      	ldr	r3, [sp, #4]
 8001ee2:	1ac0      	subs	r0, r0, r3
 8001ee4:	2864      	cmp	r0, #100	@ 0x64
 8001ee6:	d9f6      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x24e>
 8001ee8:	e730      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <HAL_RCC_OscConfig+0x292>
 8001ef0:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef2:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	622b      	str	r3, [r5, #32]
 8001ef8:	6a2b      	ldr	r3, [r5, #32]
 8001efa:	3203      	adds	r2, #3
 8001efc:	4393      	bics	r3, r2
 8001efe:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001f00:	f7ff fad6 	bl	80014b0 <HAL_GetTick>
 8001f04:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f06:	6a2b      	ldr	r3, [r5, #32]
 8001f08:	423b      	tst	r3, r7
 8001f0a:	d0d5      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fad0 	bl	80014b0 <HAL_GetTick>
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <HAL_RCC_OscConfig+0x318>)
 8001f12:	1b80      	subs	r0, r0, r6
 8001f14:	4298      	cmp	r0, r3
 8001f16:	d9f6      	bls.n	8001f06 <HAL_RCC_OscConfig+0x27e>
 8001f18:	e718      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2a2>
 8001f1e:	6a29      	ldr	r1, [r5, #32]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	430b      	orrs	r3, r1
 8001f24:	622b      	str	r3, [r5, #32]
 8001f26:	6a2b      	ldr	r3, [r5, #32]
 8001f28:	e7bd      	b.n	8001ea6 <HAL_RCC_OscConfig+0x21e>
 8001f2a:	6a2b      	ldr	r3, [r5, #32]
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	2204      	movs	r2, #4
 8001f30:	622b      	str	r3, [r5, #32]
 8001f32:	6a2b      	ldr	r3, [r5, #32]
 8001f34:	4393      	bics	r3, r2
 8001f36:	e7b7      	b.n	8001ea8 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7ff faba 	bl	80014b0 <HAL_GetTick>
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_RCC_OscConfig+0x318>)
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	4298      	cmp	r0, r3
 8001f42:	d9b6      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x22a>
 8001f44:	e702      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f46:	f7ff fab3 	bl	80014b0 <HAL_GetTick>
 8001f4a:	1b80      	subs	r0, r0, r6
 8001f4c:	2802      	cmp	r0, #2
 8001f4e:	d800      	bhi.n	8001f52 <HAL_RCC_OscConfig+0x2ca>
 8001f50:	e6c1      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4e>
 8001f52:	e6fb      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f54:	3205      	adds	r2, #5
 8001f56:	d103      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f58:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001f5a:	439a      	bics	r2, r3
 8001f5c:	636a      	str	r2, [r5, #52]	@ 0x34
 8001f5e:	e6be      	b.n	8001cde <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f60:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f62:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f64:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001f66:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f68:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001f6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001f70:	f7ff fa9e 	bl	80014b0 <HAL_GetTick>
 8001f74:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f76:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001f78:	423b      	tst	r3, r7
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2f6>
 8001f7c:	e6b6      	b.n	8001cec <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f7e:	f7ff fa97 	bl	80014b0 <HAL_GetTick>
 8001f82:	1b80      	subs	r0, r0, r6
 8001f84:	2802      	cmp	r0, #2
 8001f86:	d9f6      	bls.n	8001f76 <HAL_RCC_OscConfig+0x2ee>
 8001f88:	e6e0      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	fffeffff 	.word	0xfffeffff
 8001f94:	fffbffff 	.word	0xfffbffff
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	efffffff 	.word	0xefffffff
 8001fa0:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa4:	210c      	movs	r1, #12
 8001fa6:	4d34      	ldr	r5, [pc, #208]	@ (8002078 <HAL_RCC_OscConfig+0x3f0>)
 8001fa8:	686a      	ldr	r2, [r5, #4]
 8001faa:	400a      	ands	r2, r1
 8001fac:	2a08      	cmp	r2, #8
 8001fae:	d047      	beq.n	8002040 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	4a32      	ldr	r2, [pc, #200]	@ (800207c <HAL_RCC_OscConfig+0x3f4>)
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d132      	bne.n	800201c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4013      	ands	r3, r2
 8001fbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fa77 	bl	80014b0 <HAL_GetTick>
 8001fc2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	04bf      	lsls	r7, r7, #18
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	423b      	tst	r3, r7
 8001fca:	d121      	bne.n	8002010 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fcc:	220f      	movs	r2, #15
 8001fce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001fdc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001fde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001fe0:	686a      	ldr	r2, [r5, #4]
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	4926      	ldr	r1, [pc, #152]	@ (8002080 <HAL_RCC_OscConfig+0x3f8>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	682a      	ldr	r2, [r5, #0]
 8001ff0:	045b      	lsls	r3, r3, #17
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fa5b 	bl	80014b0 <HAL_GetTick>
 8001ffa:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	682b      	ldr	r3, [r5, #0]
 8001ffe:	4233      	tst	r3, r6
 8002000:	d000      	beq.n	8002004 <HAL_RCC_OscConfig+0x37c>
 8002002:	e677      	b.n	8001cf4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fa54 	bl	80014b0 <HAL_GetTick>
 8002008:	1b00      	subs	r0, r0, r4
 800200a:	2802      	cmp	r0, #2
 800200c:	d9f6      	bls.n	8001ffc <HAL_RCC_OscConfig+0x374>
 800200e:	e69d      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fa4e 	bl	80014b0 <HAL_GetTick>
 8002014:	1b80      	subs	r0, r0, r6
 8002016:	2802      	cmp	r0, #2
 8002018:	d9d5      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x33e>
 800201a:	e697      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 800201c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002020:	4013      	ands	r3, r2
 8002022:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002024:	f7ff fa44 	bl	80014b0 <HAL_GetTick>
 8002028:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	04b6      	lsls	r6, r6, #18
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	4233      	tst	r3, r6
 8002030:	d100      	bne.n	8002034 <HAL_RCC_OscConfig+0x3ac>
 8002032:	e65f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff fa3c 	bl	80014b0 <HAL_GetTick>
 8002038:	1b00      	subs	r0, r0, r4
 800203a:	2802      	cmp	r0, #2
 800203c:	d9f6      	bls.n	800202c <HAL_RCC_OscConfig+0x3a4>
 800203e:	e685      	b.n	8001d4c <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002040:	2b01      	cmp	r3, #1
 8002042:	d100      	bne.n	8002046 <HAL_RCC_OscConfig+0x3be>
 8002044:	e66b      	b.n	8001d1e <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8002048:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800204c:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 800204e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002050:	4002      	ands	r2, r0
 8002052:	428a      	cmp	r2, r1
 8002054:	d000      	beq.n	8002058 <HAL_RCC_OscConfig+0x3d0>
 8002056:	e662      	b.n	8001d1e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002058:	220f      	movs	r2, #15
 800205a:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800205e:	4293      	cmp	r3, r2
 8002060:	d000      	beq.n	8002064 <HAL_RCC_OscConfig+0x3dc>
 8002062:	e65c      	b.n	8001d1e <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002064:	23f0      	movs	r3, #240	@ 0xf0
 8002066:	039b      	lsls	r3, r3, #14
 8002068:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800206a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800206c:	1ac0      	subs	r0, r0, r3
 800206e:	1e43      	subs	r3, r0, #1
 8002070:	4198      	sbcs	r0, r3
 8002072:	b2c0      	uxtb	r0, r0
 8002074:	e66b      	b.n	8001d4e <HAL_RCC_OscConfig+0xc6>
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	40021000 	.word	0x40021000
 800207c:	feffffff 	.word	0xfeffffff
 8002080:	ffc2ffff 	.word	0xffc2ffff

08002084 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002084:	220c      	movs	r2, #12
{
 8002086:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002088:	4d0c      	ldr	r5, [pc, #48]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x38>)
 800208a:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	401a      	ands	r2, r3
 800208e:	2a08      	cmp	r2, #8
 8002090:	d111      	bne.n	80020b6 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002092:	200f      	movs	r0, #15
 8002094:	490a      	ldr	r1, [pc, #40]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002096:	0c9a      	lsrs	r2, r3, #18
 8002098:	4002      	ands	r2, r0
 800209a:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800209c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800209e:	03db      	lsls	r3, r3, #15
 80020a0:	d507      	bpl.n	80020b2 <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0x40>)
 80020a4:	4002      	ands	r2, r0
 80020a6:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a8:	4807      	ldr	r0, [pc, #28]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x44>)
 80020aa:	f7fe f849 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020ae:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020b2:	4806      	ldr	r0, [pc, #24]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x48>)
 80020b4:	e7fb      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 80020b6:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 80020b8:	e7fa      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08003154 	.word	0x08003154
 80020c4:	08003144 	.word	0x08003144
 80020c8:	007a1200 	.word	0x007a1200
 80020cc:	003d0900 	.word	0x003d0900

080020d0 <HAL_RCC_ClockConfig>:
{
 80020d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020d2:	0004      	movs	r4, r0
 80020d4:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80020da:	2001      	movs	r0, #1
}
 80020dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020de:	2201      	movs	r2, #1
 80020e0:	4d37      	ldr	r5, [pc, #220]	@ (80021c0 <HAL_RCC_ClockConfig+0xf0>)
 80020e2:	682b      	ldr	r3, [r5, #0]
 80020e4:	4013      	ands	r3, r2
 80020e6:	428b      	cmp	r3, r1
 80020e8:	d31c      	bcc.n	8002124 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ea:	6822      	ldr	r2, [r4, #0]
 80020ec:	0793      	lsls	r3, r2, #30
 80020ee:	d422      	bmi.n	8002136 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f0:	07d2      	lsls	r2, r2, #31
 80020f2:	d42f      	bmi.n	8002154 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	2301      	movs	r3, #1
 80020f6:	682a      	ldr	r2, [r5, #0]
 80020f8:	401a      	ands	r2, r3
 80020fa:	42b2      	cmp	r2, r6
 80020fc:	d851      	bhi.n	80021a2 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	4d30      	ldr	r5, [pc, #192]	@ (80021c4 <HAL_RCC_ClockConfig+0xf4>)
 8002102:	075b      	lsls	r3, r3, #29
 8002104:	d454      	bmi.n	80021b0 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002106:	f7ff ffbd 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800210a:	686b      	ldr	r3, [r5, #4]
 800210c:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <HAL_RCC_ClockConfig+0xf8>)
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	0f1b      	lsrs	r3, r3, #28
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	492d      	ldr	r1, [pc, #180]	@ (80021cc <HAL_RCC_ClockConfig+0xfc>)
 8002116:	40d8      	lsrs	r0, r3
 8002118:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800211a:	2003      	movs	r0, #3
 800211c:	f7ff f988 	bl	8001430 <HAL_InitTick>
  return HAL_OK;
 8002120:	2000      	movs	r0, #0
 8002122:	e7db      	b.n	80020dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	4393      	bics	r3, r2
 8002128:	430b      	orrs	r3, r1
 800212a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	4013      	ands	r3, r2
 8002130:	428b      	cmp	r3, r1
 8002132:	d1d2      	bne.n	80020da <HAL_RCC_ClockConfig+0xa>
 8002134:	e7d9      	b.n	80020ea <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	4923      	ldr	r1, [pc, #140]	@ (80021c4 <HAL_RCC_ClockConfig+0xf4>)
 8002138:	0753      	lsls	r3, r2, #29
 800213a:	d504      	bpl.n	8002146 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800213c:	23e0      	movs	r3, #224	@ 0xe0
 800213e:	6848      	ldr	r0, [r1, #4]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4303      	orrs	r3, r0
 8002144:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002146:	20f0      	movs	r0, #240	@ 0xf0
 8002148:	684b      	ldr	r3, [r1, #4]
 800214a:	4383      	bics	r3, r0
 800214c:	68a0      	ldr	r0, [r4, #8]
 800214e:	4303      	orrs	r3, r0
 8002150:	604b      	str	r3, [r1, #4]
 8002152:	e7cd      	b.n	80020f0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	4f1b      	ldr	r7, [pc, #108]	@ (80021c4 <HAL_RCC_ClockConfig+0xf4>)
 8002156:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	2a01      	cmp	r2, #1
 800215c:	d119      	bne.n	8002192 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	d5bb      	bpl.n	80020da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	2103      	movs	r1, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	438b      	bics	r3, r1
 8002168:	4313      	orrs	r3, r2
 800216a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 800216c:	f7ff f9a0 	bl	80014b0 <HAL_GetTick>
 8002170:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	230c      	movs	r3, #12
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	401a      	ands	r2, r3
 8002178:	6863      	ldr	r3, [r4, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d0b9      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7ff f996 	bl	80014b0 <HAL_GetTick>
 8002184:	9b01      	ldr	r3, [sp, #4]
 8002186:	1ac0      	subs	r0, r0, r3
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_RCC_ClockConfig+0x100>)
 800218a:	4298      	cmp	r0, r3
 800218c:	d9f1      	bls.n	8002172 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800218e:	2003      	movs	r0, #3
 8002190:	e7a4      	b.n	80020dc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	2a02      	cmp	r2, #2
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	019b      	lsls	r3, r3, #6
 8002198:	d4e3      	bmi.n	8002162 <HAL_RCC_ClockConfig+0x92>
 800219a:	e79e      	b.n	80020da <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	079b      	lsls	r3, r3, #30
 800219e:	d4e0      	bmi.n	8002162 <HAL_RCC_ClockConfig+0x92>
 80021a0:	e79b      	b.n	80020da <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	682a      	ldr	r2, [r5, #0]
 80021a4:	439a      	bics	r2, r3
 80021a6:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a8:	682a      	ldr	r2, [r5, #0]
 80021aa:	421a      	tst	r2, r3
 80021ac:	d0a7      	beq.n	80020fe <HAL_RCC_ClockConfig+0x2e>
 80021ae:	e794      	b.n	80020da <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	686b      	ldr	r3, [r5, #4]
 80021b2:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_RCC_ClockConfig+0x104>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	68e2      	ldr	r2, [r4, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	606b      	str	r3, [r5, #4]
 80021bc:	e7a3      	b.n	8002106 <HAL_RCC_ClockConfig+0x36>
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08003134 	.word	0x08003134
 80021cc:	20000000 	.word	0x20000000
 80021d0:	00001388 	.word	0x00001388
 80021d4:	fffff8ff 	.word	0xfffff8ff

080021d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4905      	ldr	r1, [pc, #20]	@ (80021f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021e0:	055b      	lsls	r3, r3, #21
 80021e2:	0f5b      	lsrs	r3, r3, #29
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	6810      	ldr	r0, [r2, #0]
 80021e8:	40d8      	lsrs	r0, r3
}    
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	0800312c 	.word	0x0800312c

080021f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021fa:	6803      	ldr	r3, [r0, #0]
{
 80021fc:	0005      	movs	r5, r0
 80021fe:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002200:	03db      	lsls	r3, r3, #15
 8002202:	d52b      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002204:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002208:	4c38      	ldr	r4, [pc, #224]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800220a:	0552      	lsls	r2, r2, #21
 800220c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800220e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002210:	4213      	tst	r3, r2
 8002212:	d108      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	69e3      	ldr	r3, [r4, #28]
 8002216:	4313      	orrs	r3, r2
 8002218:	61e3      	str	r3, [r4, #28]
 800221a:	69e3      	ldr	r3, [r4, #28]
 800221c:	4013      	ands	r3, r2
 800221e:	9303      	str	r3, [sp, #12]
 8002220:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	2780      	movs	r7, #128	@ 0x80
 8002228:	4e31      	ldr	r6, [pc, #196]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800222a:	007f      	lsls	r7, r7, #1
 800222c:	6833      	ldr	r3, [r6, #0]
 800222e:	423b      	tst	r3, r7
 8002230:	d022      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002232:	6a21      	ldr	r1, [r4, #32]
 8002234:	22c0      	movs	r2, #192	@ 0xc0
 8002236:	0008      	movs	r0, r1
 8002238:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800223a:	686b      	ldr	r3, [r5, #4]
 800223c:	4e2d      	ldr	r6, [pc, #180]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800223e:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002240:	4211      	tst	r1, r2
 8002242:	d12b      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002244:	6a23      	ldr	r3, [r4, #32]
 8002246:	686a      	ldr	r2, [r5, #4]
 8002248:	4033      	ands	r3, r6
 800224a:	4313      	orrs	r3, r2
 800224c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d103      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	69e3      	ldr	r3, [r4, #28]
 8002256:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002258:	4013      	ands	r3, r2
 800225a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225c:	682a      	ldr	r2, [r5, #0]
 800225e:	07d3      	lsls	r3, r2, #31
 8002260:	d506      	bpl.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002262:	2003      	movs	r0, #3
 8002264:	4921      	ldr	r1, [pc, #132]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002266:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8002268:	4383      	bics	r3, r0
 800226a:	68a8      	ldr	r0, [r5, #8]
 800226c:	4303      	orrs	r3, r0
 800226e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	0692      	lsls	r2, r2, #26
 8002272:	d433      	bmi.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
 8002276:	e00f      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002278:	6833      	ldr	r3, [r6, #0]
 800227a:	433b      	orrs	r3, r7
 800227c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800227e:	f7ff f917 	bl	80014b0 <HAL_GetTick>
 8002282:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	6833      	ldr	r3, [r6, #0]
 8002286:	423b      	tst	r3, r7
 8002288:	d1d3      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7ff f911 	bl	80014b0 <HAL_GetTick>
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	1ac0      	subs	r0, r0, r3
 8002292:	2864      	cmp	r0, #100	@ 0x64
 8002294:	d9f6      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
}
 8002298:	b005      	add	sp, #20
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800229c:	4013      	ands	r3, r2
 800229e:	4283      	cmp	r3, r0
 80022a0:	d0d0      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a2:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a6:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a8:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80022aa:	0252      	lsls	r2, r2, #9
 80022ac:	4302      	orrs	r2, r0
 80022ae:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b0:	6a22      	ldr	r2, [r4, #32]
 80022b2:	4812      	ldr	r0, [pc, #72]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b4:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b6:	4002      	ands	r2, r0
 80022b8:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 80022ba:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022bc:	07db      	lsls	r3, r3, #31
 80022be:	d5c1      	bpl.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 80022c0:	f7ff f8f6 	bl	80014b0 <HAL_GetTick>
 80022c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	2202      	movs	r2, #2
 80022c8:	6a23      	ldr	r3, [r4, #32]
 80022ca:	4213      	tst	r3, r2
 80022cc:	d1ba      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7ff f8ef 	bl	80014b0 <HAL_GetTick>
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80022d4:	1bc0      	subs	r0, r0, r7
 80022d6:	4298      	cmp	r0, r3
 80022d8:	d9f5      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80022da:	e7dc      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022dc:	2110      	movs	r1, #16
 80022de:	4a03      	ldr	r2, [pc, #12]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80022e0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80022e2:	438b      	bics	r3, r1
 80022e4:	68e9      	ldr	r1, [r5, #12]
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	e7c3      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	fffffcff 	.word	0xfffffcff
 80022f8:	efffffff 	.word	0xefffffff
 80022fc:	fffeffff 	.word	0xfffeffff
 8002300:	00001388 	.word	0x00001388

08002304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002304:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002306:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	2201      	movs	r2, #1
 800230c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002310:	6801      	ldr	r1, [r0, #0]
 8002312:	4d12      	ldr	r5, [pc, #72]	@ (800235c <UART_EndRxTransfer+0x58>)
 8002314:	680b      	ldr	r3, [r1, #0]
 8002316:	402b      	ands	r3, r5
 8002318:	600b      	str	r3, [r1, #0]
 800231a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002322:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002326:	6801      	ldr	r1, [r0, #0]
 8002328:	688b      	ldr	r3, [r1, #8]
 800232a:	4393      	bics	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
 800232e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002332:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002334:	4293      	cmp	r3, r2
 8002336:	d10a      	bne.n	800234e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002338:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002340:	2410      	movs	r4, #16
 8002342:	6802      	ldr	r2, [r0, #0]
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	43a3      	bics	r3, r4
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800234e:	2220      	movs	r2, #32
 8002350:	1d03      	adds	r3, r0, #4
 8002352:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002354:	2300      	movs	r3, #0
 8002356:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002358:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800235a:	bd30      	pop	{r4, r5, pc}
 800235c:	fffffedf 	.word	0xfffffedf

08002360 <UART_SetConfig>:
{
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002364:	6925      	ldr	r5, [r4, #16]
 8002366:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002368:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800236a:	432a      	orrs	r2, r5
 800236c:	6965      	ldr	r5, [r4, #20]
 800236e:	69c3      	ldr	r3, [r0, #28]
 8002370:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002372:	6808      	ldr	r0, [r1, #0]
 8002374:	4d38      	ldr	r5, [pc, #224]	@ (8002458 <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002376:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002378:	4028      	ands	r0, r5
 800237a:	4302      	orrs	r2, r0
 800237c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237e:	684a      	ldr	r2, [r1, #4]
 8002380:	4836      	ldr	r0, [pc, #216]	@ (800245c <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 8002382:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002384:	4002      	ands	r2, r0
 8002386:	68e0      	ldr	r0, [r4, #12]
 8002388:	4302      	orrs	r2, r0
 800238a:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800238c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800238e:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002390:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002392:	4d33      	ldr	r5, [pc, #204]	@ (8002460 <UART_SetConfig+0x100>)
 8002394:	4028      	ands	r0, r5
 8002396:	4302      	orrs	r2, r0
 8002398:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800239a:	2103      	movs	r1, #3
 800239c:	4a31      	ldr	r2, [pc, #196]	@ (8002464 <UART_SetConfig+0x104>)
 800239e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023a0:	400a      	ands	r2, r1
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	3a01      	subs	r2, #1
 80023a6:	0209      	lsls	r1, r1, #8
 80023a8:	2a02      	cmp	r2, #2
 80023aa:	d849      	bhi.n	8002440 <UART_SetConfig+0xe0>
 80023ac:	482e      	ldr	r0, [pc, #184]	@ (8002468 <UART_SetConfig+0x108>)
 80023ae:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d121      	bne.n	80023f8 <UART_SetConfig+0x98>
    switch (clocksource)
 80023b4:	2808      	cmp	r0, #8
 80023b6:	d841      	bhi.n	800243c <UART_SetConfig+0xdc>
 80023b8:	f7fd feae 	bl	8000118 <__gnu_thumb1_case_uqi>
 80023bc:	40084044 	.word	0x40084044
 80023c0:	40404005 	.word	0x40404005
 80023c4:	09          	.byte	0x09
 80023c5:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 80023c6:	f7ff fe5d 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 80023ca:	e03d      	b.n	8002448 <UART_SetConfig+0xe8>
    switch (clocksource)
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ce:	6861      	ldr	r1, [r4, #4]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	0848      	lsrs	r0, r1, #1
 80023d4:	1818      	adds	r0, r3, r0
 80023d6:	f7fd feb3 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023da:	0002      	movs	r2, r0
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <UART_SetConfig+0x110>)
 80023de:	3a10      	subs	r2, #16
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d82b      	bhi.n	800243c <UART_SetConfig+0xdc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023e4:	230f      	movs	r3, #15
 80023e6:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e8:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ea:	439a      	bics	r2, r3
 80023ec:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023ee:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80023f0:	6822      	ldr	r2, [r4, #0]
 80023f2:	4303      	orrs	r3, r0
 80023f4:	60d3      	str	r3, [r2, #12]
 80023f6:	e029      	b.n	800244c <UART_SetConfig+0xec>
    switch (clocksource)
 80023f8:	2808      	cmp	r0, #8
 80023fa:	d81f      	bhi.n	800243c <UART_SetConfig+0xdc>
 80023fc:	f7fd fe8c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002400:	1e051e13 	.word	0x1e051e13
 8002404:	1e1e1e18 	.word	0x1e1e1e18
 8002408:	1b          	.byte	0x1b
 8002409:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 800240a:	4818      	ldr	r0, [pc, #96]	@ (800246c <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800240c:	6861      	ldr	r1, [r4, #4]
 800240e:	084b      	lsrs	r3, r1, #1
 8002410:	1818      	adds	r0, r3, r0
 8002412:	f7fd fe95 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002416:	0002      	movs	r2, r0
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <UART_SetConfig+0x110>)
 800241a:	3a10      	subs	r2, #16
 800241c:	429a      	cmp	r2, r3
 800241e:	d80d      	bhi.n	800243c <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	60d8      	str	r0, [r3, #12]
 8002424:	e012      	b.n	800244c <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002426:	f7ff fed7 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800242a:	2800      	cmp	r0, #0
 800242c:	d00e      	beq.n	800244c <UART_SetConfig+0xec>
 800242e:	e7ed      	b.n	800240c <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8002430:	f7ff fe28 	bl	8002084 <HAL_RCC_GetSysClockFreq>
        break;
 8002434:	e7f9      	b.n	800242a <UART_SetConfig+0xca>
    switch (clocksource)
 8002436:	2080      	movs	r0, #128	@ 0x80
 8002438:	0200      	lsls	r0, r0, #8
 800243a:	e7e7      	b.n	800240c <UART_SetConfig+0xac>
        ret = HAL_ERROR;
 800243c:	2001      	movs	r0, #1
 800243e:	e006      	b.n	800244e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002440:	428b      	cmp	r3, r1
 8002442:	d1f0      	bne.n	8002426 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002444:	f7ff fec8 	bl	80021d8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002448:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800244a:	d1c0      	bne.n	80023ce <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 800244c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800244e:	2300      	movs	r3, #0
 8002450:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002452:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	ffff69f3 	.word	0xffff69f3
 800245c:	ffffcfff 	.word	0xffffcfff
 8002460:	fffff4ff 	.word	0xfffff4ff
 8002464:	40021000 	.word	0x40021000
 8002468:	08003164 	.word	0x08003164
 800246c:	007a1200 	.word	0x007a1200
 8002470:	0000ffef 	.word	0x0000ffef

08002474 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002474:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002476:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002478:	071a      	lsls	r2, r3, #28
 800247a:	d506      	bpl.n	800248a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800247c:	6801      	ldr	r1, [r0, #0]
 800247e:	4c28      	ldr	r4, [pc, #160]	@ (8002520 <UART_AdvFeatureConfig+0xac>)
 8002480:	684a      	ldr	r2, [r1, #4]
 8002482:	4022      	ands	r2, r4
 8002484:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002486:	4322      	orrs	r2, r4
 8002488:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800248a:	07da      	lsls	r2, r3, #31
 800248c:	d506      	bpl.n	800249c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800248e:	6801      	ldr	r1, [r0, #0]
 8002490:	4c24      	ldr	r4, [pc, #144]	@ (8002524 <UART_AdvFeatureConfig+0xb0>)
 8002492:	684a      	ldr	r2, [r1, #4]
 8002494:	4022      	ands	r2, r4
 8002496:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002498:	4322      	orrs	r2, r4
 800249a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800249c:	079a      	lsls	r2, r3, #30
 800249e:	d506      	bpl.n	80024ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024a0:	6801      	ldr	r1, [r0, #0]
 80024a2:	4c21      	ldr	r4, [pc, #132]	@ (8002528 <UART_AdvFeatureConfig+0xb4>)
 80024a4:	684a      	ldr	r2, [r1, #4]
 80024a6:	4022      	ands	r2, r4
 80024a8:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80024aa:	4322      	orrs	r2, r4
 80024ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024ae:	075a      	lsls	r2, r3, #29
 80024b0:	d506      	bpl.n	80024c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024b2:	6801      	ldr	r1, [r0, #0]
 80024b4:	4c1d      	ldr	r4, [pc, #116]	@ (800252c <UART_AdvFeatureConfig+0xb8>)
 80024b6:	684a      	ldr	r2, [r1, #4]
 80024b8:	4022      	ands	r2, r4
 80024ba:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80024bc:	4322      	orrs	r2, r4
 80024be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024c0:	06da      	lsls	r2, r3, #27
 80024c2:	d506      	bpl.n	80024d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024c4:	6801      	ldr	r1, [r0, #0]
 80024c6:	4c1a      	ldr	r4, [pc, #104]	@ (8002530 <UART_AdvFeatureConfig+0xbc>)
 80024c8:	688a      	ldr	r2, [r1, #8]
 80024ca:	4022      	ands	r2, r4
 80024cc:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80024ce:	4322      	orrs	r2, r4
 80024d0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024d2:	069a      	lsls	r2, r3, #26
 80024d4:	d506      	bpl.n	80024e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024d6:	6801      	ldr	r1, [r0, #0]
 80024d8:	4c16      	ldr	r4, [pc, #88]	@ (8002534 <UART_AdvFeatureConfig+0xc0>)
 80024da:	688a      	ldr	r2, [r1, #8]
 80024dc:	4022      	ands	r2, r4
 80024de:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80024e0:	4322      	orrs	r2, r4
 80024e2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024e4:	065a      	lsls	r2, r3, #25
 80024e6:	d510      	bpl.n	800250a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024e8:	6801      	ldr	r1, [r0, #0]
 80024ea:	4d13      	ldr	r5, [pc, #76]	@ (8002538 <UART_AdvFeatureConfig+0xc4>)
 80024ec:	684a      	ldr	r2, [r1, #4]
 80024ee:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80024f0:	402a      	ands	r2, r5
 80024f2:	4322      	orrs	r2, r4
 80024f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	0352      	lsls	r2, r2, #13
 80024fa:	4294      	cmp	r4, r2
 80024fc:	d105      	bne.n	800250a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024fe:	684a      	ldr	r2, [r1, #4]
 8002500:	4c0e      	ldr	r4, [pc, #56]	@ (800253c <UART_AdvFeatureConfig+0xc8>)
 8002502:	4022      	ands	r2, r4
 8002504:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002506:	4322      	orrs	r2, r4
 8002508:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	d506      	bpl.n	800251c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800250e:	6802      	ldr	r2, [r0, #0]
 8002510:	490b      	ldr	r1, [pc, #44]	@ (8002540 <UART_AdvFeatureConfig+0xcc>)
 8002512:	6853      	ldr	r3, [r2, #4]
 8002514:	400b      	ands	r3, r1
 8002516:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002518:	430b      	orrs	r3, r1
 800251a:	6053      	str	r3, [r2, #4]
}
 800251c:	bd30      	pop	{r4, r5, pc}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	ffff7fff 	.word	0xffff7fff
 8002524:	fffdffff 	.word	0xfffdffff
 8002528:	fffeffff 	.word	0xfffeffff
 800252c:	fffbffff 	.word	0xfffbffff
 8002530:	ffffefff 	.word	0xffffefff
 8002534:	ffffdfff 	.word	0xffffdfff
 8002538:	ffefffff 	.word	0xffefffff
 800253c:	ff9fffff 	.word	0xff9fffff
 8002540:	fff7ffff 	.word	0xfff7ffff

08002544 <UART_WaitOnFlagUntilTimeout>:
{
 8002544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002546:	0004      	movs	r4, r0
 8002548:	000d      	movs	r5, r1
 800254a:	0017      	movs	r7, r2
 800254c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	69d3      	ldr	r3, [r2, #28]
 8002552:	402b      	ands	r3, r5
 8002554:	1b5b      	subs	r3, r3, r5
 8002556:	4259      	negs	r1, r3
 8002558:	414b      	adcs	r3, r1
 800255a:	42bb      	cmp	r3, r7
 800255c:	d001      	beq.n	8002562 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800255e:	2000      	movs	r0, #0
 8002560:	e025      	b.n	80025ae <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002562:	9b08      	ldr	r3, [sp, #32]
 8002564:	3301      	adds	r3, #1
 8002566:	d0f3      	beq.n	8002550 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002568:	f7fe ffa2 	bl	80014b0 <HAL_GetTick>
 800256c:	9b00      	ldr	r3, [sp, #0]
 800256e:	1ac0      	subs	r0, r0, r3
 8002570:	9b08      	ldr	r3, [sp, #32]
 8002572:	4298      	cmp	r0, r3
 8002574:	d82c      	bhi.n	80025d0 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002576:	2b00      	cmp	r3, #0
 8002578:	d02a      	beq.n	80025d0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	0752      	lsls	r2, r2, #29
 8002580:	d5e5      	bpl.n	800254e <UART_WaitOnFlagUntilTimeout+0xa>
 8002582:	002a      	movs	r2, r5
 8002584:	2140      	movs	r1, #64	@ 0x40
 8002586:	3a40      	subs	r2, #64	@ 0x40
 8002588:	438a      	bics	r2, r1
 800258a:	d0e0      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	2608      	movs	r6, #8
 8002590:	0011      	movs	r1, r2
 8002592:	4031      	ands	r1, r6
 8002594:	9101      	str	r1, [sp, #4]
 8002596:	4232      	tst	r2, r6
 8002598:	d00a      	beq.n	80025b0 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800259a:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800259c:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800259e:	f7ff feb1 	bl	8002304 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025a2:	19a3      	adds	r3, r4, r6
 80025a4:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80025a6:	2300      	movs	r3, #0
          return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80025aa:	3478      	adds	r4, #120	@ 0x78
 80025ac:	7023      	strb	r3, [r4, #0]
}
 80025ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	69d9      	ldr	r1, [r3, #28]
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	4211      	tst	r1, r2
 80025b8:	d0c9      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ba:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80025bc:	0020      	movs	r0, r4
 80025be:	f7ff fea1 	bl	8002304 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025c2:	0023      	movs	r3, r4
 80025c4:	2220      	movs	r2, #32
 80025c6:	3308      	adds	r3, #8
 80025c8:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80025ca:	9b01      	ldr	r3, [sp, #4]
 80025cc:	3478      	adds	r4, #120	@ 0x78
 80025ce:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80025d0:	2003      	movs	r0, #3
 80025d2:	e7ec      	b.n	80025ae <UART_WaitOnFlagUntilTimeout+0x6a>

080025d4 <HAL_UART_Transmit>:
{
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	b087      	sub	sp, #28
 80025d8:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80025da:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80025dc:	0004      	movs	r4, r0
 80025de:	000d      	movs	r5, r1
 80025e0:	0017      	movs	r7, r2
    return HAL_BUSY;
 80025e2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d138      	bne.n	800265a <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 80025e8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80025ea:	2900      	cmp	r1, #0
 80025ec:	d035      	beq.n	800265a <HAL_UART_Transmit+0x86>
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d033      	beq.n	800265a <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	68a2      	ldr	r2, [r4, #8]
 80025f6:	015b      	lsls	r3, r3, #5
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d104      	bne.n	8002606 <HAL_UART_Transmit+0x32>
 80025fc:	6923      	ldr	r3, [r4, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002602:	4201      	tst	r1, r0
 8002604:	d129      	bne.n	800265a <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002606:	0023      	movs	r3, r4
 8002608:	2600      	movs	r6, #0
 800260a:	3308      	adds	r3, #8
 800260c:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260e:	2321      	movs	r3, #33	@ 0x21
 8002610:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002612:	f7fe ff4d 	bl	80014b0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002616:	0023      	movs	r3, r4
 8002618:	3350      	adds	r3, #80	@ 0x50
 800261a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800261c:	3302      	adds	r3, #2
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002626:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	015b      	lsls	r3, r3, #5
 800262a:	429a      	cmp	r2, r3
 800262c:	d104      	bne.n	8002638 <HAL_UART_Transmit+0x64>
 800262e:	6923      	ldr	r3, [r4, #16]
 8002630:	42b3      	cmp	r3, r6
 8002632:	d101      	bne.n	8002638 <HAL_UART_Transmit+0x64>
 8002634:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002636:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002638:	0023      	movs	r3, r4
 800263a:	3352      	adds	r3, #82	@ 0x52
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002644:	9b05      	ldr	r3, [sp, #20]
 8002646:	2140      	movs	r1, #64	@ 0x40
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	0020      	movs	r0, r4
 800264c:	9b04      	ldr	r3, [sp, #16]
 800264e:	f7ff ff79 	bl	8002544 <UART_WaitOnFlagUntilTimeout>
 8002652:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002654:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	2800      	cmp	r0, #0
 8002658:	d10d      	bne.n	8002676 <HAL_UART_Transmit+0xa2>
}
 800265a:	b007      	add	sp, #28
 800265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	9b05      	ldr	r3, [sp, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2180      	movs	r1, #128	@ 0x80
 8002666:	0020      	movs	r0, r4
 8002668:	9b04      	ldr	r3, [sp, #16]
 800266a:	f7ff ff6b 	bl	8002544 <UART_WaitOnFlagUntilTimeout>
 800266e:	2800      	cmp	r0, #0
 8002670:	d003      	beq.n	800267a <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8002672:	2320      	movs	r3, #32
 8002674:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8002676:	2003      	movs	r0, #3
 8002678:	e7ef      	b.n	800265a <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800267c:	2d00      	cmp	r5, #0
 800267e:	d10b      	bne.n	8002698 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002680:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002682:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002684:	05db      	lsls	r3, r3, #23
 8002686:	0ddb      	lsrs	r3, r3, #23
 8002688:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800268a:	9b03      	ldr	r3, [sp, #12]
 800268c:	9a03      	ldr	r2, [sp, #12]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	8013      	strh	r3, [r2, #0]
 8002696:	e7cf      	b.n	8002638 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002698:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800269a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800269c:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 800269e:	e7f4      	b.n	800268a <HAL_UART_Transmit+0xb6>

080026a0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	0003      	movs	r3, r0
{
 80026a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	2500      	movs	r5, #0
{
 80026a6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	3308      	adds	r3, #8
 80026aa:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80026ac:	f7fe ff00 	bl	80014b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026b0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80026b2:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	071b      	lsls	r3, r3, #28
 80026b8:	d51d      	bpl.n	80026f6 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <UART_CheckIdleState+0xb8>)
 80026be:	002a      	movs	r2, r5
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	0389      	lsls	r1, r1, #14
 80026c4:	0003      	movs	r3, r0
 80026c6:	0020      	movs	r0, r4
 80026c8:	f7ff ff3c 	bl	8002544 <UART_WaitOnFlagUntilTimeout>
 80026cc:	42a8      	cmp	r0, r5
 80026ce:	d012      	beq.n	80026f6 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	2301      	movs	r3, #1
 80026d6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80026da:	2080      	movs	r0, #128	@ 0x80
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	4383      	bics	r3, r0
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80026e8:	2320      	movs	r3, #32
 80026ea:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80026ec:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80026ee:	2300      	movs	r3, #0
 80026f0:	3478      	adds	r4, #120	@ 0x78
 80026f2:	7023      	strb	r3, [r4, #0]
}
 80026f4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026f6:	0025      	movs	r5, r4
 80026f8:	cd08      	ldmia	r5!, {r3}
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	075b      	lsls	r3, r3, #29
 80026fe:	d523      	bpl.n	8002748 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <UART_CheckIdleState+0xb8>)
 8002704:	2200      	movs	r2, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	0020      	movs	r0, r4
 800270a:	0033      	movs	r3, r6
 800270c:	03c9      	lsls	r1, r1, #15
 800270e:	f7ff ff19 	bl	8002544 <UART_WaitOnFlagUntilTimeout>
 8002712:	2800      	cmp	r0, #0
 8002714:	d018      	beq.n	8002748 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002716:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	2201      	movs	r2, #1
 800271c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002720:	6821      	ldr	r1, [r4, #0]
 8002722:	4e0e      	ldr	r6, [pc, #56]	@ (800275c <UART_CheckIdleState+0xbc>)
 8002724:	680b      	ldr	r3, [r1, #0]
 8002726:	4033      	ands	r3, r6
 8002728:	600b      	str	r3, [r1, #0]
 800272a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	688b      	ldr	r3, [r1, #8]
 800273a:	4393      	bics	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
 800273e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002742:	2320      	movs	r3, #32
 8002744:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002746:	e7d1      	b.n	80026ec <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002748:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800274c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800274e:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002750:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002752:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002754:	e7cb      	b.n	80026ee <UART_CheckIdleState+0x4e>
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	01ffffff 	.word	0x01ffffff
 800275c:	fffffedf 	.word	0xfffffedf

08002760 <HAL_UART_Init>:
{
 8002760:	b510      	push	{r4, lr}
 8002762:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002764:	d101      	bne.n	800276a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
}
 8002768:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800276a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002770:	0002      	movs	r2, r0
 8002772:	3278      	adds	r2, #120	@ 0x78
 8002774:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002776:	f7fe fdd5 	bl	8001324 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800277a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800277c:	2101      	movs	r1, #1
 800277e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002780:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002782:	6813      	ldr	r3, [r2, #0]
 8002784:	438b      	bics	r3, r1
 8002786:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002788:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800278e:	0020      	movs	r0, r4
 8002790:	f7ff fe70 	bl	8002474 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002794:	0020      	movs	r0, r4
 8002796:	f7ff fde3 	bl	8002360 <UART_SetConfig>
 800279a:	2801      	cmp	r0, #1
 800279c:	d0e3      	beq.n	8002766 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	4907      	ldr	r1, [pc, #28]	@ (80027c0 <HAL_UART_Init+0x60>)
 80027a2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80027a4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a8:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	438a      	bics	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027b2:	2201      	movs	r2, #1
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80027ba:	f7ff ff71 	bl	80026a0 <UART_CheckIdleState>
 80027be:	e7d3      	b.n	8002768 <HAL_UART_Init+0x8>
 80027c0:	ffffb7ff 	.word	0xffffb7ff

080027c4 <siprintf>:
 80027c4:	b40e      	push	{r1, r2, r3}
 80027c6:	b500      	push	{lr}
 80027c8:	490b      	ldr	r1, [pc, #44]	@ (80027f8 <siprintf+0x34>)
 80027ca:	b09c      	sub	sp, #112	@ 0x70
 80027cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80027ce:	9002      	str	r0, [sp, #8]
 80027d0:	9006      	str	r0, [sp, #24]
 80027d2:	9107      	str	r1, [sp, #28]
 80027d4:	9104      	str	r1, [sp, #16]
 80027d6:	4809      	ldr	r0, [pc, #36]	@ (80027fc <siprintf+0x38>)
 80027d8:	4909      	ldr	r1, [pc, #36]	@ (8002800 <siprintf+0x3c>)
 80027da:	cb04      	ldmia	r3!, {r2}
 80027dc:	9105      	str	r1, [sp, #20]
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	a902      	add	r1, sp, #8
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	f000 f99e 	bl	8002b24 <_svfiprintf_r>
 80027e8:	2200      	movs	r2, #0
 80027ea:	9b02      	ldr	r3, [sp, #8]
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	b01c      	add	sp, #112	@ 0x70
 80027f0:	bc08      	pop	{r3}
 80027f2:	b003      	add	sp, #12
 80027f4:	4718      	bx	r3
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	7fffffff 	.word	0x7fffffff
 80027fc:	2000000c 	.word	0x2000000c
 8002800:	ffff0208 	.word	0xffff0208

08002804 <memset>:
 8002804:	0003      	movs	r3, r0
 8002806:	1882      	adds	r2, r0, r2
 8002808:	4293      	cmp	r3, r2
 800280a:	d100      	bne.n	800280e <memset+0xa>
 800280c:	4770      	bx	lr
 800280e:	7019      	strb	r1, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	e7f9      	b.n	8002808 <memset+0x4>

08002814 <__errno>:
 8002814:	4b01      	ldr	r3, [pc, #4]	@ (800281c <__errno+0x8>)
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	4770      	bx	lr
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	2000000c 	.word	0x2000000c

08002820 <__libc_init_array>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	2600      	movs	r6, #0
 8002824:	4c0c      	ldr	r4, [pc, #48]	@ (8002858 <__libc_init_array+0x38>)
 8002826:	4d0d      	ldr	r5, [pc, #52]	@ (800285c <__libc_init_array+0x3c>)
 8002828:	1b64      	subs	r4, r4, r5
 800282a:	10a4      	asrs	r4, r4, #2
 800282c:	42a6      	cmp	r6, r4
 800282e:	d109      	bne.n	8002844 <__libc_init_array+0x24>
 8002830:	2600      	movs	r6, #0
 8002832:	f000 fc65 	bl	8003100 <_init>
 8002836:	4c0a      	ldr	r4, [pc, #40]	@ (8002860 <__libc_init_array+0x40>)
 8002838:	4d0a      	ldr	r5, [pc, #40]	@ (8002864 <__libc_init_array+0x44>)
 800283a:	1b64      	subs	r4, r4, r5
 800283c:	10a4      	asrs	r4, r4, #2
 800283e:	42a6      	cmp	r6, r4
 8002840:	d105      	bne.n	800284e <__libc_init_array+0x2e>
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	00b3      	lsls	r3, r6, #2
 8002846:	58eb      	ldr	r3, [r5, r3]
 8002848:	4798      	blx	r3
 800284a:	3601      	adds	r6, #1
 800284c:	e7ee      	b.n	800282c <__libc_init_array+0xc>
 800284e:	00b3      	lsls	r3, r6, #2
 8002850:	58eb      	ldr	r3, [r5, r3]
 8002852:	4798      	blx	r3
 8002854:	3601      	adds	r6, #1
 8002856:	e7f2      	b.n	800283e <__libc_init_array+0x1e>
 8002858:	0800319c 	.word	0x0800319c
 800285c:	0800319c 	.word	0x0800319c
 8002860:	080031a0 	.word	0x080031a0
 8002864:	0800319c 	.word	0x0800319c

08002868 <__retarget_lock_acquire_recursive>:
 8002868:	4770      	bx	lr

0800286a <__retarget_lock_release_recursive>:
 800286a:	4770      	bx	lr

0800286c <_free_r>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	0005      	movs	r5, r0
 8002870:	1e0c      	subs	r4, r1, #0
 8002872:	d010      	beq.n	8002896 <_free_r+0x2a>
 8002874:	3c04      	subs	r4, #4
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	da00      	bge.n	800287e <_free_r+0x12>
 800287c:	18e4      	adds	r4, r4, r3
 800287e:	0028      	movs	r0, r5
 8002880:	f000 f8e0 	bl	8002a44 <__malloc_lock>
 8002884:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <_free_r+0x90>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <_free_r+0x2c>
 800288c:	6063      	str	r3, [r4, #4]
 800288e:	6014      	str	r4, [r2, #0]
 8002890:	0028      	movs	r0, r5
 8002892:	f000 f8df 	bl	8002a54 <__malloc_unlock>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	42a3      	cmp	r3, r4
 800289a:	d908      	bls.n	80028ae <_free_r+0x42>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	1821      	adds	r1, r4, r0
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d1f3      	bne.n	800288c <_free_r+0x20>
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	1809      	adds	r1, r1, r0
 80028aa:	6021      	str	r1, [r4, #0]
 80028ac:	e7ee      	b.n	800288c <_free_r+0x20>
 80028ae:	001a      	movs	r2, r3
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <_free_r+0x4e>
 80028b6:	42a3      	cmp	r3, r4
 80028b8:	d9f9      	bls.n	80028ae <_free_r+0x42>
 80028ba:	6811      	ldr	r1, [r2, #0]
 80028bc:	1850      	adds	r0, r2, r1
 80028be:	42a0      	cmp	r0, r4
 80028c0:	d10b      	bne.n	80028da <_free_r+0x6e>
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	1809      	adds	r1, r1, r0
 80028c6:	1850      	adds	r0, r2, r1
 80028c8:	6011      	str	r1, [r2, #0]
 80028ca:	4283      	cmp	r3, r0
 80028cc:	d1e0      	bne.n	8002890 <_free_r+0x24>
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	1841      	adds	r1, r0, r1
 80028d4:	6011      	str	r1, [r2, #0]
 80028d6:	6053      	str	r3, [r2, #4]
 80028d8:	e7da      	b.n	8002890 <_free_r+0x24>
 80028da:	42a0      	cmp	r0, r4
 80028dc:	d902      	bls.n	80028e4 <_free_r+0x78>
 80028de:	230c      	movs	r3, #12
 80028e0:	602b      	str	r3, [r5, #0]
 80028e2:	e7d5      	b.n	8002890 <_free_r+0x24>
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	1821      	adds	r1, r4, r0
 80028e8:	428b      	cmp	r3, r1
 80028ea:	d103      	bne.n	80028f4 <_free_r+0x88>
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	1809      	adds	r1, r1, r0
 80028f2:	6021      	str	r1, [r4, #0]
 80028f4:	6063      	str	r3, [r4, #4]
 80028f6:	6054      	str	r4, [r2, #4]
 80028f8:	e7ca      	b.n	8002890 <_free_r+0x24>
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	2000028c 	.word	0x2000028c

08002900 <sbrk_aligned>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	4e0f      	ldr	r6, [pc, #60]	@ (8002940 <sbrk_aligned+0x40>)
 8002904:	000d      	movs	r5, r1
 8002906:	6831      	ldr	r1, [r6, #0]
 8002908:	0004      	movs	r4, r0
 800290a:	2900      	cmp	r1, #0
 800290c:	d102      	bne.n	8002914 <sbrk_aligned+0x14>
 800290e:	f000 fb99 	bl	8003044 <_sbrk_r>
 8002912:	6030      	str	r0, [r6, #0]
 8002914:	0029      	movs	r1, r5
 8002916:	0020      	movs	r0, r4
 8002918:	f000 fb94 	bl	8003044 <_sbrk_r>
 800291c:	1c43      	adds	r3, r0, #1
 800291e:	d103      	bne.n	8002928 <sbrk_aligned+0x28>
 8002920:	2501      	movs	r5, #1
 8002922:	426d      	negs	r5, r5
 8002924:	0028      	movs	r0, r5
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	2303      	movs	r3, #3
 800292a:	1cc5      	adds	r5, r0, #3
 800292c:	439d      	bics	r5, r3
 800292e:	42a8      	cmp	r0, r5
 8002930:	d0f8      	beq.n	8002924 <sbrk_aligned+0x24>
 8002932:	1a29      	subs	r1, r5, r0
 8002934:	0020      	movs	r0, r4
 8002936:	f000 fb85 	bl	8003044 <_sbrk_r>
 800293a:	3001      	adds	r0, #1
 800293c:	d1f2      	bne.n	8002924 <sbrk_aligned+0x24>
 800293e:	e7ef      	b.n	8002920 <sbrk_aligned+0x20>
 8002940:	20000288 	.word	0x20000288

08002944 <_malloc_r>:
 8002944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002946:	2203      	movs	r2, #3
 8002948:	1ccb      	adds	r3, r1, #3
 800294a:	4393      	bics	r3, r2
 800294c:	3308      	adds	r3, #8
 800294e:	0005      	movs	r5, r0
 8002950:	001f      	movs	r7, r3
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d234      	bcs.n	80029c0 <_malloc_r+0x7c>
 8002956:	270c      	movs	r7, #12
 8002958:	42b9      	cmp	r1, r7
 800295a:	d833      	bhi.n	80029c4 <_malloc_r+0x80>
 800295c:	0028      	movs	r0, r5
 800295e:	f000 f871 	bl	8002a44 <__malloc_lock>
 8002962:	4e37      	ldr	r6, [pc, #220]	@ (8002a40 <_malloc_r+0xfc>)
 8002964:	6833      	ldr	r3, [r6, #0]
 8002966:	001c      	movs	r4, r3
 8002968:	2c00      	cmp	r4, #0
 800296a:	d12f      	bne.n	80029cc <_malloc_r+0x88>
 800296c:	0039      	movs	r1, r7
 800296e:	0028      	movs	r0, r5
 8002970:	f7ff ffc6 	bl	8002900 <sbrk_aligned>
 8002974:	0004      	movs	r4, r0
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	d15f      	bne.n	8002a3a <_malloc_r+0xf6>
 800297a:	6834      	ldr	r4, [r6, #0]
 800297c:	9400      	str	r4, [sp, #0]
 800297e:	9b00      	ldr	r3, [sp, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d14a      	bne.n	8002a1a <_malloc_r+0xd6>
 8002984:	2c00      	cmp	r4, #0
 8002986:	d052      	beq.n	8002a2e <_malloc_r+0xea>
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	0028      	movs	r0, r5
 800298c:	18e3      	adds	r3, r4, r3
 800298e:	9900      	ldr	r1, [sp, #0]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	f000 fb57 	bl	8003044 <_sbrk_r>
 8002996:	9b01      	ldr	r3, [sp, #4]
 8002998:	4283      	cmp	r3, r0
 800299a:	d148      	bne.n	8002a2e <_malloc_r+0xea>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	0028      	movs	r0, r5
 80029a0:	1aff      	subs	r7, r7, r3
 80029a2:	0039      	movs	r1, r7
 80029a4:	f7ff ffac 	bl	8002900 <sbrk_aligned>
 80029a8:	3001      	adds	r0, #1
 80029aa:	d040      	beq.n	8002a2e <_malloc_r+0xea>
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	19db      	adds	r3, r3, r7
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	6833      	ldr	r3, [r6, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	2a00      	cmp	r2, #0
 80029b8:	d133      	bne.n	8002a22 <_malloc_r+0xde>
 80029ba:	9b00      	ldr	r3, [sp, #0]
 80029bc:	6033      	str	r3, [r6, #0]
 80029be:	e019      	b.n	80029f4 <_malloc_r+0xb0>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	dac9      	bge.n	8002958 <_malloc_r+0x14>
 80029c4:	230c      	movs	r3, #12
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	2000      	movs	r0, #0
 80029ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029cc:	6821      	ldr	r1, [r4, #0]
 80029ce:	1bc9      	subs	r1, r1, r7
 80029d0:	d420      	bmi.n	8002a14 <_malloc_r+0xd0>
 80029d2:	290b      	cmp	r1, #11
 80029d4:	d90a      	bls.n	80029ec <_malloc_r+0xa8>
 80029d6:	19e2      	adds	r2, r4, r7
 80029d8:	6027      	str	r7, [r4, #0]
 80029da:	42a3      	cmp	r3, r4
 80029dc:	d104      	bne.n	80029e8 <_malloc_r+0xa4>
 80029de:	6032      	str	r2, [r6, #0]
 80029e0:	6863      	ldr	r3, [r4, #4]
 80029e2:	6011      	str	r1, [r2, #0]
 80029e4:	6053      	str	r3, [r2, #4]
 80029e6:	e005      	b.n	80029f4 <_malloc_r+0xb0>
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e7f9      	b.n	80029e0 <_malloc_r+0x9c>
 80029ec:	6862      	ldr	r2, [r4, #4]
 80029ee:	42a3      	cmp	r3, r4
 80029f0:	d10e      	bne.n	8002a10 <_malloc_r+0xcc>
 80029f2:	6032      	str	r2, [r6, #0]
 80029f4:	0028      	movs	r0, r5
 80029f6:	f000 f82d 	bl	8002a54 <__malloc_unlock>
 80029fa:	0020      	movs	r0, r4
 80029fc:	2207      	movs	r2, #7
 80029fe:	300b      	adds	r0, #11
 8002a00:	1d23      	adds	r3, r4, #4
 8002a02:	4390      	bics	r0, r2
 8002a04:	1ac2      	subs	r2, r0, r3
 8002a06:	4298      	cmp	r0, r3
 8002a08:	d0df      	beq.n	80029ca <_malloc_r+0x86>
 8002a0a:	1a1b      	subs	r3, r3, r0
 8002a0c:	50a3      	str	r3, [r4, r2]
 8002a0e:	e7dc      	b.n	80029ca <_malloc_r+0x86>
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e7ef      	b.n	80029f4 <_malloc_r+0xb0>
 8002a14:	0023      	movs	r3, r4
 8002a16:	6864      	ldr	r4, [r4, #4]
 8002a18:	e7a6      	b.n	8002968 <_malloc_r+0x24>
 8002a1a:	9c00      	ldr	r4, [sp, #0]
 8002a1c:	6863      	ldr	r3, [r4, #4]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	e7ad      	b.n	800297e <_malloc_r+0x3a>
 8002a22:	001a      	movs	r2, r3
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	42a3      	cmp	r3, r4
 8002a28:	d1fb      	bne.n	8002a22 <_malloc_r+0xde>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e7da      	b.n	80029e4 <_malloc_r+0xa0>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	0028      	movs	r0, r5
 8002a32:	602b      	str	r3, [r5, #0]
 8002a34:	f000 f80e 	bl	8002a54 <__malloc_unlock>
 8002a38:	e7c6      	b.n	80029c8 <_malloc_r+0x84>
 8002a3a:	6007      	str	r7, [r0, #0]
 8002a3c:	e7da      	b.n	80029f4 <_malloc_r+0xb0>
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	2000028c 	.word	0x2000028c

08002a44 <__malloc_lock>:
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <__malloc_lock+0xc>)
 8002a48:	f7ff ff0e 	bl	8002868 <__retarget_lock_acquire_recursive>
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	20000284 	.word	0x20000284

08002a54 <__malloc_unlock>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	4802      	ldr	r0, [pc, #8]	@ (8002a60 <__malloc_unlock+0xc>)
 8002a58:	f7ff ff07 	bl	800286a <__retarget_lock_release_recursive>
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	20000284 	.word	0x20000284

08002a64 <__ssputs_r>:
 8002a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a66:	688e      	ldr	r6, [r1, #8]
 8002a68:	b085      	sub	sp, #20
 8002a6a:	001f      	movs	r7, r3
 8002a6c:	000c      	movs	r4, r1
 8002a6e:	680b      	ldr	r3, [r1, #0]
 8002a70:	9002      	str	r0, [sp, #8]
 8002a72:	9203      	str	r2, [sp, #12]
 8002a74:	42be      	cmp	r6, r7
 8002a76:	d830      	bhi.n	8002ada <__ssputs_r+0x76>
 8002a78:	210c      	movs	r1, #12
 8002a7a:	5e62      	ldrsh	r2, [r4, r1]
 8002a7c:	2190      	movs	r1, #144	@ 0x90
 8002a7e:	00c9      	lsls	r1, r1, #3
 8002a80:	420a      	tst	r2, r1
 8002a82:	d028      	beq.n	8002ad6 <__ssputs_r+0x72>
 8002a84:	2003      	movs	r0, #3
 8002a86:	6921      	ldr	r1, [r4, #16]
 8002a88:	1a5b      	subs	r3, r3, r1
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	6963      	ldr	r3, [r4, #20]
 8002a8e:	4343      	muls	r3, r0
 8002a90:	9801      	ldr	r0, [sp, #4]
 8002a92:	0fdd      	lsrs	r5, r3, #31
 8002a94:	18ed      	adds	r5, r5, r3
 8002a96:	1c7b      	adds	r3, r7, #1
 8002a98:	181b      	adds	r3, r3, r0
 8002a9a:	106d      	asrs	r5, r5, #1
 8002a9c:	42ab      	cmp	r3, r5
 8002a9e:	d900      	bls.n	8002aa2 <__ssputs_r+0x3e>
 8002aa0:	001d      	movs	r5, r3
 8002aa2:	0552      	lsls	r2, r2, #21
 8002aa4:	d528      	bpl.n	8002af8 <__ssputs_r+0x94>
 8002aa6:	0029      	movs	r1, r5
 8002aa8:	9802      	ldr	r0, [sp, #8]
 8002aaa:	f7ff ff4b 	bl	8002944 <_malloc_r>
 8002aae:	1e06      	subs	r6, r0, #0
 8002ab0:	d02c      	beq.n	8002b0c <__ssputs_r+0xa8>
 8002ab2:	9a01      	ldr	r2, [sp, #4]
 8002ab4:	6921      	ldr	r1, [r4, #16]
 8002ab6:	f000 fae2 	bl	800307e <memcpy>
 8002aba:	89a2      	ldrh	r2, [r4, #12]
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <__ssputs_r+0xbc>)
 8002abe:	401a      	ands	r2, r3
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	81a3      	strh	r3, [r4, #12]
 8002ac6:	9b01      	ldr	r3, [sp, #4]
 8002ac8:	6126      	str	r6, [r4, #16]
 8002aca:	18f6      	adds	r6, r6, r3
 8002acc:	6026      	str	r6, [r4, #0]
 8002ace:	003e      	movs	r6, r7
 8002ad0:	6165      	str	r5, [r4, #20]
 8002ad2:	1aed      	subs	r5, r5, r3
 8002ad4:	60a5      	str	r5, [r4, #8]
 8002ad6:	42be      	cmp	r6, r7
 8002ad8:	d900      	bls.n	8002adc <__ssputs_r+0x78>
 8002ada:	003e      	movs	r6, r7
 8002adc:	0032      	movs	r2, r6
 8002ade:	9903      	ldr	r1, [sp, #12]
 8002ae0:	6820      	ldr	r0, [r4, #0]
 8002ae2:	f000 fa9b 	bl	800301c <memmove>
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	68a3      	ldr	r3, [r4, #8]
 8002aea:	1b9b      	subs	r3, r3, r6
 8002aec:	60a3      	str	r3, [r4, #8]
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	199b      	adds	r3, r3, r6
 8002af2:	6023      	str	r3, [r4, #0]
 8002af4:	b005      	add	sp, #20
 8002af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002af8:	002a      	movs	r2, r5
 8002afa:	9802      	ldr	r0, [sp, #8]
 8002afc:	f000 fac8 	bl	8003090 <_realloc_r>
 8002b00:	1e06      	subs	r6, r0, #0
 8002b02:	d1e0      	bne.n	8002ac6 <__ssputs_r+0x62>
 8002b04:	6921      	ldr	r1, [r4, #16]
 8002b06:	9802      	ldr	r0, [sp, #8]
 8002b08:	f7ff feb0 	bl	800286c <_free_r>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	2001      	movs	r0, #1
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	4240      	negs	r0, r0
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	89a2      	ldrh	r2, [r4, #12]
 8002b18:	3334      	adds	r3, #52	@ 0x34
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	81a3      	strh	r3, [r4, #12]
 8002b1e:	e7e9      	b.n	8002af4 <__ssputs_r+0x90>
 8002b20:	fffffb7f 	.word	0xfffffb7f

08002b24 <_svfiprintf_r>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b0a1      	sub	sp, #132	@ 0x84
 8002b28:	9003      	str	r0, [sp, #12]
 8002b2a:	001d      	movs	r5, r3
 8002b2c:	898b      	ldrh	r3, [r1, #12]
 8002b2e:	000f      	movs	r7, r1
 8002b30:	0016      	movs	r6, r2
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	d511      	bpl.n	8002b5a <_svfiprintf_r+0x36>
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10e      	bne.n	8002b5a <_svfiprintf_r+0x36>
 8002b3c:	2140      	movs	r1, #64	@ 0x40
 8002b3e:	f7ff ff01 	bl	8002944 <_malloc_r>
 8002b42:	6038      	str	r0, [r7, #0]
 8002b44:	6138      	str	r0, [r7, #16]
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d105      	bne.n	8002b56 <_svfiprintf_r+0x32>
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	9a03      	ldr	r2, [sp, #12]
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	2001      	movs	r0, #1
 8002b52:	4240      	negs	r0, r0
 8002b54:	e0cf      	b.n	8002cf6 <_svfiprintf_r+0x1d2>
 8002b56:	2340      	movs	r3, #64	@ 0x40
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	ac08      	add	r4, sp, #32
 8002b5e:	6163      	str	r3, [r4, #20]
 8002b60:	3320      	adds	r3, #32
 8002b62:	7663      	strb	r3, [r4, #25]
 8002b64:	3310      	adds	r3, #16
 8002b66:	76a3      	strb	r3, [r4, #26]
 8002b68:	9507      	str	r5, [sp, #28]
 8002b6a:	0035      	movs	r5, r6
 8002b6c:	782b      	ldrb	r3, [r5, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <_svfiprintf_r+0x52>
 8002b72:	2b25      	cmp	r3, #37	@ 0x25
 8002b74:	d148      	bne.n	8002c08 <_svfiprintf_r+0xe4>
 8002b76:	1bab      	subs	r3, r5, r6
 8002b78:	9305      	str	r3, [sp, #20]
 8002b7a:	42b5      	cmp	r5, r6
 8002b7c:	d00b      	beq.n	8002b96 <_svfiprintf_r+0x72>
 8002b7e:	0032      	movs	r2, r6
 8002b80:	0039      	movs	r1, r7
 8002b82:	9803      	ldr	r0, [sp, #12]
 8002b84:	f7ff ff6e 	bl	8002a64 <__ssputs_r>
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d100      	bne.n	8002b8e <_svfiprintf_r+0x6a>
 8002b8c:	e0ae      	b.n	8002cec <_svfiprintf_r+0x1c8>
 8002b8e:	6963      	ldr	r3, [r4, #20]
 8002b90:	9a05      	ldr	r2, [sp, #20]
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	6163      	str	r3, [r4, #20]
 8002b96:	782b      	ldrb	r3, [r5, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d100      	bne.n	8002b9e <_svfiprintf_r+0x7a>
 8002b9c:	e0a6      	b.n	8002cec <_svfiprintf_r+0x1c8>
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4252      	negs	r2, r2
 8002ba4:	6062      	str	r2, [r4, #4]
 8002ba6:	a904      	add	r1, sp, #16
 8002ba8:	3254      	adds	r2, #84	@ 0x54
 8002baa:	1852      	adds	r2, r2, r1
 8002bac:	1c6e      	adds	r6, r5, #1
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	60e3      	str	r3, [r4, #12]
 8002bb2:	60a3      	str	r3, [r4, #8]
 8002bb4:	7013      	strb	r3, [r2, #0]
 8002bb6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002bb8:	4b54      	ldr	r3, [pc, #336]	@ (8002d0c <_svfiprintf_r+0x1e8>)
 8002bba:	2205      	movs	r2, #5
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	7831      	ldrb	r1, [r6, #0]
 8002bc0:	9305      	str	r3, [sp, #20]
 8002bc2:	f000 fa51 	bl	8003068 <memchr>
 8002bc6:	1c75      	adds	r5, r6, #1
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d11f      	bne.n	8002c0c <_svfiprintf_r+0xe8>
 8002bcc:	6822      	ldr	r2, [r4, #0]
 8002bce:	06d3      	lsls	r3, r2, #27
 8002bd0:	d504      	bpl.n	8002bdc <_svfiprintf_r+0xb8>
 8002bd2:	2353      	movs	r3, #83	@ 0x53
 8002bd4:	a904      	add	r1, sp, #16
 8002bd6:	185b      	adds	r3, r3, r1
 8002bd8:	2120      	movs	r1, #32
 8002bda:	7019      	strb	r1, [r3, #0]
 8002bdc:	0713      	lsls	r3, r2, #28
 8002bde:	d504      	bpl.n	8002bea <_svfiprintf_r+0xc6>
 8002be0:	2353      	movs	r3, #83	@ 0x53
 8002be2:	a904      	add	r1, sp, #16
 8002be4:	185b      	adds	r3, r3, r1
 8002be6:	212b      	movs	r1, #43	@ 0x2b
 8002be8:	7019      	strb	r1, [r3, #0]
 8002bea:	7833      	ldrb	r3, [r6, #0]
 8002bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bee:	d016      	beq.n	8002c1e <_svfiprintf_r+0xfa>
 8002bf0:	0035      	movs	r5, r6
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	200a      	movs	r0, #10
 8002bf6:	68e3      	ldr	r3, [r4, #12]
 8002bf8:	782a      	ldrb	r2, [r5, #0]
 8002bfa:	1c6e      	adds	r6, r5, #1
 8002bfc:	3a30      	subs	r2, #48	@ 0x30
 8002bfe:	2a09      	cmp	r2, #9
 8002c00:	d950      	bls.n	8002ca4 <_svfiprintf_r+0x180>
 8002c02:	2900      	cmp	r1, #0
 8002c04:	d111      	bne.n	8002c2a <_svfiprintf_r+0x106>
 8002c06:	e017      	b.n	8002c38 <_svfiprintf_r+0x114>
 8002c08:	3501      	adds	r5, #1
 8002c0a:	e7af      	b.n	8002b6c <_svfiprintf_r+0x48>
 8002c0c:	9b05      	ldr	r3, [sp, #20]
 8002c0e:	6822      	ldr	r2, [r4, #0]
 8002c10:	1ac0      	subs	r0, r0, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	4083      	lsls	r3, r0
 8002c16:	4313      	orrs	r3, r2
 8002c18:	002e      	movs	r6, r5
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	e7cc      	b.n	8002bb8 <_svfiprintf_r+0x94>
 8002c1e:	9b07      	ldr	r3, [sp, #28]
 8002c20:	1d19      	adds	r1, r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	9107      	str	r1, [sp, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db01      	blt.n	8002c2e <_svfiprintf_r+0x10a>
 8002c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c2c:	e004      	b.n	8002c38 <_svfiprintf_r+0x114>
 8002c2e:	425b      	negs	r3, r3
 8002c30:	60e3      	str	r3, [r4, #12]
 8002c32:	2302      	movs	r3, #2
 8002c34:	4313      	orrs	r3, r2
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	782b      	ldrb	r3, [r5, #0]
 8002c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c3c:	d10c      	bne.n	8002c58 <_svfiprintf_r+0x134>
 8002c3e:	786b      	ldrb	r3, [r5, #1]
 8002c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c42:	d134      	bne.n	8002cae <_svfiprintf_r+0x18a>
 8002c44:	9b07      	ldr	r3, [sp, #28]
 8002c46:	3502      	adds	r5, #2
 8002c48:	1d1a      	adds	r2, r3, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	9207      	str	r2, [sp, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da01      	bge.n	8002c56 <_svfiprintf_r+0x132>
 8002c52:	2301      	movs	r3, #1
 8002c54:	425b      	negs	r3, r3
 8002c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c58:	4e2d      	ldr	r6, [pc, #180]	@ (8002d10 <_svfiprintf_r+0x1ec>)
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	0030      	movs	r0, r6
 8002c5e:	7829      	ldrb	r1, [r5, #0]
 8002c60:	f000 fa02 	bl	8003068 <memchr>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d006      	beq.n	8002c76 <_svfiprintf_r+0x152>
 8002c68:	2340      	movs	r3, #64	@ 0x40
 8002c6a:	1b80      	subs	r0, r0, r6
 8002c6c:	4083      	lsls	r3, r0
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	3501      	adds	r5, #1
 8002c72:	4313      	orrs	r3, r2
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	7829      	ldrb	r1, [r5, #0]
 8002c78:	2206      	movs	r2, #6
 8002c7a:	4826      	ldr	r0, [pc, #152]	@ (8002d14 <_svfiprintf_r+0x1f0>)
 8002c7c:	1c6e      	adds	r6, r5, #1
 8002c7e:	7621      	strb	r1, [r4, #24]
 8002c80:	f000 f9f2 	bl	8003068 <memchr>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d038      	beq.n	8002cfa <_svfiprintf_r+0x1d6>
 8002c88:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <_svfiprintf_r+0x1f4>)
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d122      	bne.n	8002cd4 <_svfiprintf_r+0x1b0>
 8002c8e:	2207      	movs	r2, #7
 8002c90:	9b07      	ldr	r3, [sp, #28]
 8002c92:	3307      	adds	r3, #7
 8002c94:	4393      	bics	r3, r2
 8002c96:	3308      	adds	r3, #8
 8002c98:	9307      	str	r3, [sp, #28]
 8002c9a:	6963      	ldr	r3, [r4, #20]
 8002c9c:	9a04      	ldr	r2, [sp, #16]
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	6163      	str	r3, [r4, #20]
 8002ca2:	e762      	b.n	8002b6a <_svfiprintf_r+0x46>
 8002ca4:	4343      	muls	r3, r0
 8002ca6:	0035      	movs	r5, r6
 8002ca8:	2101      	movs	r1, #1
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	e7a4      	b.n	8002bf8 <_svfiprintf_r+0xd4>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	200a      	movs	r0, #10
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	3501      	adds	r5, #1
 8002cb6:	6063      	str	r3, [r4, #4]
 8002cb8:	782a      	ldrb	r2, [r5, #0]
 8002cba:	1c6e      	adds	r6, r5, #1
 8002cbc:	3a30      	subs	r2, #48	@ 0x30
 8002cbe:	2a09      	cmp	r2, #9
 8002cc0:	d903      	bls.n	8002cca <_svfiprintf_r+0x1a6>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0c8      	beq.n	8002c58 <_svfiprintf_r+0x134>
 8002cc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8002cc8:	e7c6      	b.n	8002c58 <_svfiprintf_r+0x134>
 8002cca:	4341      	muls	r1, r0
 8002ccc:	0035      	movs	r5, r6
 8002cce:	2301      	movs	r3, #1
 8002cd0:	1889      	adds	r1, r1, r2
 8002cd2:	e7f1      	b.n	8002cb8 <_svfiprintf_r+0x194>
 8002cd4:	aa07      	add	r2, sp, #28
 8002cd6:	9200      	str	r2, [sp, #0]
 8002cd8:	0021      	movs	r1, r4
 8002cda:	003a      	movs	r2, r7
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <_svfiprintf_r+0x1f8>)
 8002cde:	9803      	ldr	r0, [sp, #12]
 8002ce0:	e000      	b.n	8002ce4 <_svfiprintf_r+0x1c0>
 8002ce2:	bf00      	nop
 8002ce4:	9004      	str	r0, [sp, #16]
 8002ce6:	9b04      	ldr	r3, [sp, #16]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	d1d6      	bne.n	8002c9a <_svfiprintf_r+0x176>
 8002cec:	89bb      	ldrh	r3, [r7, #12]
 8002cee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002cf0:	065b      	lsls	r3, r3, #25
 8002cf2:	d500      	bpl.n	8002cf6 <_svfiprintf_r+0x1d2>
 8002cf4:	e72c      	b.n	8002b50 <_svfiprintf_r+0x2c>
 8002cf6:	b021      	add	sp, #132	@ 0x84
 8002cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfa:	aa07      	add	r2, sp, #28
 8002cfc:	9200      	str	r2, [sp, #0]
 8002cfe:	0021      	movs	r1, r4
 8002d00:	003a      	movs	r2, r7
 8002d02:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <_svfiprintf_r+0x1f8>)
 8002d04:	9803      	ldr	r0, [sp, #12]
 8002d06:	f000 f87b 	bl	8002e00 <_printf_i>
 8002d0a:	e7eb      	b.n	8002ce4 <_svfiprintf_r+0x1c0>
 8002d0c:	08003167 	.word	0x08003167
 8002d10:	0800316d 	.word	0x0800316d
 8002d14:	08003171 	.word	0x08003171
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	08002a65 	.word	0x08002a65

08002d20 <_printf_common>:
 8002d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d22:	0016      	movs	r6, r2
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	688a      	ldr	r2, [r1, #8]
 8002d28:	690b      	ldr	r3, [r1, #16]
 8002d2a:	000c      	movs	r4, r1
 8002d2c:	9000      	str	r0, [sp, #0]
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	da00      	bge.n	8002d34 <_printf_common+0x14>
 8002d32:	0013      	movs	r3, r2
 8002d34:	0022      	movs	r2, r4
 8002d36:	6033      	str	r3, [r6, #0]
 8002d38:	3243      	adds	r2, #67	@ 0x43
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	d001      	beq.n	8002d44 <_printf_common+0x24>
 8002d40:	3301      	adds	r3, #1
 8002d42:	6033      	str	r3, [r6, #0]
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	069b      	lsls	r3, r3, #26
 8002d48:	d502      	bpl.n	8002d50 <_printf_common+0x30>
 8002d4a:	6833      	ldr	r3, [r6, #0]
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	6033      	str	r3, [r6, #0]
 8002d50:	6822      	ldr	r2, [r4, #0]
 8002d52:	2306      	movs	r3, #6
 8002d54:	0015      	movs	r5, r2
 8002d56:	401d      	ands	r5, r3
 8002d58:	421a      	tst	r2, r3
 8002d5a:	d027      	beq.n	8002dac <_printf_common+0x8c>
 8002d5c:	0023      	movs	r3, r4
 8002d5e:	3343      	adds	r3, #67	@ 0x43
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	4193      	sbcs	r3, r2
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	0692      	lsls	r2, r2, #26
 8002d6a:	d430      	bmi.n	8002dce <_printf_common+0xae>
 8002d6c:	0022      	movs	r2, r4
 8002d6e:	9901      	ldr	r1, [sp, #4]
 8002d70:	9800      	ldr	r0, [sp, #0]
 8002d72:	9d08      	ldr	r5, [sp, #32]
 8002d74:	3243      	adds	r2, #67	@ 0x43
 8002d76:	47a8      	blx	r5
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d025      	beq.n	8002dc8 <_printf_common+0xa8>
 8002d7c:	2206      	movs	r2, #6
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	2500      	movs	r5, #0
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d105      	bne.n	8002d94 <_printf_common+0x74>
 8002d88:	6833      	ldr	r3, [r6, #0]
 8002d8a:	68e5      	ldr	r5, [r4, #12]
 8002d8c:	1aed      	subs	r5, r5, r3
 8002d8e:	43eb      	mvns	r3, r5
 8002d90:	17db      	asrs	r3, r3, #31
 8002d92:	401d      	ands	r5, r3
 8002d94:	68a3      	ldr	r3, [r4, #8]
 8002d96:	6922      	ldr	r2, [r4, #16]
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	dd01      	ble.n	8002da0 <_printf_common+0x80>
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	18ed      	adds	r5, r5, r3
 8002da0:	2600      	movs	r6, #0
 8002da2:	42b5      	cmp	r5, r6
 8002da4:	d120      	bne.n	8002de8 <_printf_common+0xc8>
 8002da6:	2000      	movs	r0, #0
 8002da8:	e010      	b.n	8002dcc <_printf_common+0xac>
 8002daa:	3501      	adds	r5, #1
 8002dac:	68e3      	ldr	r3, [r4, #12]
 8002dae:	6832      	ldr	r2, [r6, #0]
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	42ab      	cmp	r3, r5
 8002db4:	ddd2      	ble.n	8002d5c <_printf_common+0x3c>
 8002db6:	0022      	movs	r2, r4
 8002db8:	2301      	movs	r3, #1
 8002dba:	9901      	ldr	r1, [sp, #4]
 8002dbc:	9800      	ldr	r0, [sp, #0]
 8002dbe:	9f08      	ldr	r7, [sp, #32]
 8002dc0:	3219      	adds	r2, #25
 8002dc2:	47b8      	blx	r7
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d1f0      	bne.n	8002daa <_printf_common+0x8a>
 8002dc8:	2001      	movs	r0, #1
 8002dca:	4240      	negs	r0, r0
 8002dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dce:	2030      	movs	r0, #48	@ 0x30
 8002dd0:	18e1      	adds	r1, r4, r3
 8002dd2:	3143      	adds	r1, #67	@ 0x43
 8002dd4:	7008      	strb	r0, [r1, #0]
 8002dd6:	0021      	movs	r1, r4
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	3145      	adds	r1, #69	@ 0x45
 8002ddc:	7809      	ldrb	r1, [r1, #0]
 8002dde:	18a2      	adds	r2, r4, r2
 8002de0:	3243      	adds	r2, #67	@ 0x43
 8002de2:	3302      	adds	r3, #2
 8002de4:	7011      	strb	r1, [r2, #0]
 8002de6:	e7c1      	b.n	8002d6c <_printf_common+0x4c>
 8002de8:	0022      	movs	r2, r4
 8002dea:	2301      	movs	r3, #1
 8002dec:	9901      	ldr	r1, [sp, #4]
 8002dee:	9800      	ldr	r0, [sp, #0]
 8002df0:	9f08      	ldr	r7, [sp, #32]
 8002df2:	321a      	adds	r2, #26
 8002df4:	47b8      	blx	r7
 8002df6:	3001      	adds	r0, #1
 8002df8:	d0e6      	beq.n	8002dc8 <_printf_common+0xa8>
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7d1      	b.n	8002da2 <_printf_common+0x82>
	...

08002e00 <_printf_i>:
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	b08b      	sub	sp, #44	@ 0x2c
 8002e04:	9206      	str	r2, [sp, #24]
 8002e06:	000a      	movs	r2, r1
 8002e08:	3243      	adds	r2, #67	@ 0x43
 8002e0a:	9307      	str	r3, [sp, #28]
 8002e0c:	9005      	str	r0, [sp, #20]
 8002e0e:	9203      	str	r2, [sp, #12]
 8002e10:	7e0a      	ldrb	r2, [r1, #24]
 8002e12:	000c      	movs	r4, r1
 8002e14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002e16:	2a78      	cmp	r2, #120	@ 0x78
 8002e18:	d809      	bhi.n	8002e2e <_printf_i+0x2e>
 8002e1a:	2a62      	cmp	r2, #98	@ 0x62
 8002e1c:	d80b      	bhi.n	8002e36 <_printf_i+0x36>
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	d100      	bne.n	8002e24 <_printf_i+0x24>
 8002e22:	e0bc      	b.n	8002f9e <_printf_i+0x19e>
 8002e24:	497b      	ldr	r1, [pc, #492]	@ (8003014 <_printf_i+0x214>)
 8002e26:	9104      	str	r1, [sp, #16]
 8002e28:	2a58      	cmp	r2, #88	@ 0x58
 8002e2a:	d100      	bne.n	8002e2e <_printf_i+0x2e>
 8002e2c:	e090      	b.n	8002f50 <_printf_i+0x150>
 8002e2e:	0025      	movs	r5, r4
 8002e30:	3542      	adds	r5, #66	@ 0x42
 8002e32:	702a      	strb	r2, [r5, #0]
 8002e34:	e022      	b.n	8002e7c <_printf_i+0x7c>
 8002e36:	0010      	movs	r0, r2
 8002e38:	3863      	subs	r0, #99	@ 0x63
 8002e3a:	2815      	cmp	r0, #21
 8002e3c:	d8f7      	bhi.n	8002e2e <_printf_i+0x2e>
 8002e3e:	f7fd f975 	bl	800012c <__gnu_thumb1_case_shi>
 8002e42:	0016      	.short	0x0016
 8002e44:	fff6001f 	.word	0xfff6001f
 8002e48:	fff6fff6 	.word	0xfff6fff6
 8002e4c:	001ffff6 	.word	0x001ffff6
 8002e50:	fff6fff6 	.word	0xfff6fff6
 8002e54:	fff6fff6 	.word	0xfff6fff6
 8002e58:	003600a1 	.word	0x003600a1
 8002e5c:	fff60080 	.word	0xfff60080
 8002e60:	00b2fff6 	.word	0x00b2fff6
 8002e64:	0036fff6 	.word	0x0036fff6
 8002e68:	fff6fff6 	.word	0xfff6fff6
 8002e6c:	0084      	.short	0x0084
 8002e6e:	0025      	movs	r5, r4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	3542      	adds	r5, #66	@ 0x42
 8002e74:	1d11      	adds	r1, r2, #4
 8002e76:	6019      	str	r1, [r3, #0]
 8002e78:	6813      	ldr	r3, [r2, #0]
 8002e7a:	702b      	strb	r3, [r5, #0]
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0a0      	b.n	8002fc2 <_printf_i+0x1c2>
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6809      	ldr	r1, [r1, #0]
 8002e84:	1d02      	adds	r2, r0, #4
 8002e86:	060d      	lsls	r5, r1, #24
 8002e88:	d50b      	bpl.n	8002ea2 <_printf_i+0xa2>
 8002e8a:	6806      	ldr	r6, [r0, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	da03      	bge.n	8002e9a <_printf_i+0x9a>
 8002e92:	232d      	movs	r3, #45	@ 0x2d
 8002e94:	9a03      	ldr	r2, [sp, #12]
 8002e96:	4276      	negs	r6, r6
 8002e98:	7013      	strb	r3, [r2, #0]
 8002e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003014 <_printf_i+0x214>)
 8002e9c:	270a      	movs	r7, #10
 8002e9e:	9304      	str	r3, [sp, #16]
 8002ea0:	e018      	b.n	8002ed4 <_printf_i+0xd4>
 8002ea2:	6806      	ldr	r6, [r0, #0]
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	0649      	lsls	r1, r1, #25
 8002ea8:	d5f1      	bpl.n	8002e8e <_printf_i+0x8e>
 8002eaa:	b236      	sxth	r6, r6
 8002eac:	e7ef      	b.n	8002e8e <_printf_i+0x8e>
 8002eae:	6808      	ldr	r0, [r1, #0]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	c940      	ldmia	r1!, {r6}
 8002eb4:	0605      	lsls	r5, r0, #24
 8002eb6:	d402      	bmi.n	8002ebe <_printf_i+0xbe>
 8002eb8:	0640      	lsls	r0, r0, #25
 8002eba:	d500      	bpl.n	8002ebe <_printf_i+0xbe>
 8002ebc:	b2b6      	uxth	r6, r6
 8002ebe:	6019      	str	r1, [r3, #0]
 8002ec0:	4b54      	ldr	r3, [pc, #336]	@ (8003014 <_printf_i+0x214>)
 8002ec2:	270a      	movs	r7, #10
 8002ec4:	9304      	str	r3, [sp, #16]
 8002ec6:	2a6f      	cmp	r2, #111	@ 0x6f
 8002ec8:	d100      	bne.n	8002ecc <_printf_i+0xcc>
 8002eca:	3f02      	subs	r7, #2
 8002ecc:	0023      	movs	r3, r4
 8002ece:	2200      	movs	r2, #0
 8002ed0:	3343      	adds	r3, #67	@ 0x43
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	60a3      	str	r3, [r4, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db03      	blt.n	8002ee4 <_printf_i+0xe4>
 8002edc:	2104      	movs	r1, #4
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	6022      	str	r2, [r4, #0]
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	d102      	bne.n	8002eee <_printf_i+0xee>
 8002ee8:	9d03      	ldr	r5, [sp, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <_printf_i+0x108>
 8002eee:	9d03      	ldr	r5, [sp, #12]
 8002ef0:	0030      	movs	r0, r6
 8002ef2:	0039      	movs	r1, r7
 8002ef4:	f7fd f9aa 	bl	800024c <__aeabi_uidivmod>
 8002ef8:	9b04      	ldr	r3, [sp, #16]
 8002efa:	3d01      	subs	r5, #1
 8002efc:	5c5b      	ldrb	r3, [r3, r1]
 8002efe:	702b      	strb	r3, [r5, #0]
 8002f00:	0033      	movs	r3, r6
 8002f02:	0006      	movs	r6, r0
 8002f04:	429f      	cmp	r7, r3
 8002f06:	d9f3      	bls.n	8002ef0 <_printf_i+0xf0>
 8002f08:	2f08      	cmp	r7, #8
 8002f0a:	d109      	bne.n	8002f20 <_printf_i+0x120>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	07db      	lsls	r3, r3, #31
 8002f10:	d506      	bpl.n	8002f20 <_printf_i+0x120>
 8002f12:	6862      	ldr	r2, [r4, #4]
 8002f14:	6923      	ldr	r3, [r4, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dc02      	bgt.n	8002f20 <_printf_i+0x120>
 8002f1a:	2330      	movs	r3, #48	@ 0x30
 8002f1c:	3d01      	subs	r5, #1
 8002f1e:	702b      	strb	r3, [r5, #0]
 8002f20:	9b03      	ldr	r3, [sp, #12]
 8002f22:	1b5b      	subs	r3, r3, r5
 8002f24:	6123      	str	r3, [r4, #16]
 8002f26:	9b07      	ldr	r3, [sp, #28]
 8002f28:	0021      	movs	r1, r4
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	9805      	ldr	r0, [sp, #20]
 8002f2e:	9b06      	ldr	r3, [sp, #24]
 8002f30:	aa09      	add	r2, sp, #36	@ 0x24
 8002f32:	f7ff fef5 	bl	8002d20 <_printf_common>
 8002f36:	3001      	adds	r0, #1
 8002f38:	d148      	bne.n	8002fcc <_printf_i+0x1cc>
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	4240      	negs	r0, r0
 8002f3e:	b00b      	add	sp, #44	@ 0x2c
 8002f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f42:	2220      	movs	r2, #32
 8002f44:	6809      	ldr	r1, [r1, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	6022      	str	r2, [r4, #0]
 8002f4a:	2278      	movs	r2, #120	@ 0x78
 8002f4c:	4932      	ldr	r1, [pc, #200]	@ (8003018 <_printf_i+0x218>)
 8002f4e:	9104      	str	r1, [sp, #16]
 8002f50:	0021      	movs	r1, r4
 8002f52:	3145      	adds	r1, #69	@ 0x45
 8002f54:	700a      	strb	r2, [r1, #0]
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	6822      	ldr	r2, [r4, #0]
 8002f5a:	c940      	ldmia	r1!, {r6}
 8002f5c:	0610      	lsls	r0, r2, #24
 8002f5e:	d402      	bmi.n	8002f66 <_printf_i+0x166>
 8002f60:	0650      	lsls	r0, r2, #25
 8002f62:	d500      	bpl.n	8002f66 <_printf_i+0x166>
 8002f64:	b2b6      	uxth	r6, r6
 8002f66:	6019      	str	r1, [r3, #0]
 8002f68:	07d3      	lsls	r3, r2, #31
 8002f6a:	d502      	bpl.n	8002f72 <_printf_i+0x172>
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	d001      	beq.n	8002f7a <_printf_i+0x17a>
 8002f76:	2710      	movs	r7, #16
 8002f78:	e7a8      	b.n	8002ecc <_printf_i+0xcc>
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	4393      	bics	r3, r2
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	e7f8      	b.n	8002f76 <_printf_i+0x176>
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	680d      	ldr	r5, [r1, #0]
 8002f88:	1d10      	adds	r0, r2, #4
 8002f8a:	6949      	ldr	r1, [r1, #20]
 8002f8c:	6018      	str	r0, [r3, #0]
 8002f8e:	6813      	ldr	r3, [r2, #0]
 8002f90:	062e      	lsls	r6, r5, #24
 8002f92:	d501      	bpl.n	8002f98 <_printf_i+0x198>
 8002f94:	6019      	str	r1, [r3, #0]
 8002f96:	e002      	b.n	8002f9e <_printf_i+0x19e>
 8002f98:	066d      	lsls	r5, r5, #25
 8002f9a:	d5fb      	bpl.n	8002f94 <_printf_i+0x194>
 8002f9c:	8019      	strh	r1, [r3, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9d03      	ldr	r5, [sp, #12]
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	e7bf      	b.n	8002f26 <_printf_i+0x126>
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	1d11      	adds	r1, r2, #4
 8002faa:	6019      	str	r1, [r3, #0]
 8002fac:	6815      	ldr	r5, [r2, #0]
 8002fae:	2100      	movs	r1, #0
 8002fb0:	0028      	movs	r0, r5
 8002fb2:	6862      	ldr	r2, [r4, #4]
 8002fb4:	f000 f858 	bl	8003068 <memchr>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d001      	beq.n	8002fc0 <_printf_i+0x1c0>
 8002fbc:	1b40      	subs	r0, r0, r5
 8002fbe:	6060      	str	r0, [r4, #4]
 8002fc0:	6863      	ldr	r3, [r4, #4]
 8002fc2:	6123      	str	r3, [r4, #16]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9a03      	ldr	r2, [sp, #12]
 8002fc8:	7013      	strb	r3, [r2, #0]
 8002fca:	e7ac      	b.n	8002f26 <_printf_i+0x126>
 8002fcc:	002a      	movs	r2, r5
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	9906      	ldr	r1, [sp, #24]
 8002fd2:	9805      	ldr	r0, [sp, #20]
 8002fd4:	9d07      	ldr	r5, [sp, #28]
 8002fd6:	47a8      	blx	r5
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d0ae      	beq.n	8002f3a <_printf_i+0x13a>
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	079b      	lsls	r3, r3, #30
 8002fe0:	d415      	bmi.n	800300e <_printf_i+0x20e>
 8002fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fe4:	68e0      	ldr	r0, [r4, #12]
 8002fe6:	4298      	cmp	r0, r3
 8002fe8:	daa9      	bge.n	8002f3e <_printf_i+0x13e>
 8002fea:	0018      	movs	r0, r3
 8002fec:	e7a7      	b.n	8002f3e <_printf_i+0x13e>
 8002fee:	0022      	movs	r2, r4
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	9906      	ldr	r1, [sp, #24]
 8002ff4:	9805      	ldr	r0, [sp, #20]
 8002ff6:	9e07      	ldr	r6, [sp, #28]
 8002ff8:	3219      	adds	r2, #25
 8002ffa:	47b0      	blx	r6
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d09c      	beq.n	8002f3a <_printf_i+0x13a>
 8003000:	3501      	adds	r5, #1
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	42ab      	cmp	r3, r5
 800300a:	dcf0      	bgt.n	8002fee <_printf_i+0x1ee>
 800300c:	e7e9      	b.n	8002fe2 <_printf_i+0x1e2>
 800300e:	2500      	movs	r5, #0
 8003010:	e7f7      	b.n	8003002 <_printf_i+0x202>
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	08003178 	.word	0x08003178
 8003018:	08003189 	.word	0x08003189

0800301c <memmove>:
 800301c:	b510      	push	{r4, lr}
 800301e:	4288      	cmp	r0, r1
 8003020:	d806      	bhi.n	8003030 <memmove+0x14>
 8003022:	2300      	movs	r3, #0
 8003024:	429a      	cmp	r2, r3
 8003026:	d008      	beq.n	800303a <memmove+0x1e>
 8003028:	5ccc      	ldrb	r4, [r1, r3]
 800302a:	54c4      	strb	r4, [r0, r3]
 800302c:	3301      	adds	r3, #1
 800302e:	e7f9      	b.n	8003024 <memmove+0x8>
 8003030:	188b      	adds	r3, r1, r2
 8003032:	4298      	cmp	r0, r3
 8003034:	d2f5      	bcs.n	8003022 <memmove+0x6>
 8003036:	3a01      	subs	r2, #1
 8003038:	d200      	bcs.n	800303c <memmove+0x20>
 800303a:	bd10      	pop	{r4, pc}
 800303c:	5c8b      	ldrb	r3, [r1, r2]
 800303e:	5483      	strb	r3, [r0, r2]
 8003040:	e7f9      	b.n	8003036 <memmove+0x1a>
	...

08003044 <_sbrk_r>:
 8003044:	2300      	movs	r3, #0
 8003046:	b570      	push	{r4, r5, r6, lr}
 8003048:	4d06      	ldr	r5, [pc, #24]	@ (8003064 <_sbrk_r+0x20>)
 800304a:	0004      	movs	r4, r0
 800304c:	0008      	movs	r0, r1
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	f7fe f9a2 	bl	8001398 <_sbrk>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d103      	bne.n	8003060 <_sbrk_r+0x1c>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d000      	beq.n	8003060 <_sbrk_r+0x1c>
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	20000280 	.word	0x20000280

08003068 <memchr>:
 8003068:	b2c9      	uxtb	r1, r1
 800306a:	1882      	adds	r2, r0, r2
 800306c:	4290      	cmp	r0, r2
 800306e:	d101      	bne.n	8003074 <memchr+0xc>
 8003070:	2000      	movs	r0, #0
 8003072:	4770      	bx	lr
 8003074:	7803      	ldrb	r3, [r0, #0]
 8003076:	428b      	cmp	r3, r1
 8003078:	d0fb      	beq.n	8003072 <memchr+0xa>
 800307a:	3001      	adds	r0, #1
 800307c:	e7f6      	b.n	800306c <memchr+0x4>

0800307e <memcpy>:
 800307e:	2300      	movs	r3, #0
 8003080:	b510      	push	{r4, lr}
 8003082:	429a      	cmp	r2, r3
 8003084:	d100      	bne.n	8003088 <memcpy+0xa>
 8003086:	bd10      	pop	{r4, pc}
 8003088:	5ccc      	ldrb	r4, [r1, r3]
 800308a:	54c4      	strb	r4, [r0, r3]
 800308c:	3301      	adds	r3, #1
 800308e:	e7f8      	b.n	8003082 <memcpy+0x4>

08003090 <_realloc_r>:
 8003090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003092:	0006      	movs	r6, r0
 8003094:	000c      	movs	r4, r1
 8003096:	0015      	movs	r5, r2
 8003098:	2900      	cmp	r1, #0
 800309a:	d105      	bne.n	80030a8 <_realloc_r+0x18>
 800309c:	0011      	movs	r1, r2
 800309e:	f7ff fc51 	bl	8002944 <_malloc_r>
 80030a2:	0004      	movs	r4, r0
 80030a4:	0020      	movs	r0, r4
 80030a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d103      	bne.n	80030b4 <_realloc_r+0x24>
 80030ac:	f7ff fbde 	bl	800286c <_free_r>
 80030b0:	2400      	movs	r4, #0
 80030b2:	e7f7      	b.n	80030a4 <_realloc_r+0x14>
 80030b4:	f000 f81b 	bl	80030ee <_malloc_usable_size_r>
 80030b8:	0007      	movs	r7, r0
 80030ba:	4285      	cmp	r5, r0
 80030bc:	d802      	bhi.n	80030c4 <_realloc_r+0x34>
 80030be:	0843      	lsrs	r3, r0, #1
 80030c0:	42ab      	cmp	r3, r5
 80030c2:	d3ef      	bcc.n	80030a4 <_realloc_r+0x14>
 80030c4:	0029      	movs	r1, r5
 80030c6:	0030      	movs	r0, r6
 80030c8:	f7ff fc3c 	bl	8002944 <_malloc_r>
 80030cc:	9001      	str	r0, [sp, #4]
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d0ee      	beq.n	80030b0 <_realloc_r+0x20>
 80030d2:	002a      	movs	r2, r5
 80030d4:	42bd      	cmp	r5, r7
 80030d6:	d900      	bls.n	80030da <_realloc_r+0x4a>
 80030d8:	003a      	movs	r2, r7
 80030da:	0021      	movs	r1, r4
 80030dc:	9801      	ldr	r0, [sp, #4]
 80030de:	f7ff ffce 	bl	800307e <memcpy>
 80030e2:	0021      	movs	r1, r4
 80030e4:	0030      	movs	r0, r6
 80030e6:	f7ff fbc1 	bl	800286c <_free_r>
 80030ea:	9c01      	ldr	r4, [sp, #4]
 80030ec:	e7da      	b.n	80030a4 <_realloc_r+0x14>

080030ee <_malloc_usable_size_r>:
 80030ee:	1f0b      	subs	r3, r1, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1f18      	subs	r0, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da01      	bge.n	80030fc <_malloc_usable_size_r+0xe>
 80030f8:	580b      	ldr	r3, [r1, r0]
 80030fa:	18c0      	adds	r0, r0, r3
 80030fc:	4770      	bx	lr
	...

08003100 <_init>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr

0800310c <_fini>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr
